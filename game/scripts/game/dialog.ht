import 'entity/character/character.ht'
import 'util.ht'
import 'game.ht'

/// 加载到本次游戏的对话资源
let gDialogs = {}

struct DialogContentData {
  construct({
    character,
    isHero,
    characterId,
    displayNameLocaleKey,
    displayName,
    icon,
    hideName,
    hideIcon,
    localeKeys,
    lines,
    interpolations,
  }) {
    if (characterId || character) {
      assert(hero != null)
      character ??= game.characters[characterId]
      final heroHaveMetChar = haveMet(hero, character)
      if (heroHaveMetChar) {
        this.displayName = hideName ? '???' :
          (displayNameLocaleKey ? engine.locale(displayNameLocaleKey) :
            (displayName ?? character.name))
      } else {
        this.displayName = '???'
      }
      
      this.icon = hideIcon ? null : (icon ?? character.icon)
    }
    else if (isHero) {
      assert(hero != null)
      this.characterId = hero.id
      this.displayName = hideName ? '???' :
        (displayNameLocaleKey ? engine.locale(displayNameLocaleKey) :
        (displayName ?? engine.locale('me')))
      this.icon = hideIcon ? null : icon ?? hero.icon
    } else {
      this.displayName = displayNameLocaleKey ? engine.locale(displayNameLocaleKey) : displayName
      this.icon = icon
    }
    
    let strings
    if (localeKeys is List) {
      assert(localeKeys.isNotEmpty)
      strings = localeKeys.map( (key) => engine.locale(key, interpolations: interpolations) ).toList()
    } else {
      assert(lines is List && lines.isNotEmpty)
      strings = interpolate(lines, interpolations)
    }
    this.lines = []
    for (const message in strings) {
      const splits = message.split('\n')
      for (final split in splits) {
        final trim = split.trim()
        if (trim.isNotEmpty) {
          this.lines.add(trim)
        }
      }
    }
  }
}

namespace dialog {
  // 下面这些是需要context的版本，和引擎侧直接绑定
  // 但我们将其包装了一层，可以省去每次都带上context的麻烦
  external function _site(context, {site, image})

  external function _start(context)

  external function _say(context, data, returnValue)

  external function _select(context, selections)

  external function _characterSelect(context, title, ids, showCloseButton)

  external function _visitSelect(context, idList, { hideHero: bool })

  external function _merchant(context, merchant, priceFactor, allowSell, sellableCategory, sellableKind)

  external function _quests(context, site)

  external function _maze(context, maze)

  external function _progress(context, titletitle, checkProgress)

  external function _inputInteger(context, title, min, max)

  /// 下面这些只有在调用过 start 之后才能看到效果

  external function pushImage(image: string, [ positionXOffset: float = 0.0 ])

  external function popImage([image: string])

  external function popAllImage()

  external function pushScene(image: string)

  external function popScene()

  external function popAllScene()

  /// 下面这些可以随时使用

  /// 进入场景，场景包含人物列表和一张退出卡牌
  function site({site, image}) => _site(ctx, site: site, image: image)

  /// 开始对话，此时可以推送场景、角色图到对话背景中
  /// 必须和 end() 一同使用
  function start(image) => _start(ctx)
  
  /// 结束对话，所有场景和角色都会被清理
  /// 必须和 start() 一同使用
  external function end()
  
  /// 退出上一个场景或对话框，不管是什么
  external function pop()

  function localeLines(localeKeys, {
    isHero,
    character,
    characterId,
    displayNameLocaleKey,
    displayName,
    icon,
    hideName,
    hideIcon,
    interpolations,
    returnValue,
  }) -> Future {
    const dlgData = DialogContentData(
      localeKeys: (localeKeys is List) ? localeKeys : [localeKeys],
      isHero: isHero,
      character: character,
      characterId: characterId,
      displayNameLocaleKey: displayNameLocaleKey,
      displayName: displayName,
      icon: icon,
      hideName: hideName,
      hideIcon: hideIcon,
      interpolations: interpolations,
    )
    return _say(ctx, dlgData, returnValue)
  }

  function lines(lines, {
    isHero,
    character,
    characterId,
    displayNameLocaleKey,
    displayName,
    icon,
    hideName,
    hideIcon,
    interpolations,
    returnValue,
  }) -> Future {
    const dlgData = DialogContentData(
      lines: (lines is List) ? lines : [lines],
      isHero: isHero,
      character: character,
      characterId: characterId,
      displayNameLocaleKey: displayNameLocaleKey,
      displayName: displayName,
      icon: icon,
      hideName: hideName,
      hideIcon: hideIcon,
      interpolations: interpolations,
    )
    return _say(ctx, dlgData, returnValue)
  }

  function say(data, { returnValue }) -> Future {
    return _say(ctx, data, returnValue)
  }

  function localeSelect(texts: List) -> Future {
    assert(texts is List)
    const selections = {}
    for (const text in texts) {
      selections[text] = {
        'text': engine.locale(text),
      }
    }
    return _select(ctx, selections)
  }

  function select(selections) -> Future {
    return _select(ctx, selections)
  }

  function characterSelect({title, ids, showCloseButton = true}) -> Future {
    return _characterSelect(ctx, title, ids, showCloseButton)
  }

  function visitSelect(idList) -> Future {
    return _visitSelect(ctx, idList)
  }

  function merchant(merchant, {
    priceFactor = 2.0,
    allowSell = true,
    sellableCategory = [],
    sellableKind = [],
  }) -> Future {
    return _merchant(
      buildContext,
      merchant,
      priceFactor,
      allowSell,
      sellableCategory,
      sellableKind,
    )
  }

  function quests(site) -> Future {
    return _quests(ctx, site)
  }

  function maze(maze) -> Future {
    return _maze(ctx, maze)
  }

  // 显示一个进度窗口，以天为单位显示动画，每天会调用传入的 checkProgress 函数的返回值来判断是否继续下一天
  function progress(title, { checkProgress: function }) {
    return _progress(ctx, title, checkProgress)
  }

  function inputInteger(title, minOrMax, [max]) {
    let min = 1
    if (max == null) {
      max = minOrMax
    } else {
      min = minOrMax
    }
    assert(min <= max)
    return _inputInteger(ctx, title, min, max)
  }
}
