import '../random.ht'
import '../name/skill.ht'

const kBattleCardGenres = [
  'general',
  'flying_sword',
  'dao',
]

const kBattleCardCategories = [
  'attack',
  'buff',
]

function addBattleCardAffixesData(mainAffixes, supportAffixes) {
  game.battleCardMainAffixes = mainAffixes
  game.battleCardSupportAffixes = supportAffixes
  engine.info('载入战斗卡牌词条：主词条 [${mainAffixes.length}]，额外词条 [${supportAffixes.length}]')
}

struct BattleCard {
  construct ({
    genre, // 'general', 'dao', 'flying_sword'
    category, // 'attack', 'buff'
    kind, // 'sword',
    level,
    rank = 1, // 境界决定了额外词条数量
  }) {
    if (level != null) {
      assert(level >= 1 && level <= (rank * 5))
    } else {
      level = random.nextInt(rank * 5) + 1
    }

    this.id = crypto.randomNID(5, true)

    final mainAffixes = game.battleCardMainAffixes.values.where( (affix) {
      if (genre != null && !affix['genre'].contains(genre)) {
        return false
      }
      if (category != null && affix['category'] != category) {
        return false
      }
      if (kind != null && affix['kind'] != kind) {
        return false
      }
      return true
    })
    assert(mainAffixes.isNotEmpty)
    const mainAffix = JSON.deepcopy(random.nextIterable(mainAffixes))
    mainAffix.level = level
    this.name = generateSkillName(category: mainAffix.kind).name

    final affixUniqueIds = []
    if (mainAffix.affixId is List) {
      affixUniqueIds.addAll(mainAffix.affixId)
    } else if (mainAffix.affixId is string) {
      affixUniqueIds.add(mainAffix.affixId)
    }

    let minExtraAffixCount = rank - 1
    let maxExtraAffixCount = rank
    let minGreaterAffixCount = 0
    let maxGreaterAffixCount = 0
    if (rank >= 5) {
      minExtraAffixCount = maxExtraAffixCount = 4
      minGreaterAffixCount = rank - 5
      maxGreaterAffixCount = rank - 4
    }

    final supportAffixes = game.battleCardSupportAffixes.values.where( (affix) {
      if (!affix['genre'].contains(mainAffix.genre)) {
        return false
      }
      if (!affix['category'].contains(mainAffix.category)) {
        return false
      }
      if (affixUniqueIds.contains(affix.affixId)) {
        return false
      }
      return true
    })
    assert(supportAffixes.isNotEmpty)

    final extraAffixCount = minExtraAffixCount + random.nextInt(maxExtraAffixCount - minExtraAffixCount + 1)
    final extraAffixes = []
    for (var i = 0; i < extraAffixCount; ++i) {
      let existed = false
      let supportAffix
      do {
        supportAffix = JSON.deepcopy(random.nextIterable(supportAffixes))
        for (final existedAffix in extraAffixes) {
          if (extraAffixes.id == supportAffix.id) {
            existed = true
            break
          }
        }
      } while (existed)
      extraAffixes.add(supportAffix)
    }

    this.affixes = [mainAffix, ...extraAffixes]
  }
}
