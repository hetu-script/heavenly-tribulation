
import '../game.ht'
import '../tile/hexagonal_tile.ht'
import '../tile/tilemap.ht'
import '../tile/common.ht'
import '../name/zone.ht'

export { createSandboxWorld } from 'sandbox.ht'

function setWorld(newWorld) {
  world = universe.worlds[newWorld.id] = newWorld
  universe.currentWorldId = newWorld.id
  if (history.worlds[newWorld.id] == null) {
    currentWorldHistory = history.worlds[newWorld.id] = {
      timestamp: 0,
      incidents: [],
    }
  } else {
    currentWorldHistory = history.worlds[newWorld.id]
  }
}

/// 刷新地图上色信息
function loadTileMapZoneColors {
  const colors = []
  const zoneColors = Map()
  const organizationColors = Map()
  for (const tile in world.terrains) {
    if (tile.zoneId) {
      const zone = world.zones[tile.zoneId]
      zoneColors[tile.index] = zone.color
    }
    if (tile.nationId) {
      const organization = game.organizations[tile.nationId]
      organizationColors[tile.index] = organization.color
    }
  }
  colors.add(zoneColors)
  colors.add(organizationColors)
  engine.loadTileMapZoneColors(colors)
}


function createBlankWorld({
    id,
    name,
    terrainSpriteSheet = 'fantasyhextiles_v3_borderless.png',
    width,
    height,
  }) {
  assert(width is integer && width >= 12)
  assert(height is integer && height >= 12)

  let newWorld = TileMap(
    id: id ?? 'main',
    name: name,
    terrainSpriteSheet: terrainSpriteSheet,
    width: width,
    height: height,
  )

  newWorld.name = name ?? generateZoneName(category: 'world').name

  engine.info('生成空白地块，默认为海洋')
  for (const j in range(height)) {
    for (const i in range(width)) {
      newWorld.terrains.add({
          ...Tile(i + 1, j + 1),
          index: i + j * mapWidth,
          spriteIndex: kSpriteWater,
          overlaySprite: {},
          kind: kTerrainKindSea,
          // 该地块的每月刷新野外事件的时间
          monthlyUpdateTime: random.nextInt(kTicksPerMonth)
      })
    }
  }

  setWorld(newWorld)

  return newWorld
}

function expandCurrentWorldBySize(width, height, direction) {
  assert(width > 0 && height > 0)

  switch (direction) {
    'topLeft': {

    }
    'topCenter': {

    }
    'topRight': {

    }
    'centerLeft': {

    }
    'center': {

    }
    'centerRight': {

    }
    'bottomLeft': {

    }
    'bottomCenter': {

    }
    'bottomRight': {
      
    }
  }

  for (const j in range(world.height)) {
    let row = []
    for (const i in range(width)) {
      row.add({
          ...Tile(world.width + i + 1, j + 1),
          spriteIndex: kSpriteWater,
          overlaySprite: {},
          kind: kTerrainKindSea,
          // 该地块的每月刷新野外事件的时间
          monthlyUpdateTime: random.nextInt(kTicksPerMonth)
        })
    }
    world.terrains.insertAll((j + 1) * world.width + j * width, row)
  }

  for (const j in range(height)) {
    for (const i in range(world.width + width)) {
      world.terrains.add({
          ...Tile(i + 1, j + 1),
          spriteIndex: kSpriteWater,
          overlaySprite: {},
          kind: kTerrainKindSea,
          // 该地块的每月刷新野外事件的时间
          monthlyUpdateTime: random.nextInt(kTicksPerMonth)
        })
    }
  }

  world.width += width
  world.height += height

  for (let i in range(world.terrains.length)) {
    let terrain = world.terrains[i]
    terrain.index = i
  }
}
