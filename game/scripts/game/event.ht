import 'game.ht'

/// 加载到本次游戏的事件处理模块。
/// 理论上每个游戏Mod都是单独的一个模块，
/// 每个模块都可以处理多种事件，
/// 每个模块内部的key是游戏自己定义的事件名之一，
/// value是一个接受一个arg的函数，
/// 这个arg是一个struct对象，包含不同的事件参数
let gEventHandlers = {}

// EventHanlder
// 如果 isDisposable 为 true，则这个时间处理会在第一次触发之后被删除
// EventHandler {
//   id: 'myname',
//   isDisposable: false,
//   onNewGame: (arg) {
//     engine.info('[${this.name}]: 新游戏事件回调函数')
//   },
//   onUpdate: (arg) {
//     engine.info('[${this.name}]: 更新世界事件回调函数')
//   },
// }

function getEventHandlerById(id: string) {
  return gEventHandlers[id]
}

function addEventHandler(handler) {
  gEventHandlers[handler.id] = handler
}

/// 触发 mod 的回调函数
/// 游戏自己的逻辑不用这个
/// 回调函数需要在游戏开始时就读取，不要动态添加
/// 因为函数无法保存，因此一旦读档，回调就会消失
/// 事件处理函数将会收到两个参数
/// 第一个参数module是模组数据，可以保存一些flag之类
/// 第二个是回调本身的一些传入参数，例如执行时的一些情况等等
function onGameEvent(eventId: string, [ handlerId, ...args ]) {
  if (handlerId == null) {
    for (const handler of gEventHandlers) {
      _handlerCallback(eventId, handler, ...args)
    }
  } else {
    const handler = gEventHandlers[handlerId]
    _handlerCallback(eventId, handler, ...args)
  }
}

function _handlerCallback(eventId, handler, [...args]) {
  const module = game.modules[handler.id]
  // 确认模组数据已经被加载
  assert(module != null)
  const callback = handler[eventId];
  // callback 可能是 null
  if(callback is function) {
    engine.info('事件处理回调函数：[${handler.id}] - ${eventId}')
    callback.apply(module, ...args)
  }
}
