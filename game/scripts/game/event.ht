import 'game.ht'

/// 加载到本次游戏的事件处理模块。
/// 每个模块内部的key是游戏自己定义的事件名之一，
/// value是一个接受一个arg的函数，
/// 这个arg是一个struct对象，包含不同的事件参数
// count代表此事件的触发次数，
// isOneTimeEvent 为 true，并且count > 0，则不会再触发
/// gEventHandlers {
/// 第一层key是世界名字，每个世界有自己的一套逻辑
///   worldName1: {
///     第二层是mod名字
///     mod1: {
///       onNewGame: {
///         
///         handle: () {
///           engine.info('[${this.name}]: 新游戏事件回调函数')
///         }
///       }
///     }
///   }
/// }
let gEventHandlers = {}

function getEventHandlerById(worldId, id: string) {
  return gEventHandlers[worldId]?[id]
}

function addEventHandlers({worldId, moduleId, handlers}) {
  engine.info('向世界 [${worldId}] 添加模组事件表：[${moduleId}]...')

  if (gEventHandlers[worldId] == null) {
    gEventHandlers[worldId] = {}
  }
  if (gEventHandlers[worldId][moduleId] != null) {
    engine.warn('事件处理模组 [${moduleId}]上的重复事件将会被覆盖。')
  } else {
    gEventHandlers[worldId][moduleId] = {}
  }
  Object.assign(gEventHandlers[worldId][moduleId], handlers)
}

/// 触发 mod 的回调函数
/// 游戏自己的逻辑不用这个
/// 回调函数需要在游戏开始时就读取，不要动态添加
/// 因为函数无法保存，因此一旦读档，回调就会消失
/// 事件处理函数将会收到两个参数
/// 第一个参数module是模组数据，可以保存一些flag之类
/// 第二个是回调本身的一些传入参数，例如执行时的一些情况等等
function onGameEvent(eventId: string, ...args) async {
  engine.info('触发游戏事件：${eventId}')
  final currentWorldModules = gEventHandlers[world.id]
  if (currentWorldModules == null) {
    engine.info('未发现世界 ${world.id}(${world.id}) 的事件处理模组。')
    return
  }
  for (const module in game.modules.values) {
    let callback = currentWorldModules[module.id]?[eventId]
    // callback 可能是 null
    if(callback is function) {
      engine.info('执行模组：[${module.id}] 的事件处理函数 ${eventId}')
      async callback.apply(module, ...args)
    }
  }
}
