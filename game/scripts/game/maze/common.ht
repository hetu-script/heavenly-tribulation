import '../binding/maze.ht'
import '../game.ht'
import '../entity/character/battle_entity.ht'
import '../entity/common.ht'
import '../tile/hexagonal_tile.ht'
import 'mountain.ht'
import 'cultivator_recruit.ht'

const kEncounterProbability = 0.5
const kLevelUniqueEncounterProbability = 0.15
const kMazeUniqueEncounterProbability = 0.075

const kMazeCategoryMountain = 'mountain'
const kMazeCategoryCultivatorRecruit = 'cultivatorRecruit'

function enterMaze(maze) {
  currentMaze = maze
  universe.currentMazeId = maze.id
}

function leaveMaze(maze) {
  currentMaze = null
  universe.currentMazeId = null
  // 移除所有临时npc
  for (const entity of maze.entities) {
    if (entity.entityType == kEntityTypeNpc && !entity.isPermanent) {
      delete game.npcs[entity.id]
    }
  }
  Maze.disposeMaze()
}

function setMazeLevelIndex(maze, levelIndex) {
  maze.currentLevelIndex = levelIndex
}

function mazeGameOver(maze) {
  Maze.showMazeGameOver().then((_) {
    leaveMaze(maze)
  })
}

/// 返回布尔值，如果为真，则玩家控制角色会返回上一格，false 则停在这一格，null 则不影响
function onHeroMovedOnMazeMap({left, top, maze, currentLevelIndex}) {
  engine.info('玩家在副本地图 ${maze.id} 第 ${currentLevelIndex + 1} 层移动到了: ${left}, ${top}')
  
  const index = tilePos2Index(left, top, maze.width)
  const tile = maze.levels[currentLevelIndex].terrains[index]

  if (maze.modName == null) {
    // 游戏本体内置的副本
    switch (maze.category) {
      kMazeCategoryMountain => {
        return onHeroMovedOnMountain(
          tile: tile,
          maze: maze,
          currentLevelIndex: currentLevelIndex,
        )
      }
      kMazeCategoryCultivatorRecruit => {
        return onHeroMovedOnCultivationRecruitMaze(
          tile: tile,
          maze: maze,
          currentLevelIndex: currentLevelIndex,
        )
      }
    }

    engine.error('未知的内置副本类型：${maze.category}')
  } else {
    // mod 创建的副本，使用对应的 mod 的 eventHandler 处理
    
    engine.error('没有找到副本 ${maze.id} 对应的 mod ${moze.modName} 的事件处理模块')
  }

}
