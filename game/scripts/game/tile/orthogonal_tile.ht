import 'tilemap.ht'

struct Tile {
  construct (left, top, {index, mapWidth}) {
    assert(left != null && top != null)
    if (index) {
      this.index = index
    } else if (mapWidth) {
      this.index = tilePos2Index(left, top, mapWidth)
    }
    this.left = left
    this.top = top
  }
}

// 计算 orthogonal tile 的方向
function getDirection(start: {}, end: {}) {
  assert(start.left != end.left || start.top != end.top)
  if (end.left == start.left) {
    if (end.top < start.top) {
      return 'north'
    } else {
      return 'south'
    }
  } else if (end.left > start.left) {
    if (end.top == start.top) {
      return 'east'
    } else if (end.top < start.top) {
      return 'northEast'
    } else {
      return 'southEast'
    }
  } else {
    if (end.top == start.top) {
      return 'west'
    } else if (end.top < start.top) {
      return 'northWest'
    } else {
      return 'southWest'
    }
  }
}

// manhattan 距离算法
function getTileDistance(start, end) {
  const result = (end.left - start.left).abs() + (end.top - start.top).abs()
  // print('getTileDistance: ${start}, ${end}, result: ${result}')
  return result
}

// 获取相邻并且在地图范围内的格子
// 如果 [zoneIndex] 不为 null，则只会返回和起点所在 tile 具有相同 zoneIndex 的格子
function getMapTileNeighbors(left: int, top: int, map, { zoneIndex, includeDiagonal = false }) {
  assert(isPositionWithinMap(left, top, map.width, map.height))
  const origin = map.terrains[tilePos2Index(left, top, map.width)]
  const neighbors = []

  function addNeighbor(tile) {
    if (!zoneIndex || tile.zoneIndex == zoneIndex ||
      (tile.isHarbor && tile.harborOfZoneIndex == origin.zoneIndex) || 
      (origin.isHarbor && origin.harborOfZoneIndex == tile.zoneIndex)) {
      neighbors.add(tile)
    }
  }

  // 上面
  if (isPositionWithinMap(left, top - 1, map.width, map.height)) {
    const tile = map.terrains[tilePos2Index(left, top - 1, map.width)]
    addNeighbor(tile)
  }
  // 下面
  if (isPositionWithinMap(left, top + 1, map.width, map.height)) {
    const tile = map.terrains[tilePos2Index(left, top + 1, map.width)]
    addNeighbor(tile)
  }
  // 左边
  if (isPositionWithinMap(left - 1, top, map.width, map.height)) {
    const tile = map.terrains[tilePos2Index(left - 1, top, map.width)]
    addNeighbor(tile)
  }
  // 右边
  if (isPositionWithinMap(left + 1, top, map.width, map.height)) {
    const tile = map.terrains[tilePos2Index(left + 1, top, map.width)]
    addNeighbor(tile)
  }
  if (includeDiagonal) {
    // 左上
    if (isPositionWithinMap(left - 1, top - 1, map.width, map.height)) {
      const tile = map.terrains[tilePos2Index(left - 1, top - 1, map.width)]
      addNeighbor(tile)
    }
    // 右上
    if (isPositionWithinMap(left + 1, top - 1, map.width, map.height)) {
      const tile = map.terrains[tilePos2Index(left + 1, top - 1, map.width)]
      addNeighbor(tile)
    }
    // 左下
    if (isPositionWithinMap(left - 1, top + 1, map.width, map.height)) {
      const tile = map.terrains[tilePos2Index(left - 1, top + 1, map.width)]
      addNeighbor(tile)
    }
    // 右下
    if (isPositionWithinMap(left + 1, top + 1, map.width, map.height)) {
      const tile = map.terrains[tilePos2Index(left + 1, top + 1, map.width)]
      addNeighbor(tile)
    }
  }
  return neighbors
}
