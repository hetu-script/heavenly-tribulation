import 'game.ht'
import 'event.ht'
import 'entity/character/character.ht'
import 'l10n.ht'
import 'maze/maze.ht'
import 'quest/quest.ht'
import 'tile/common.ht'
import 'name/character.ht'
import 'binding/worldmap.ht'
import 'entity/location/location.ht'
import 'tile/hexagonal_tile.ht'
import 'entity/skill/skill.ht'

const _kQuestProbability = 0.35

const _kMinSizeforFishTile = 16
const _kMinSizeforStormTile = 8

function getBountyhouseQuestMax(development) -> int {
  if (development > 20) {
    return 5
  } else {
    return development ~/ 4 + 1
  }
}

/// 更新游戏逻辑，将时间向前推进一帧
/// 返回值表示是否遇到了中断逻辑的事件，这会影响一些连续进行的动作，例如探索或者修炼等等
function updateGame({ticks = 1, timeflow = true, playerEvent = true}) -> bool {
  for (const i in range(ticks)) {
    // 每个tick执行的代码
    handleBabies()

    // 每月1日的更新
    if (game.timestamp % kTicksPerMonth == 0) {

      engine.info('在水域中生成暴风雨')
      // 清空暴风雨区域
      for (const index in game.stormTileIndexes) {
        const tile = currentWorld.terrains[index]
        delete tile.flags.isInStorm
      }
      game.stormTileIndexes = []
      const stormEventsCount = currentWorld.waterTerrainIndexes.length ~/ _kMinSizeforStormTile + 1
      for (const i in range(stormEventsCount)) {
        let stormLocationIndex
        do {
          stormLocationIndex = random.nextIterable(currentWorld.waterTerrainIndexes)
        } while (stormLocationIndex in game.stormTileIndexes)
        game.stormTileIndexes.add(stormLocationIndex)
        const stormTile = currentWorld.terrains[stormLocationIndex]
        // engine.info('在 ${stormTile.left},${stormTile.top} 生成暴风雨')
        stormTile.flags.isInStorm = true
      }

      engine.info('在水域中生成捕鱼区')
      // 清空鱼类活跃区域
      for (const index in game.fishTileIndexes) {
        const tile = currentWorld.terrains[index]
        delete tile.flags.isGatheredFish
        // 清空叠加的鱼跃效果动态贴图
        WorldMap.setWorldMapOverlaySprite(tile.left, tile.top, null)
      }
      game.fishTileIndexes = []
      const fishEventsCount = currentWorld.waterTerrainIndexes.length ~/ _kMinSizeforFishTile + 1
      for (const i in range(fishEventsCount)) {
        let fishLocationIndex
        do {
          fishLocationIndex = random.nextIterable(currentWorld.waterTerrainIndexes)
        } while (fishLocationIndex in game.fishTileIndexes)
        game.fishTileIndexes.add(fishLocationIndex)
        const fishTile = currentWorld.terrains[fishLocationIndex]
        // engine.info('在 ${fishTile.left},${fishTile.top} 生成鱼类活跃区')
        const overlay = {
          row: 3,
        }
        fishTile.overlaySprite = overlay
        if (game.isLoaded) {
          WorldMap.setWorldMapOverlaySprite(fishTile.left, fishTile.top, overlay)
        }
        fishTile.flags.isGatheredFish = true
      }
    }

    // 对于每个游戏中的单位，每个月执行的代码随机分布在一个月中的某一天，这是为了让游戏不会在某一天集中运算而卡住。
    
    // 每一个野外地块，每个月固定时间会随机刷新一个野外遭遇
    // 野外遭遇包括NPC事件、随机副本等等
    // for (const terrain in currentWorld.terrains) {
    //   if (getCurrentTicksOfMonth() == terrain.monthlyUpdateTime) {
    //     updateTerrain(terrain)
    //   }
    // }

    // 每个建筑，每个月会根据其属性而支付费用和获得收入，费用和收入可能是各种资源
    // 商店类建筑会刷新物品和银两
    // 刷新任务，无论之前的任务是否还存在，非组织拥有的第三方建筑每个月只会有一个任务
    for (const location of game.locations) {
      for (const site of location.sites) {
        if (getCurrentTicksOfMonth() == site.monthlyUpdateTime) {
          updateSite(site)
        }
      }
      // 据点会进行稳定度的变化、人口的增长等
      // if (getCurrentTicksOfMonth() == location.monthlyUpdateTime) {
      //   updateLocation(location)
      // }
    }

    // const heroOrganization = getHeroOrganization()
    
    // 触发每个组织的刷新事件
    for (const organization of game.organizations) {
      // 跳过玩家自己控制的组织
      if (game.heroId != null && game.heroId == organization.headId) continue

      // if (organization.category != kOrganizationCategoryNation) {
      const location = game.locations[organization.headquartersId]
      if (getCurrentMonth() == organization.yearlyRecruitMonth) {
        if (!location.flags.recruitingOrganizationIds.contains(organization.id)) {
          location.flags.recruitingOrganizationIds.add(organization.id)
          engine.info('${organization.name} 的招募大比本月开始。')
        }
      } else if (location.flags.recruitingOrganizationIds.contains(organization.id)) {
        location.flags.recruitingOrganizationIds.remove(organization.id)
        engine.info('${organization.name} 的招募大比已经结束。')
      }
      // }

      // 年度事件
      if (getCurrentTicksOfYear() == organization.yearlyUpdateTime) {
        updateOrganizationYearly(organization)
      }

      //   // 月度事件
      //   if (getCurrentTicksOfMonth() == organization.monthlyUpdateTime) {
      //     updateOrganizationMonthly(organization)
      //   }
    }
    
    // 触发每个角色的刷新事件
    // for (const character of game.characters) {
    //   // 跳过玩家自己控制的角色
    //   if (game.heroId != null && game.heroId == character.id) continue

    //   // 据点会进行稳定度的变化、人口的增长等
    //   if (getCurrentTicksOfMonth() == character.monthlyUpdateTime) {
    //     updateCharacter(character)
    //   }
    // }

    // if (playerEvent) {
    //   // 触发一些玩家遇到的固定事件
    //   if (game.timestamp % kTicksPerMonth == 0) {
    //     // 重置玩家自己的每月行动
    //     resetPlayerMonthlyActivities(game)
    //   }
    // }

    // 调用mod上的回调函数
    onGameEvent('onUpdate')

    if (timeflow) ++game.timestamp
  }

  return false
}

// 每个tick检查一次当前是否有婴儿出生
function handleBabies {
  const pendingRemovedIds = Set()
  for (const baby of game.babies) {
    if (game.timestamp - baby.conceptionTimestamp < baby.pregnancyTime) continue
    const mother = game.characters[baby.motherId]
    if (!mother.isDead) {
      mother.isPregnant = false
      assert(mother.locationId != null)
      const location = game.locations[mother.locationId]
      const character = Character(
        familyName: baby.familyName,
        shorname: baby.shorname,
        isFemale: baby.isFemale,
        birthTimestamp: game.timestamp,
        locationId: location.id,
        isNewborn: true,
        fatherId: baby.fatherId,
        motherId: baby.motherId,
      )
    }
    pendingRemovedIds.add(baby.id)
  }
  for (const id in pendingRemovedIds) {
    delete game.babies[id]
  }
}

function updateTerrain(terrain) {

}

// 刷新资源、生成每月任务
// 门派和官府会生成多个可选的任务
// 但商号、工坊和酒楼只有在是门派开设的情况下才会有多个任务，否则每个月只会提供唯一的一个任务
function updateSite(site) {
  const location = game.locations[site.locationId]
  engine.info('触发 ${location.name} ${site.name} 的月度更新事件')
  switch (site.category) {
    'tradinghouse' => {
      if (site.organizationId) {

      } else {
        // 清除上个月的数据
        site.workedThisMonth = false
        site.quests = {}

        // 非门派商号，这里会临时生成一个任务
        // 商号的运送任务都是普通物品，并且送到指定地点而非人物
        const destinationId = random.nextIterable(game.locations.keys)
        const destination = game.locations[destinationId]
        const destinationSiteId = random.nextIterable(destination.sites.keys)
        const distance = getTileDistance(location.tilePosition, destination.tilePosition)
        const quest = QuestDelivery(
          locationId: location.id,
          siteId: site.id,
          destinationLocationId: destinationId,
          destinationSiteId: destinationSiteId,
          item: Material(stackSize: 20),
          rewardMoney: distance * 10,
        )
        site.quests[quest.id] = quest
      }
    }
    'bountyhouse' => {
      site.workedThisMonth = false

      if (site.quests.length >= getBountyhouseQuestMax(location.development)) return
      
      // 生成盗贼副本类悬赏任务
      if (random.nextDouble() > _kQuestProbability) return
      // if (!location.nationId) return
      // const nation = game.organizations[location.nationId]
      // if (nation.hasBanditEvent) return
      if ((random.nextDouble() > location.stability / 100)) return
      
      let tried = 0
      let found = false
      const terrain = currentWorld.terrains[location.terrainIndex]
      const zone = currentWorld.zones[terrain.zoneIndex]
      let mazeTerrain
      do {
        ++tried
        let terraIndex = random.nextIterable(zone.terrainIndexes)
        let mazeTerrain = currentWorld.terrains[terraIndex]
        if (mazeTerrain.id != terrain.id && !mazeTerrain.locationId && mazeTerrain.spriteIndex == kSpriteLand) {
          found = true
        }
      } while (!found && tried < zone.terrainIndexes.length)

      if (found && mazeTerrain) {
        // nation.hasBanditEvent = true

        const quest = QuestBanditCamp(
          locationId: location.id,
          mazeTerrainIndex: mazeTerrain.index,
          kind: kQuestConquestMazeKindKillBanditBoss,
          bossName: generateCharacterName(),
        )
        engine.info('在 ${location.name} ${site.name} 生成悬赏任务：${quest.id}，副本地点：${mazeTerrain.left}, ${mazeTerrain.top}')
        site.quests[quest.id] = quest
      }
    }
  }
}

function updateLocation(location) {
  engine.info('触发 ${location.name} 的月度更新事件')

}

// 年度组织事件
function updateOrganizationYearly(organization) {
  engine.info('触发 ${organization.name} 的年度更新事件')

  if (organization.category == kOrganizationCategoryNation) {
    // 一个国家
    if (organization.borderIndexes.isNotEmpty) {
      const shuffle = random.shuffle(organization.borderIndexes).toList()
      for (const index in shuffle) {
        const terrain = currentWorld.terrains[index]
        if (terrain.organizationId == null && !terrain.isWater) {
          engine.info('国家 ${organization.name} 将其疆域扩展到周边的一个未被占领的格子 ${terrain.left},${terrain.top}')
          addTerrainToOrganization(terrain, organization)
          return true
        }
      }
    }

    // 暂时不为国家组织添加成员，这里直接返回
    return
  }

  // 为组织招募新的角色
  engine.info('为组织 ${organization.name} 招募新的角色')

  if (organizationMemberReachMax(organization) && organization.development < kOrganizationDevelopmentMax) {
    // engine.info('提升组织发展度')
    increaseOrganizationDevelopment(organization)
  } else {
    // 从最低等级开始，尝试提升成员等级
    // for (const rank in range(kOrganizationRankMax)) {
    //   const membersOfThisRank = getOrganizationMemberIdsOfRank(organization, rank)
    //   const membersOfHigherRank = getOrganizationMemberIdsOfRank(organization, rank + 1)
    //   if (membersOfThisRank.length >= maxMemberOfRank(rank)) {
    //     if (membersOfHigherRank.length < maxMemberOfRank(rank + 1)) {
    //       const memberId = random.nextIterable(membersOfThisRank)
    //       const member = game.characters[memberId]
    //       addTitleForCharacter(member, organization, rank + 1)
    //       break
    //     }
    //   }
    // }
  }
  
  let location = game.locations[organization.headquartersId]
  if (location.residingCharacterIds.isEmpty) {
    // 组织据点本身没有可用的人才（一般是因为是隐士据点）
    if (random.nextDouble() < kOrganizationRecruitOtherLocationProbability) {
      for (const otherLocation of game.locations) {
        if (otherLocation.id == location.id) continue

        if (otherLocation.residingCharacterIds.isNotEmpty) {
          location = otherLocation
          break
        }
      }
    }
  }

  if (location.residingCharacterIds.isNotEmpty) {
    if (random.nextDouble() < kOrganizationRecruitSuccessProbability) {
      const characterId = random.nextIterable(location.residingCharacterIds)
      const character = game.characters[characterId]
      if (character.organizationId != null) {
        engine.error(character.name, character.organizationId, organization.id)
      }
      addCharacterToOrganization(character, organization)
    }
  }
  
  // 组织获得新功法
  engine.info('为组织 ${organization.name} 添加新功法')

  switch (organization.category) {
    'cultivation' => {
      
      // switch (organization.fightSkillGenre) {
      //   'cultivation.kungfu' => {

      //     organizationRecordSkill(organization, WeaponArts())
      //     organizationRecordSkill(organization, Kungfu())
      //   }
      // }
      
      // switch (organization.supportSkillGenre) {
      //   'cultivation.craftsmanship' => {

      //   }
      // }
    }
  }

}

// 月度组织事件
function updateOrganizationMonthly(organization) {
  engine.info('触发 ${organization.name} 的月度更新事件')
  switch (organization.category) {
    'cultivation' => {
      
    }
    'nation' => {
      
    }
    'business' => {
      
    }
  }
}

function updateCharacter(character) {
  engine.info('触发 ${character.name} 的月度更新事件')

}

function handleQuestEnding(quest, result) {
  engine.info('完成了 ${quest.description} 的任务。')
  switch (quest.category) {
    kQuestCategoryDelivery => {
      if (quest.result) {
        return showDialogByLocaleKeys(['delivery.submitSuccessed']).then((_) {
          loot(hero, quest.reward)
          quest.isEnded = true
        })
      } else {
        return showDialogByLocaleKeys(['delivery.submitFailed'])
      }
    }
  }
}
