/// battle entity 指一个可以参与战斗的对象。
/// 此对象拥有一个牌库和一个卡组。
/// 卡组是战斗中使用的。而牌库可以用来交换卡牌收藏（偷取、学习或者交换）。

import '../common.ht'
import '../../binding/worldmap.ht'
import 'status_effect/world_map_status_effect.ht'

const _kCharacterAttributeMinValue = 1
const _kCharacterAttributeMaxValue = 100
const _kCharacterAttributeSumBase = 500
const _kCharacterAttributeSumDeviation = 300

const kEscapedLootProbability = 0.5

final kCharacterAttributeNames = [
  'strength',
  'constitution',
  'spirituality',
  'willpower',
  'perception',
  'dexterity',
]

const kMajorAttributeFactor = 0.75

const kBasicResource = 100

struct BattleEntity {
  construct ({
    attributes,
    attributeSum = _kCharacterAttributeSumBase,
    majorAttributes: List = [],
    generate = true,
    baseStamina = kBasicResource,
    baseLife = kBasicResource,
    baseMana = kBasicResource,
    baseSpirit = kBasicResource,
  }) {
    // 身上携带的金钱数量
    // this.money = 0

    // 身上的普通物品，id相同的可以堆叠，宝物，技能，道具都在这里，每一个都是单独生成，无法堆叠
    this.inventory = {}

    // 技能，可以放在主位（斗技）、辅助位（玄功）、支持位（遁术）
    this.skills = {}

    // 随从，可以设置为战斗伙伴
    this.companions = {}

    // 装备栏的位置是固定的 8 个
    // 装备栏只能装备各种法宝，获得其佩戴效果
    // 装备数据的 key 是 1-8 的数字，代表第几栏，
    // value 是一个 equipData 对象
    this.equipments = {}

    // 战斗卡组的位置是固定的 8 个
    // 战斗卡组可能包含各种武器、法宝和招式
    // 装备数据的 key 是 1-8 的数字，代表第几栏，
    // value 是一个 equipData 对象
    this.battleDeck = {}

    // 属性点数数值
    if (generate) {
      this.attributes = generateCharacterAttributes(
        attributesSum: Math.gaussianNoise(
            attributeSum,
            _kCharacterAttributeSumDeviation,
            min: kCharacterAttributeNames.length,
            max: kCharacterAttributeNames.length * 100,
            randomGenerator: random,
          ).toInt(),
        minValue: _kCharacterAttributeMinValue,
        maxValue: _kCharacterAttributeMaxValue,
        majorAttributes: majorAttributes,
        baseStamina: baseStamina,
        baseLife: baseLife,
        baseMana: baseMana,
        baseSpirit: baseSpirit,
      )
    } else {
      this.attributes = {}
    }

    if (attributes) {
      this.attributes.assign(attributes)
    }

    // 当前异常状态，包括 buff debuff 等等。
    this.statusEffects = {}

    calculateCharacterStats(this)
    rejuvenate(this)
  }
}

fun generateCharacterAttributes({
    attributesSum,
    minValue,
    maxValue,
    majorAttributes: List = [],
    baseStamina,
    baseLife,
    baseMana,
    baseSpirit,
  }) {
  assert(attributesSum > 0)
  assert(minValue > 0)
  assert(maxValue > 0 && maxValue > minValue)

  final attributes = {}
  
  fun checkValue(value) {
    if (value < minValue) return minValue
    if (value > maxValue) return maxValue
    return value
  }
  
  for (final name in random.shuffle(kCharacterAttributeNames)) {
    if (name in majorAttributes) {
      minValue = attributesSum / kCharacterAttributeNames.length * kMajorAttributeFactor
    }
    final value = (
      Math.gaussianNoise(
        attributesSum / kCharacterAttributeNames.length * 0.6,
        20,
        min: minValue,
        max: maxValue,
        randomGenerator: random,
      )
    ).toInt()
    attributes[name] = checkValue(value)
  }

  attributes.stamina = baseStamina ?? kBasicResource
  attributes.life = baseLife ?? kBasicResource
  attributes.mana = baseMana ?? kBasicResource
  attributes.spirit = baseSpirit ?? kBasicResource
  
  return attributes
}

/// 当前状态数值，由种族、天赋、属性点数、物品、技能、增益减损等计算得来
/// 状态包括：生命、伤害、防御等。
fun calculateCharacterStats(character) {
  character.stats = character.attributes.clone()

  var baseStamina = character.stats.stamina
  var baseLife = character.stats.life
  var baseMana = character.stats.mana
  var baseSpirit = character.stats.spirit

  var baseStrength = character.stats.strength
  var baseConstitution = character.stats.constitution
  var baseSpirituality = character.stats.spirituality
  var baseWillpower = character.stats.willpower
  var basePerception = character.stats.perception
  var baseDexterity = character.stats.dexterity

  for (final equipData of character.equipments) {
    final item = getEquipped(equipData, character)
    for (final effect of item.stats.effects) {
      if (effect.handlerType == kEffectCategoryCharacter) {
        when (effect.id) {
          'addStamina' -> {
            baseStamina += effect.values[0].value
          }
          'addLife' -> {
            baseLife += effect.values[0].value
          }
          'addMana' -> {
            baseMana += effect.values[0].value
          }
          'addSpirit' -> {
            baseSpirit += effect.values[0].value
          }
          'addStrength' -> {
            baseStrength += effect.values[0].value
          }
          'addConstitution' -> {
            baseConstitution += effect.values[0].value
          }
          'addSpirituality' -> {
            baseSpirituality += effect.values[0].value
          }
          'addPerception' -> {
            basePerception += effect.values[0].value
          }
          'addDexterity' -> {
            baseDexterity += effect.values[0].value
          }
        }
      }
    }
  }

  
  baseStamina += (baseStrength ~/ 5) * 5
  baseLife += (baseConstitution ~/ 5) * 5

  character.stats.maxStamina = baseStamina
  character.stats.maxLife = baseLife
  
  character.stats.strength = baseStrength
  character.stats.constitution = baseConstitution
  character.stats.spirituality = baseSpirituality
  character.stats.willpower = baseWillpower
  character.stats.perception = basePerception
  character.stats.dexterity = baseDexterity

}

fun getCharacterStats(character) {
  final stats = character.stats.clone()
  stats.equipments = {}
  for (final i in range(1, kEquipmentMax)) {
    final equipData = character.equipments[i]
    if (equipData != null) {
      final equipment = getEquipped(equipData, character)
      stats.equipments[i] = equipment.stats.clone()
    }
  }
  return stats
}

// 战斗，异步函数，如果获胜则返回 true
fun heroBattle (
  char2, {
  resolveResult = true,
  loot = true,
  takeAll = true,
  isMazeIncident = false,
  char1Resurrect = true,
  char2Resurrect = false,
  onWon,
  onLost,
}) -> Future async {
  // final char1 = getHero()
  // return showDuel(char1, char2).then((result) {
  //   if (result?.result) {
  //     if (resolveResult) resolveDuelResult(char1, char2, result)
  //     if (loot) lootCharacter(char1, char2, takeAll: takeAll)
  //     final incidentContent = getLocaleString('duelVistory', interpolations: [ char1.name, char2.name ] )
  //     Incident(
  //       content: incidentContent,
  //       subjectIds: [char1.id],
  //       isPrivate: true,
  //       isMazeIncident: isMazeIncident,
  //     )
  //     if (char2Resurrect) {
  //       if (char2.isMajorCharacter) {
  //         final injury = WorldMapStatusEffect.injury()
  //         char2.statusEffects[injury.kind] = injury
  //         char2.stats.life = 1
  //       }
  //     } else {
  //       final incidentContent = getLocaleString('characterKill', interpolations: [ char1.name, char2.name ] )
  //       Incident(
  //         content: incidentContent,
  //         subjectIds: [char1.id],
  //         isPrivate: true,
  //         isMazeIncident: isMazeIncident,
  //       )
  //       if (char2.isMajorCharacter) {
  //         char2.isDead = true
  //       } else {
  //         delete game.npcs[char2.id]
  //       }
  //     }
  //     if (onWon is function) {
  //       onWon()
  //     }
  //     return true
  //   } else {
  //     if (char1Resurrect) {
  //       final injury = WorldMapStatusEffect.injury()
  //       char1.statusEffects[injury.kind] = injury
  //       char1.stats.life = 1
  //     }
  //     if (onLost is function) {
  //       onLost()
  //     }
  //     return false
  //   }
  // })
}
