import '../game.ht'
import 'character/common.ht'

/// 历史事件记录
struct Incident {
  construct ({
    content: string,
    isPrivate: bool = false, // 是否通知当前据点所有人
    isGlobal: bool = false, // 是否记录到全世界的人都记录
    isMazeIncident: bool = false, // 是否只记录在副本自己的历史中
    order = 0,
    ideal = 0,
    good = 0,
    score = 0, // 额外的好感分，加到本事件的行动者身上
    subjectIds = [],
    organizationId,
    objectIds = [],
    witnessIds = [],
    // heardIds = [],
    withItem: string,
    toItem: string,
    locationId: string,
    terrainIndex: integer,
  }) {
    assert(content != null && content.isNotEmpty)

    this.content = content
    this.timestamp = game.timestamp
    this.order = order
    this.ideal = ideal
    this.good = good
    this.score = score
    this.subjectIds = subjectIds
    this.objectIds = objectIds
    this.witnessIds = witnessIds
    // this.heardIds = heardIds
    this.withItem = withItem
    this.toItem = toItem
    this.locationId = locationId
    this.terrainIndex = terrainIndex
    this.isPrivate = isPrivate
    this.isGlobal = isGlobal

    if (isMazeIncident) {
      currentMaze.history.add(this)
    } else {
      this.index = currentWorld?.history.length
      currentWorld?.history.add(this)
    }

    for (const id in subjectIds) {
      const char = game.characters[id]
      assert(char != null)
      characterExperiencedIncident(char, this)
    }

    for (const id in objectIds) {
      const char = game.characters[id]
      assert(char != null)
      characterExperiencedIncident(char, this)
    }

    for (const id in witnessIds) {
      const char = game.characters[id]
      assert(char != null)
      characterWitnessIncident(char, this, witnessed: true)
    }

    // for (const id in heardIds) {
    //   const char = game.characters[id]
    //   characterWitnessIncident(char, this)
    // }
    let organization
    if (organizationId) {
      organization = game.organizations[organizationId]
      organizationExperiencedIncident(organization, this)
    }

    if (isGlobal) {
      for (const char of game.characters) {
        if (char.id in subjectIds || char.id in objectIds || char.id in witnessIds) continue
        characterWitnessIncident(char, this)
      }
    } else if (!isPrivate) {
      if (organization) {
        if (!isPrivate) {
          for (const charId in organization.characterIds.keys) {
            if (charId in subjectIds) continue
            if (charId in objectIds) continue
            if (charId in witnessIds) continue
            const character = game.characters[charId]
            characterWitnessIncident(character, this, witnessed: true)
          }
        }
      }
      
      if (locationId) {
        const location = game.locations[locationId]
        for (const id in location.stayingCharacterIds) {
          if (id in subjectIds || id in objectIds || id in witnessIds) continue
          const char = game.characters[id]
          characterWitnessIncident(char, this)
        }
      }
    }

    engine.info(content)
  }
}

function getIncidentByIndex(index: integer) {
  return currentWorld.history[index]
}
