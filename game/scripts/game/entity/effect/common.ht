// 效果 id 对应一个效果的文字描述，以及触发效果的回调函数。
// 效果一般在吃下某个食物，运使某个功法，或者装备某个物品时触发
// 效果本身有不同数据，例如同样是回复生命的效果，但具体回复的数值可能不同
// 回调函数的工作就是根据效果的具体数值来修改对应的游戏对象
// 某些回调函数直接修改游戏对象，因此没有返回值，
// 也有些回调函数会返回包含执行结果的数值
// 效果中的数值以列表形式保存，这是为了在游戏界面显示时可以不用关心具体数值的 key。
// 某些效果会以“第 x 次 xx 后”的形式触发
// 对于此种效果，回调函数会在该效果对象的数据上直接赋值，计算 CD 时间。

import 'effects.ht'
import 'handlers.ht'
import '../../random.ht'

const kEffectValueTypeInt = 'integer';
const kEffectValueTypeFloat = 'float';
const kEffectValueTypePercentage = 'percentage';

// 人物永久效果
const kEffectCategoryCharacter = 'character'
// 物品永久效果
const kEffectCategoryEquippedEntity = 'equippedEntity'
// 食用时触发的效果
const kEffectCategoryConsume = 'consume'
// 受击时触发的效果
const kEffectCategoryDefend = 'defend'
// 造成伤害时触发的改变伤害数值的效果
const kEffectCategoryOffense = 'offense'
// 造成伤害后触发的效果
const kEffectCategoryAfterHit = 'afterHit'

// add / reduce damage: 按照数值增加和减少伤害
// increase / decrease damage: 按照百分比增加和减少伤害，多个百分比时，先加一起，再乘基础值
// more / less damage: 按照百分比增加和减少伤害，多个百分比时，分别乘基础值，最后加一起

// 参考：https://pathofexile.fandom.com/wiki/Stat#more_vs_increased

struct EffectValue {
  construct ({
    value,
    type,
  }) {
    assert(value != null && value > 0)
    this.value = value
    this.type = type
  }
}

struct Effect {
  construct ({
    category,
    handlerType,
    id,
    level,
    description,
    values,
  }) {
    assert(category != null)
    assert(handlerType != null)
    assert(id != null)
    this.category = category
    this.handlerType = handlerType
    this.id = id

    this.description = description ?? 'effect.${this.handlerType}.${this.id}'
    this.values = values ?? []
    this.cooldown = 0
  }
}

function addEffect({categroy, id, effect}) {
  assert(category != null)
  assert(id != null)
  assert(effect != null)
  if (gEffects.hasOwnProperty(category)) {
    const c = gEffects[category]
    assert(!c.hasOwnProperty(id))
    c[id] = effect
  } else {
    const c = {}
    c[id] = effect
    gEffects[category] = c
  }
}

function getEffectHandlerById(id: string) {
  return gEffectHandlers[id]
}

function addEffectHandler(handler) {
  engine.info('载入效果处理模块 [${handler.name}]')
  gEffectHandlers[handler.id] = handler
}

/// 返回一个效果的复制
function getEffect({category, id}) {
  if (category != null) {
    assert(gEffects.hasOwnProperty(category))
  } else {
    category = random.nextIterable(gEffects.keys)
  }
  const c = gEffects[category]
  if (c.isEmpty) return null
  if (id != null) {
    assert(c.hasOwnProperty(id))
  } else {
    id = random.nextIterable(c.keys)
  }
  return gEffects[category][id].clone()
}

/// 一次返回某个 category 下的指定数量的效果
function getEffects({category, count}) {
  assert(category != null)
  const c = gEffects[category]
  const ec = Math.min(c.length, count)
  const effects = {}
  for (const i in range(ec)) {
    let effect
    do {
      effect = getEffect(category: category)
    } while (effects.hasOwnProperty(effect.id))
    effects[effect.id] = effect
  }
  return effects
}

const kInitialEfficiency = 0.4

/// 初始化一个复制出来的效果数据
function initEffectData(effect, difficulty, efficiency ) {
  // 效果等级，提升等级需要练习
  effect.level = 0
  effect.exp = 0 // 当前经验值
  effect.expForNextLevel = expForLevel(difficulty, effect.level + 1) // 下一等级需要的经验值
  // 效果初始最小数值默认是 0.4
  effect.efficiency = efficiency ?? random.nextDouble() * 0.6 + kInitialEfficiency
}
