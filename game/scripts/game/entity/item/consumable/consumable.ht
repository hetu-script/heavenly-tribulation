import '../../../random.ht'
import '../../common.ht'
import '../common.ht'
import '../../effect/effect.ht'

// 饮品的效果
// const medicineEffects = [
//   Effect(
//     id: kEffectRestoreLife,
//     description: kEffectRestoreLife,
//     category: kEffectCategoryConsume,
//     values: [
//       EffectValue(
//         value: 10,
//       ),
//     ],
//   ),
// ]

// const kWeaponKinds = {
//   'staff': {
//     icon: 'item/staff.png',
//   }
// }

struct Consumable {
  construct ({
    kind,
    name,
    rarity = kCommon,
    value = 5,
    icon,
    creatorId,
    createdTime,
    description = '',
    stackSize = 1,
    effects,
  }) {
    assert(kind != null)
    this.kind = kind // 枪、剑、斧等等
    
    this.name = name
    this.rarity = rarity
    if (!name) {
      const randomName = generateConsumableName(category: this.kind, rarity: this.rarity)
      this.name = randomName.name
      this.rarity ??= randomName.rarity
    }
    this.color = kRarity[this.rarity].color

    this.entityType = kEntityTypeItem // 人物、地点、物品、技能等等
    this.category = kEntityCategoryConsumable // 武器、防护、斗技、玄功等等
    this.value = value

    this.creatorId = creatorId
    this.createdTime = createdTime

    this.description = description
    this.stackSize = stackSize
    this.id = this.rarity != kCommon ? 'consumable.${crypto.randomUID4(2)}.${this.name}' : 'consumable.${this.name}'
    this.icon = icon ?? 'icon/item/consumable/${this.kind}.png'

    this.isConsumable = true
    
    this.attributes = {
      effects: {}
    }
    if (effects is {}) {
      Object.assign(this.attributes.effects, effects)
    }
  }

  construct beverage ({
    rarity = kCommon,
    value = 1,
    icon,
    creatorId,
    createdTime,
    description = '',
    stackSize = 1,
    effects,
  }) : this(
    kind: kEntityConsumableKindBeverage,
    rarity: rarity,
    value: value,
    icon: icon,
    creatorId: creatorId,
    createdTime: createdTime,
    description: description,
    stackSize: stackSize,
    effects: effects,
  ) {}

  construct medicine ({
    rarity = kCommon,
    value = 1,
    icon,
    creatorId,
    createdTime,
    description = '',
    stackSize = 1,
    effects,
  }) : this(
    kind: kEntityConsumableKindMedicine,
    rarity: rarity,
    value: value,
    icon: icon,
    creatorId: creatorId,
    createdTime: createdTime,
    description: description,
    stackSize: stackSize,
    effects: effects,
  ) {}
  
}
