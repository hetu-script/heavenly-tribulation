import '../../name/skill.ht'
import '../common.ht'
import '../../game.ht'
import 'common.ht'
import '../item/common.ht'
import '../../../_obseleted/effect/common.ht'

const kArcanaKinds = [
  'physicalArcana',
  'spiritualArcana',
  // 'maneuverArcana',
  // 'mythicalArcana',
]

/// 内功，主技能，包含各种增强基础属性和资源的效果

/// 内功一定包含至少一个主属性（强壮、体质、敏捷、灵性、念力、感知）数值的增加。
/// 内功最多包含全部6种不同属性的数值。每种属性各自所能增加的具体数值随机分配。
/// 内功所包含的数值总数上限最大是由内功本身的rarity所决定的。
/// common: 251 - 300
/// uncommon: 301 - 350
/// rare: 351 - 400
/// epic: 401 - 450
/// legendary: 451 - 500
/// mythic: 501 - 550
/// exotic: 551 - 600

/// 刚学内功时，和其他功法类似，主数值只有40%，需要靠修炼慢慢增加到功法所能提供的最大值。
struct Arcana {
  construct ({
    kind,
    name,
    rarity,
    icon,
    creatorId,
    createdTime,
    description,
    kind,
    level,
    levelMax,
    attributes,
  }) {
    assert(kind in kArcanaKinds)

    this.name = name
    this.rarity = rarity ?? kCommon
    if (!this.name) {
      const nameLength = kRarity[this.rarity].level > 4 ? 3 : kRarity[this.rarity].level > 2 ? 2 : 1
      const randomName = generateSkillName(category: this.kind, length: nameLength)
      this.name = randomName.name
    }
    this.color = kRarity[this.rarity].color
    // 稀有度决定难度，也就是升级需要的经验值的数量，同时也决定最大效果条数
    this.difficulty = kRarity[this.rarity].level

    this.entityType = kEntityTypeSkill // 人物、地点、物品、技能等等
    this.category = kEntityCategoryArcana // 武器、防护、斗技、玄功等等
    this.kind = kind

    this.creatorId = creatorId
    this.createdTime = createdTime
    this.description = description ?? ''
    this.id = '${this.entityType}.${crypto.randomUID4(2)}.${this.name}'

    this.isEquippable = true
    this.equipType = kEquipTypeArcana // 装备类型：进攻、如果没有就是不可装备

    this.icon = 'icon/skill/arcane_0.png'
    
    this.cost = {
      // 练习时每个tick的消耗
      practice: {
        spirit: 1,
      },
    }

    this.attributes = {
      effects: {},
    }
    if (attributes) {
      Object.assign(this.attributes, attributes)
    }

    this.attributes.effects = getEffects(category: this.kind, count: this.difficulty + 1)

    for (const effect of this.attributes.effects) {
      initEffectData(effect, this.difficulty, kSkillInitialEfficiency)
    }

    // 在此物品上装备的支持性对象
    this.equippedSupports = []

    calculateSkillStats(this)
  }
}
