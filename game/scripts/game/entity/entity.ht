import '../random.ht'
// import 'effect/effect.ht'
// import 'character/companion.ht'
// import 'item/money.ht'
// import 'skill/common.ht'
import '../dialog.ht'

// 进行某些互动的时候
const kFameCheckThreshold = 75
// 进行某些互动的时候
const kCharismaCheckThreshold = 75

const kDifficulties = [
  'normal',
  'hard',
  'expert',
  'master',
  'torment',
  'nightmare',
  'purgatory',
]

const kCommon = 'common' // 凡品：生成数量没有限制
const kUncommon = 'uncommon' // 良品：每9世界大小
const kRare = 'rare' // 上品：每18世界大小
const kEpic = 'epic' // 极品：每36世界大小
const kLegendary = 'legendary' // 神品：每72世界大小
const kUnique = 'unique' // 秘宝：每144世界大小
const kMythic = 'mythic' // 灵宝：每288世界大小
const kArcane = 'arcane' // 古宝：每576世界大小

const kRarity = {
  /// 凡品
  common: {
    rarity: 0.51,
    name: 'common',
    color: '#CCCCCC',
    level: 0,
  },
  /// 良品
  uncommon:{
    rarity: 0.255,
    name: 'uncommon',
    color: '#FFFFFF',
    level: 1,
  },
  /// 上品
  rare:{
    rarity: 0.12,
    name: 'rare',
    color: '#00A6A9',
    level: 2,
  },
  /// 极品
  epic: {
    rarity: 0.06,
    name: 'epic',
    color: '#804DC8',
    level: 3,
  },
  /// 神品
  legendary: {
    rarity: 0.03,
    name: 'legendary',
    color: '#C5C660',
    level: 4,
  },
  /// 秘宝
  unique: {
    rarity: 0.015,
    name: 'unique',
    color: '#62CC39',
    level: 4,
  },
  /// 古宝
  mythic: {
    rarity: 0.007,
    name: 'mythic',
    color: '#F28234',
    level: 5,
  },
  /// 灵宝
  arcane: {
    rarity: 0.003,
    name: 'arcane',
    color: '#C65043',
    level: 6,
  },
}

function getRarity({ name }) {
  if (name) {
    assert(kRarity.containsKey(name))
    return kRarity[name]
  } else {
    const r = random.nextDouble()
    if (r > kRarity.common.rarity) {
      return kRarity.common.name
    } else if (r > kRarity.uncommon.rarity) {
      return kRarity.uncommon
    } else if (r > kRarity.rare.rarity) {
      return kRarity.rare
    } else if (r > kRarity.epic.rarity) {
      return kRarity.epic
    } else if (r > kRarity.legendary.rarity) {
      return kRarity.legendary
    } else if (r > kRarity.unique.rarity) {
      return kRarity.unique
    } else if (r > kRarity.mythic.rarity) {
      return kRarity.mythic
    } else {
      return kRarity.arcane
    }
  }
}

// 从一个稀有度和值的对应表中，按照稀有度的概率取出值
// function getMappedRarityValue(valueMap) {
//   const r = getRarity()
//   const v = valueMap[r.rarity]
//   return (v is Iterable) ? v.random : v
// }

// entityType决定了该对象的数据结构和保存位置
const kEntityTypeCharacter = 'character' //game.characters
const kEntityTypeBaby = 'baby' // game.babies
const kEntityTypeItem = 'item' //character.inventory
const kEntityTypeOrganization = 'organization' //game.organizations
const kEntityTypeLocation = 'location' // game.locations
const kEntityTypeSite = 'site' // location.sites

const kEntityCategoryMaterial = 'material';

// 材料的类型

// 实际上进攻类装备也可能具有防御效果，因此这里的类型仅用于显示而已
const kEquipTypeShip = 'ship'
const kEquipTypeBoots = 'boots'
const kEquipTypeAircraft = 'aircraft'

function getCultivationRankName(character) {
  return engine.locale('cultivationRank.${character.cultivationRank}')
}

function setEntityWorldPosition(entity, left, top, [ worldId ]) {
  entity.worldPosition = { left, top }
  if (worldId != null) {
    entity.worldId = worldId
  }
}

const _kCharacterRandomAgeMax = 40

function createRandomBirthTimestamp({min = 1, max = _kCharacterRandomAgeMax}) {
  assert(min > 0)
  const age = random.nextInt(max - min) + min
  const randomDateInAYear = random.nextInt(kTicksPerYear)
  return timeline?.timestamp - (age * kTicksPerYear + randomDateInAYear)
}

function tryChangeStats(entity, statName, change, { overflow = false }) {
  let data = entity.stats
  assert(data?[statName] != null)
  let value = data[statName]
  value += change
  let residue = 0
  if (!overflow) {
    const max = data['${statName}Max']
    if (value < 0) {
      residue = value
      value = 0
    }
    if (value >= max) {
      residue = max - value
      value = max
    }
  }
  data[statName] = value
  return residue
}

// level up exp function.
function expForLevel(level, [difficulty = 1]) {
  return (difficulty * (level) * (level)) * 5 + level * 100 + 25
}
