import '../../game.ht'
import '../location/site.ht'
import '../../name/organization.ht'
import '../../l10n.ht'
import '../common.ht'
import '../../tile/tilemap.ht'
// import '../../name/nation.ht'

const kOrganizationRankMax = 4
const kOrganizationDevelopmentMax = 5
const kOrganizationRecruitOtherLocationProbability = 0.2
const kOrganizationRecruitSuccessProbability = 0.4

final kOrganizationCategories = [
  'cultivation',
  'gang',
  'religion',
  'business',
  'nation',
]

final kCultivationFightSkillGenre = [
  'cultivation.blade',
  'cultivation.element',
  'cultivation.transform',
  'cultivation.spirit',
]

final kCultivationSupportSkillGenre = [
  'cultivation.plant',
  'cultivation.animal',
  'cultivation.golem',
  'cultivation.illusion',
  'cultivation.craftsmanship',
  'cultivation.alchemy',
  'cultivation.divination',
  'cultivation.array',
  'cultivation.scroll',
]

const kOrganizationCategoryCultivation = 'cultivation'
const kOrganizationCategoryGang = 'gang'
const kOrganizationCategoryReligion = 'religion'
const kOrganizationCategoryBusiness = 'business'
const kOrganizationCategoryNation = 'nation'

final kOrganizationThinkings = {
  cultivation: [
    'skillAddiction',
    'strengthAdmiration',
    'masterRespect',
    'mentor',
    'sectarianism',
  ],
  gang: [
    'swordLover',
    'brotherhood',
    'chivalrousness',
    'promise',
    'communism',
  ],
  religion: [
    'coreligionist',
    'missionary',
    'discipline',
    'theology',
    'religious',
  ],
  business: [
    'everyOneForHimself',
    'asLongAsProfit',
    'privateProperty',
    'spiritOfContract',
    'monopolism',
  ],
  nation: [
    'philosopherKing',
    'etiquette',
    'gentlemanship',
    'moderateness',
    'justice',
  ],
}

const _kOrganizationThinkingsOnRecruit = 3

const _kLeaderRank = 80

struct Organization {
  construct ({
    name,
    category,
    // nationId,
    headquartersId,
    headId,
    development = 0,
    // rankTitles,
    // fightSkillGenre,
    // supportSkillGenre,
  }) {
    assert(game.locations.containsKey(headquartersId))
    assert(game.characters.containsKey(headId))
    if (category == null) {
      category = Random.nextIterable(kOrganizationCategories)
    } else {
      assert(kOrganizationCategories.contains(category))
    }

    // 该组织的每月刷新事件的时间
    this.monthlyUpdateTime = random.nextInt(kTicksPerMonth)
    // 该组织的事件触发选项
    this.flags = {}

    // 该组织每年刷新时间的时间，一般都为 X 月 1 日
    // 例如招募大比时间等等，都发生在这个日期
    final month = random.nextInt(kMonthsPerYear)
    this.yearlyUpdateTime = month * kTicksPerMonth + random.nextInt(kTicksPerMonth)
    this.yearlyRecruitMonth = month + 1

    this.headquartersId = headquartersId
    this.headId = headId
    this.entityType = kEntityTypeOrganization
    this.category = category

    this.index = game.organizations.length
    if (name) {
      this.name = name
    } else {
      var conflict = false
      do {
        // if (category != kOrganizationCategoryNation) {
        //   this.name = generateOrganizationName(category: this.category).name
        // } else {
        //   this.name = generateNationName().name
        // }
        this.name = generateOrganizationName(category: this.category).name
        conflict = game.organizations.values.where((element) =>
          element.name == this.name).isNotEmpty
      } while (conflict)
    }
    this.id = '${this.entityType}.${this.index}.${this.name}'
    game.organizations[this.id] = this
    
    // 本门派统治的据点 id 列表
    this.locationIds = []
    // 本门派成员，key 是 角色的 id，value 是角色的 rank
    this.characterIds = {}

    // 组织规模，决定了组织所能允许的成员数量
    // 规模也决定了新成员加入组织之后的等级
    // 例如当前规模0，那么总人数限制为 5
    // 新人加入时的等级为 1
    this.development = development
    
    // 该组织的历史，保存的是历史事件的 index
    this.history = []
    
    // if (nationId) {
    //   assert(game.organizations.containsKey(nationId))
    //   final nation = game.organizations[nationId]
    //   nation.organizationIds.add(this.id)
    //   this.nationId = nationId
    // }

    final headquarters = game.locations[headquartersId]
    final head = game.characters[headId]
    // 触发创派事件，创派事件和成为掌门是两个事件
    final incidentContent = getLocaleString('organizationCreate', interpolations: [
      head.name,
      headquarters.name,
      this.name,
    ])
    Incident(
      subjectIds: [head.id],
      organizationId: this.id,
      content: incidentContent,
      order: 15,
      isGlobal: true,
    )
    addCharacterToOrganization(head, this)
    addTitleForCharacter(head, this, kOrganizationRankMax, 'title.head')

    // addLocationToOrganization(location, this)
    stationOrganization(
      this,
      headquarters,
      characterIds: [headId],
    )

    // this.fightSkillGenre = fightSkillGenre ?? random.nextIterable(kCultivationFightSkillGenre)
    // this.supportSkillGenre = supportSkillGenre ?? random.nextIterable(kCultivationSupportSkillGenre)
    
    // 组织所拥有的功法
    // 用法类似人物的装备栏
    // 放入的是可以被学习的技能
    // -1 的技能，即便不是本门弟子也可以花费钱财或者灵石学习
    // 0 等以上，需要本门弟子，并且 rank 小于等于对应等级，以及花费贡献点数，才可以学习
    // 保存的数据除了技能本身，还包括需要支付的费用和要求
    // {
    //   requirement: {
    //     contribution: 0,
    //     money: 0,
    //     jade: 0,
    //     organizationRank: 0,
    //   },
    //   skill: {
    //     
    //   }
    // }

    // this.skills = {}

    // 国家区块颜色
    this.color = random.nextBrightColorHex()
    // 本国统治的区块
    this.territoryIndexes = []
    // 国界线相邻的外国区块
    this.borderIndexes = []

    // 敌对名单，遇到后将会直接开始战斗
    this.enemyLists = {
      characterIds: [],
      organizationIds: [],
      // nationIds: [],
    }
  }

  // /// 国家是一种特殊的组织，单独有一个生成函数，并且单独保存
  // /// 即便不显示调用 addCharacterToOrganization 来加入国家，角色也会有一个所属的国家
  // /// 显示调用的含义其实是在此国家担任官职，此时和加入别的组织一样，要求先退出原来的组织
  // construct nation ({
  //   name,
  //   capitalId,
  //   emperorId,
  //   development = 0,
  //   rankTitles,
  // }) : this(
  //   category: kOrganizationCategoryNation,
  //   name: name,
  //   headquartersId: capitalId,
  //   headId: emperorId,
  //   development = 0,
  //   rankTitles,
  // ) {
  //   assert(capitalId != null)
  //   assert(emperorId != null)

  //   this.capitalId = capitalId
  //   final location = game.locations[capitalId]
  //   // 设为首都后，免费获得发展度+2，稳定度+50
  //   location.development += 2
  //   location.stability += 50

  //   this.color = random.nextBrightColorHex()
    
  //   // 本国统治的区块
  //   this.territoryIndexes = []
  //   // 国界线相邻的外国区块
  //   this.borderIndexes = []
  //   // 本国的门派
  //   this.organizationIds = []
  // }
  
  // construct business({
  //   name,
  //   headquartersId,
  //   headId,
  //   development = 0,
  //   rankTitles,
  // }): this(
  //   category: kOrganizationCategoryBusiness,
  //   name: name,
  //   headquartersId: headquartersId,
  //   headId: headId,
  //   development = 0,
  //   rankTitles,
  // ) {

  // }
}


// fun getLeaderTitle(organization) {
//   return organization.name + getLocaleString('${organization.category}LeaderTitle')
// }

// 类似 equip，将会在 location 上的 organizations 中保存一个新的数据对象
// {
//   id,
//   category,
//   characterIds, // 指在这个地点的该组织的人员，并不一定等于该组织的全部人员
// }
fun stationOrganization(
  organization,
  location, {
  characterIds,
}) {
  assert(!location.organizations.containsKey(organization.id))
  characterIds ??= organization.characterIds.keys.toList()
  
  organization.headquartersId = location.id

  final site = Site(
    category: organization.category,
    locationId: location.id,
    organizationId: organization.id,
    name: organization.name,
  )
  organization.headquartersSiteId = site.id

  location.organizations[organization.id] = {
    id: organization.id,
    category: organization.category,
    characterIds: [],
  }

  for (final id in characterIds) {
    final character = game.characters[id]
    setCharacterHome(character, location, organizationName: organization.name)
  }

  organization.locationIds.add(location.id)
}

// 组织中每个等级的人数上限
// 数字越大，等级越低，0是掌门
fun maxMemberOfRank(n: int) {
  assert(n >= 0 && n <= kOrganizationRankMax)
  return ((kOrganizationRankMax - n) + 1) * ((kOrganizationRankMax - n) + 1)
}

// 组织可以拥有的人数上限取决于组织发展度
// 发展度 0，掌门 1 人，rank 1：4 人
fun maxMemberOfDevelopment(n: int) {
  var number = 0
  for (final i in range(n + 2)) {
    number += (i + 1) * (i + 1)
  }
  return number
}

fun removeCharacterFromOrganization(character) {
  if (character.organizationId == null) return

  final organization = game.organizations[character.organizationId]
  organization.characterIds.remove(character.id)
  delete character.organizationId
}

fun getOrganizationMemberIdsOfRank(organization, rank) {
  assert(rank >= 0 && rank <= kOrganizationRankMax)
  final ids = []
  for (final id in organization.characterIds.keys) {
    final idRank = organization.characterIds[id]
    if (idRank == rank) {
      ids.add(id)
    }
  }
  return ids
}


fun organizationMemberReachMax(organization) {
  return organization.characterIds.length >= maxMemberOfDevelopment(organization.development)
}

// 新加入的成员的等级，是当前的组织发展度 + 1
fun addCharacterToOrganization(character, organization, { incidentOccured = true }) {
  assert(!organization.characterIds.contains(character.id))
  if (organizationMemberReachMax(organization)) {
    engine.warning('组织 ${organization.name} 的成员数量达到上限，在提升发展度之前无法再添加新成员。')
    return false
  }

  final memberIds = getOrganizationMemberIdsOfRank(organization, kOrganizationRankMax)
  if (memberIds.length >= maxMemberOfDevelopment(kOrganizationRankMax)) {
    engine.warning('组织 ${organization.name} 的低阶成员数量达到上限，在提升成员级别之前无法再添加新成员。')
    return false
  }
  if (character.organizationId != null) {
    assert(character.organizationId != organization.id)
    removeCharacterFromOrganization(character)
  }
  organization.characterIds[character.id] = character.organizationRank = 0
  character.organizationId = organization.id

  if (incidentOccured) {
    final incidentContent = getLocaleString('organizationEnlist', interpolations: [
      character.name,
      organization.name,
    ])
    Incident(
      subjectIds: [character.id],
      organizationId: organization.id,
      content: incidentContent,
      order: 10,
      isPrivate: false,
    )
  }

  final location = game.locations[organization.headquartersId]
  setCharacterHome(character, location, organizationName: organization.name)
  final r = random.nextInt(_kOrganizationThinkingsOnRecruit)
  for (final i in range(r)) {
    var thinking
    do {
      thinking = random.nextIterable(kOrganizationThinkings[organization.category])
    } while (character.thinkings.contains(thinking))
    character.thinkings.add(thinking)
  }
  
  // setCharacterLocationId(character, organization.headquartersId)
  // if (organization.category == kOrganizationCategoryNation) {
  //   character.nationId = organization.id
  // }
  return true
}

fun addOrganizations(orgs: List) {
  engine.info('载入组织数据')
  for (final org in orgs) {
    game.organizations[org.id] = org
  }
}

fun addOrganization(char) {
  game.organizations[char.id] = char
}

fun getOrganizationById(id: str) {
  return game.organizations[id]
}

fun getOrganizations() {
  return game.organizations
}

fun increaseOrganizationDevelopment(organization) {
  if (organization.development <= kOrganizationDevelopmentMax) {
    ++organization.development
  } else {
    engine.warning('组织 ${organization.name} 的发展度（${organization.development}）已达到或超过最大值。')
  }
  
  final incidentContent = getLocaleString('organizationDeveloped', interpolations: [
    organization.name,
    organization.development,
  ])
  Incident(
    organizationId: organization.id,
    content: incidentContent,
    isGlobal: true,
  )
}

fun organizationExperiencedIncident(organization, incident) {
  organization.history.add(incident.index)
}

// fun getNations(id: str) {
//   return game.nations
// }

// fun getNationById(id: str) {
//   return game.nations[id]
// }

// fun removeCharacterFromNation(character) {
//   character.nationId = null
// }

// fun addCharacterToNation(character, nation) {
//   assert(nation.category == kOrganizationCategoryNation)
//   character.nationId = nation.id
// }

fun removeTerrainFromOrganization(terrain) {
  if (!terrain.locationId) return

  final organization = game.organizations[terrain.organizationId]
  organization.territoryIndexes.remove(terrain.index)
  organization.borderIndexes.add(terrain.index)
  final location = game.locations[terrain.locationId]
  delete location.organizationId
  organization.locationIds.remove(location.id)
}

fun addTerrainToOrganization(terrain, organization) {
  if (terrain.organizationId != null) {
    assert(terrain.organizationId != organization.id)
    removeTerrainFromOrganization(terrain)
  }
  assert(organization.territoryIndexes.isEmpty || !organization.territoryIndexes.contains(terrain.index))
  organization.territoryIndexes.add(terrain.index)
  assert(organization.borderIndexes.isEmpty || organization.borderIndexes.contains(terrain.index))
  // print('organization: ${organization.id} expanded to ${terrain.left},${terrain.top}')
  organization.borderIndexes.remove(terrain.index)
  terrain.organizationId = organization.id
  if (terrain.locationId) {
    final location = game.locations[terrain.locationId]
    if (location.category == kLocationCategoryCity) {
      if (location.organizationId) {
        final oldOrg = game.organizations[location.organizationId]
        oldOrg.locationIds.remove(location.id)
        // final oldGov = location.sites.values.singleWhere((site) => site.category == kSiteGovernment)
        // oldGov.organizationId = nation.id
      } else {
        // final gov = Site(category: kSiteGovernment, locationId: location.id)
        // if (nation.capitalId == location.id) {
        //   location.isCapital = true
        //   gov.isCapital = true
        // }
        // gov.organizationId = nation.id
        // location.governmentSiteId = gov.id
      }
    }
    location.organizationId = organization.id
    if (!organization.locationIds.contains(location.id)) {
      organization.locationIds.add(location.id)
    }
  }
  final neighbors = getMapTileNeighbors(terrain.left, terrain.top, currentWorld)
  for (final neighbor in neighbors) {
    if (neighbor.organizationId != organization.id) {
      organization.borderIndexes.add(neighbor.index)
    }
  }
}

// /// 将某个功法记录在这个组织的 skillRecords 中
// /// 根据技能来生成一个道具，也就是技能书
// fun organizationRecordSkill(organization, skill) {
//   assert(organization != null)
//   assert(skill != null)
//   organization.skills[skill.id] = book

//   final incidentContent = getLocaleString('organizationRecordSkill', interpolations: [
//     organization.name,
//     skill.name,
//   ])
//   Incident(
//     organizationId: organization.id,
//     content: incidentContent,
//   )
// }

// fun organizationRecordSkill({organization, rank, skill, requirement}) {
//   assert(organization != null)
//   rank ??= -1
//   assert(skill != null)
//   organization.skills[rank].add({
//     requirement,
//     skill: skill.clone(),
//   })
// }
