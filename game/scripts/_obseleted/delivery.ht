import 'quest.ht'
// import '../l10n.ht'
import '../maze/mountain.ht'
import '../tile/common.ht'
import '../world.ht'
import '../game.ht'
import '../entity/common.ht'
import '../lootbox.ht'
import '../datetime.ht'
import '../tile/hexagonal_tile.ht'
import '../entity/item/money.ht'

const _kDelivering = 'delivering'

// 运送货物或者护送人员。
// 货物只能指定一种，但数量可以大于 1
struct QuestDelivery {
  construct ({
    locationId,
    destinationLocationId,
    destinationSiteId,
    destinationCharacterId,
    item,
    character,
    expirationDays = 15, // 时间限制，以天为单位
    rewardMoney = 0,
  }) {
    assert(locationId != null)
    assert(destinationLocationId != null)
    this.locationId = locationId
    this.destinationLocationId = destinationLocationId
    this.destinationSiteId = destinationSiteId
    this.destinationCharacterId = destinationCharacterId
    // 接受任务时拿到的任务物品
    this.questEntityAccept = item ?? character
    // 在最后检查完成状态时用id和数量来比对
    // 只保存id和数量信息
    this.questEntitiesSubmit = []

    this.difficulty = kQuestDifficultyNormal
    this.category = kQuestCategoryDelivery
    this.reward = Lootbox()
    const money = Coin(stackSize: rewardMoney)
    this.reward.inventory[money.id] = money

    const location = game.locations[locationId]

    const destination = game.locations[destinationLocationId]
    const destinationSite = destination.sites[destinationSiteId]
    const destinationCharacter = game.characters[destinationCharacterId]

    this.distance = getTileDistance(location.tilePosition, destination.tilePosition)

    // 任务完成有效时间
    this.expirationDate = game.timestamp + expirationDays * kTicksPerDay
    const expirationDateString = formatDateTimeString(this.expirationDate)

    if (item != null) {
      this.questEntitiesSubmit.add({
        id: item.id,
        count: item.stackSize,
        entityType: item.entityType,
      })
      this.kind = kQuestDeliveryKindConvoy
      if (destinationSite) {
        this.description = engine.locale('${this.category}.item.targetSite.description',
          interpolations: [
            expirationDateString,
            item.stackSize,
            item.name,
            destination.name,
            destinationSite.name,
          ],
        )
      } else {
        assert(destinationCharacter != null)
        this.description = engine.locale('${this.category}.item.targetCharacter.description',
          interpolations: [
            expirationDateString,
            item.stackSize,
            item.name,
            destination.name,
            destinationSite.name,
          ],
        )
      }
    } else {
      assert(character != null)
      this.questEntitiesSubmit.add({
        id: character.id,
        entityType: character.entityType,
      })
      this.kind = kQuestDeliveryKindEscort
      if (destinationSite) {
        this.description = engine.locale('${this.category}.character.targetSite.description',
          interpolations: [
            expirationDateString,
            character.name,
            destination.name,
            destinationSite.name,
          ],
        )
      } else {
        assert(destinationCharacter != null)
        this.description = engine.locale('${this.category}.character.targetCharacter.description',
          interpolations: [
            expirationDateString,
            character.name,
            destination.name,
            destinationSite.name,
          ],
        )
      }
    }

    this.id = 'quest.${crypto.randomUID4(2)}.${this.category}.${this.kind}'

    this.stages = {
      delivering: {
        // 任务开始，目前行动：寻找副本
        id: _kDelivering,
        description: this.description,
        successedDescription: '${this.category}${_kDelivering}.successed.description',
        failedDescription: '${this.category}${_kDelivering}.failed.description',
      },
    }
    this.currentStageId = this.stages.keys.first
    
  }
}
