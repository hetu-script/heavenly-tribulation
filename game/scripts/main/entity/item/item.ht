import '../entity.ht'
import '../../game.ht'
import '../../random.ht'
import '../../incident.ht'
import '../../name/talisman.ht'

function getItemExtraAffixes(item) {
  assert(game.passives != null)

  final itemExtraAffixes = game.passives.values.where((data){
    if (!data.isItemExtraAffix) return false
    if (data.kind is List && !data.kind.contains(item.kind)) return false
    if (data.rank > item.rank) return false
    if (item.affixUniqueIds.contains(data.id)) return false
    return true
  })
  if (itemExtraAffixes.isEmpty) {
    throw('Found no support affix for item: category: ${item.category}, kind: ${item.kind}, rank: ${item.rank}')
  }
  return itemExtraAffixes
}

struct Equipment {
  constructor({
    kind,
    rarity,
    rank,
    level,
  }) {
    this.entityType = kEntityTypeItem
    this.createdTimestamp = game.timestamp
    this.category = kItemCategoryEquipment;

    // kind 决定了物品名字的生成方式
    // weapon具体分为：sabre, sword, spear, staff, bow, dart, music
    // talisman具体分为：buff, ongoing, consume
    // 其他情况下 kind == type
    assert(kind != null)
    this.kind = kind;

    this.id = crypto.randomNID(length: 6, withTime: true)
    this.name = generateTalismanName(kind: this.kind)
    this.flavortext = engine.locale('item_${this.kind}_flavortext')

    if (rarity != null) {
      assert(kRarity.containsKey(rarity))
      this.rarity = rarity
      this.rank = kRarity[rarity].rank
    } else if (rank != null) {
      assert(rank >= 0 && rank <= kRankMax)
      this.rank = rank
      this.rarity = kRankRarity[rank]
    }
    this.icon = 'item/${this.kind}.png'
    
    this.minLevel = minLevelPerRank(rank)
    this.maxLevel = maxLevelPerRank(rank)

    level ??= getRandomLevel(this.minLevel, this.maxLevel)
    assert(level >= this.minLevel && level <= this.maxLevel)
    this.level = level
    this.experienced = []

    this.affixes = []

    // equipType 决定了能装备的数量
    // weapon, armor, helmet, boots, vehicle，talisman
    if (kWeaponKinds.contains(this.kind)) {
      this.equipType = 'weapon'

      // 武器的固定词条是允许使用该类卡牌
      final passiveRawData = game.passives['equipment_${this.kind}']
      assert(passiveRawData != null)
      this.affixes.add(Object.create(passiveRawData))
    } else if (kArmorKinds.contains(this.kind)) {
      this.equipType = this.kind
    } else {
      this.equipType = 'talisman'
    }

    // 根据境界，生成额外词条
    final affixCount = getMinMaxExtraAffixCount(this.rank)
    let extraAffixCount = affixCount.minExtra
    if (affixCount.maxExtra > 0) {
      if (extraAffixCount < affixCount.maxExtra) {
        let r = random.nextDouble()
        if (r >= 0.15) {
          ++extraAffixCount
        }
      }
    }
    this.affixUniqueIds = Set()
    if (extraAffixCount > 0) {
      for (var i in range(extraAffixCount)) {
        final supportAffixes = getItemExtraAffixes(this)
        final affixRawData = random.nextIterable(supportAffixes)
        final affix = Object.create(affixRawData)
        affix.level = getRandomLevel(this.minLevel, this.level)
        if (affix.increment != null) {
          affix.value = (affix.increment * affix.level).round()
        }
        this.affixes.add(affix)
        this.affixUniqueIds.add(affix.id)
      }
    }
  }
}

function countItem(entity, category) {
  let amount = 0
  for (let item in entity.inventory.values) {
    if (item.category == category) {
      ++amount
    }
  }
  return amount
}

function createItemById(itemId) {
  // print('acquiring: ${itemId}')
  // TODO: 如果id不存在，则获得一个「未知物品」
  final prototype = game.items[itemId]
  assert(prototype != null)
  let item = Object.create(prototype)
  // TODO: 根据稀有度和地图大小决定物品允许存在的数量
  // if (item.isUnique) {
  //   if (item.isCreated) {
  //     engine.debug('唯一物品${item.id}已经被创造过一次，无法再次获得。')
  //     return
  //   } else {
  //     item.isCreated = true
  //   }
  // }
  item.id = crypto.randomNID(length: 6, withTime: true)
  item.entityType = kEntityTypeItem
  item.name = engine.locale(item.name)
  item.flavortext = engine.locale('item_${itemId}_flavortext')
  // item.name = generateTalismanName(kind: item.kind)
  item.rarity ??= 'basic'
  item.color ??= kRarity[item.rarity].color
  item.level ??= 1
  item.experienced = []

  return item
}

function entityEquippedItemKind(entity, itemKind) {
  assert(entity.inventory != null && itemKind != null) 
  for (let item in entity.inventory.values) {
    if (item.kind == itemKind) {
      return true
    }
  }
  return false
}

function entityHasItemKind(entity, itemKind) {
  assert(entity.inventory != null && itemKind != null)
  for (let item in entity.equipments) {
    if (item.kind == itemKind) {
      return true
    }
  }
  return false
}

/// 直接获得资源
function entityCollectById(entity, materialId: string, { amount = 1, incurIncident = true }) {
  assert(amount is int && amount > 0)
  entity.materials[materialId] += amount

  let incidentContent = engine.locale('characterAcquireMultiple', interpolations: [
    entity.name,
    amount,
    engine.locale(materialId),
  ])
  if (entity.isMajorCharacter && incurIncident) {
    Incident(
      message: incidentContent,
      subjectId: entity.id,
      isPrivate: true,
    )
  }
  engine.debug(incidentContent)
}

/// 失去资源
function entityDropById(entity, materialId: string, { amount = 1, incurIncident = true }) {
  final existed = entity.materials[materialId]
  if (amount > existed) {
    amount = existed
  }
  entity.materials[materialId] -= amount
  assert(entity.materials[materialId] >= 0)

  let incidentContent = engine.locale('characterLoseMultipleItem', interpolations: [
    entity.name,
    amount,
    engine.locale(materialId),
  ])
  if (entity.isMajorCharacter && incurIncident) {
    Incident(
      message: incidentContent,
      subjectId: entity.id,
      isPrivate: true,
    )
  }
  engine.debug(incidentContent)
}

/// TODO: 丢下物品
function entityDiscard(entity, item) {

}

/// TODO: 摧毁物品
function entityDestroy(entity, item, { incurIncident = true }) {

  entityLose(entity, item)

  // let incidentContent
  // incidentContent = engine.locale('characterDestroy', interpolations: [
  //   character.name,
  //   item.name,
  // ])
  // if (incurIncident) {
  //   Incident(
  //     message: incidentContent,
  //     subjectId: character.id,
  //     // itemId: item.id, // 物品已经销毁了，无需再在物品上面记录历史
  //     isPrivate: true,
  //   )
  // } else {
  //   engine.debug(incidentContent)
  // }
}

/// 对象（人物、据点等）获得一个已经存在与世界上的物品
function entityAcquire(entity, item, { incurIncident = true }) {
  if (item.ownerId != null) {
    entityLose(entity, item)
  }
  
  switch(item.entityType) {
    case kEntityTypeItem: {
      item.ownerId = hero.id
      entity.inventory[item.id] = item
    }
    case kEntityTypeBattleCard: {
      entity.cardLibrary[item.id] = item
    }
  }

  let incidentContent
  incidentContent = engine.locale('entityAcquire', interpolations: [
    entity.name,
    item.name,
  ])
  if (entity.isMajorCharacter && incurIncident) {
    Incident(
      message: incidentContent,
      subjectId: entity.id,
      item: item,
      isPrivate: true,
    )
  }
  engine.debug(incidentContent)
}

/// 失去物品
function entityLose(entity, item, { incurIncident = true }) {
  delete entity.inventory[item.id]
  delete item.ownerId

  let incidentContent
  incidentContent = engine.locale('entityLose', interpolations: [
    entity.name,
    item.name,
  ])
  if (entity.isMajorCharacter && incurIncident) {
    Incident(
      message: incidentContent,
      subjectId: entity.id,
      item: item,
      isPrivate: true,
    )
  }
  engine.debug(incidentContent)
}

// 如果成功支付返回 0，否则返回 欠缺的数量
// 支付身上的材料作为货币
// function pay(target, materialId, amount, entity, { isForced = false, incurIncident = true }) {
//   if (value < 0) {
//     engine.error('函数 giveMoney 调用时的金额参数无效（小于 0）。')
//     return
//   }
//   if (value == 0) return

  // const goldValue = value ~/ kGoldExchange
  // let rest = value - goldValue
  // const restAfterGold = give(entity, target, 'item.goldCoin', amount: goldValue)
  // rest += restAfterGold

  // const silverValue = rest ~/ kSilverExchange
  // let rest = value - silverValue
  // const restAfterSilver = give(entity, target, 'item.silverCoint', amount: silverValue)
  // rest += restAfterSilver

  // const money = entity.materialId
  // if (money != null && money.stackSize >= value) {
  //   give(entity, target, money.id, amount: value, isForced: isForced, incurIncident: incurIncident)
  //   return true
  // }
  // return false
// }

// 某个对象将其拥有的物品交给另一个对象
// isForced 如果为 true，表示 target 强行夺取了 entity 的物品
// 将会立刻移除该物品，不要在物品栏循环中使用这个函数
// 此函数即便数量不够也会尽量支付
// 如果成功提供足够数量的指定物品，返回 0，否则返回 欠缺的数量
// function give(entity, target, itemId, { amount, removeItem = true, isForced = false, incurIncident = true}) {
//   if (amount <= 0) return 0
//   let rest = amount ?? 1
//   if (!entity.inventory.containsKey(itemId)) {
//     engine.warn('${entity.id} 没有 ${item.id} ，无法支付。')
//     return rest
//   }
//   const item = entity.inventory[itemId]
//   amount ??= item.stackSize ?? 1
//   if (item.equippedPosition) unequip(entity, item)
//   let incidentContent

//   let actualNumber = amount
//   if (item.stackSize > amount) {
//     item.stackSize -= amount
//   } else if (item.stackSize < amount) {
//     // char1身上的数量不够支付n
//     actualNumber = item.stackSize
//     engine.warn('${entity.id} 身上的 ${item.id} 不够 ${amount} 个，实际数量：${actualNumber}。')
//     delete entity.inventory[item.id]
//   } else {
//     // 数量刚好
//     delete entity.inventory[item.id]
//   }
//   rest = amount - actualNumber
//   if (target.inventory.containsKey(item.id)) {
//     target.inventory[item.id].stackSize += actualNumber
//   } else {
//     const itemCopy = item.clone()
//     itemCopy.stackSize = actualNumber
//     target.inventory[itemCopy.id] = itemCopy
//   }
//   if (amount > 1) {
//     incidentContent = isForced ?
//       engine.locale('characterGiveMultipleItemForced', interpolations: [
//         target.name,
//         entity.name,
//         amount,
//         item.name,
//       ]) :
//       engine.locale('characterGiveMultipleItem', interpolations: [
//         entity.name,
//         amount,
//         item.name,
//         target.name,
//       ])
//   } else {
//     incidentContent = isForced ?
//       engine.locale('characterGiveItemForced', interpolations: [
//         target.name,
//         entity.name,
//         amount,
//         item.name,
//       ]) :
//       engine.locale('characterGiveItem', interpolations: [
//         entity.name,
//         amount,
//         item.name,
//         target.name,
//       ])
//   }

//   if (incurIncident) {
//     let subjectIds
//     let objectIds
//     if (isForced) {
//       subjectIds = entity.isMajorCharacter ? [entity.id] : null
//       objectIds = target.isMajorCharacter ? [target.id] : null
//     } else {
//       subjectIds = target.isMajorCharacter ? [target.id] : null
//       objectIds = entity.isMajorCharacter ? [entity.id] : null
//     }
//     Incident(
//       message: incidentContent,
//       subjectIds: subjectIds,
//       objectIds: objectIds,
//       isPrivate: true,
//     )
//   }

//   return rest
// }


// 战斗胜利后，根据情况获得战利品
// 如果对方逃跑，则随机获得对方一部分物品
// 否则，如果对方活着，则根据我们对其投降的处理方案（杀死活着放走）
// function characterLoot(character, target, { takeAll = false, incurIncident = true }) {
//   if (takeAll) {
//     // 为了避免在循环中修改 iterable，先提取出 id 列表
//     const itemIds = target.inventory.keys.toList()
//     for (const itemId in itemIds) {
//       give(target, character, itemId, isForced: true, incurIncident: incurIncident)
//     }
//     if (target.money) {
//       giveMoney(target, character, target.money, isForced: true, incurIncident: incurIncident)
//     }
//   } else {
//     // 为了避免在循环中修改 iterable，先提取出 id 列表
//     const itemIds = target.inventory.keys.toList()
//     for (const itemId in itemIds) {
//       const stackSize = target.inventory[itemId].stackSize
//       if (random.nextDouble() < kEscapedLootProbability) {
//         let amount = stackSize > 1 ? random.nextInt(stackSize) + 1 : 1
//         give(target, character, itemId, amount: amount, isForced: true, incurIncident: incurIncident)
//       }
//     }
//     if (target.money && random.nextDouble() < kEscapedLootProbability) {
//       giveMoney(target, character, random.nextInt(target.money) + 1, isForced: true, incurIncident: incurIncident)
//     }
//   }
// }
