const kMaterialMoney = 'money'
const kMaterialJade =  'jade'
const kMaterialFood =  'food'
const kMaterialWater = 'water'
const kMaterialStone = 'stone'
const kMaterialOre =   'ore'
const kMaterialPlank = 'plank'
const kMaterialPaper = 'paper'
const kMaterialHerb =  'herb'
const kMaterialYinQi = 'yinqi'
const kMaterialShaQi = 'shaqi'
const kMaterialYuanQi ='yuanqi'

const kMaterialKinds = [
  'money',
  'jade',
  'food',
  'water',
  'stone',
  'ore',
  'plank',
  'paper',
  'herb',
  'yinqi',
  'shaqi',
  'yuanqi',
]

struct MaterialStorage {
  constructor {
    this.money = 0;
    this.jade = 0;
    this.food = 0;
    this.water = 0;
    this.stone = 0;
    this.ore = 0;
    this.plank = 0;
    this.paper = 0;
    this.herb = 0;
    this.yinqi = 0;
    this.shaqi = 0;
    this.yuanqi = 0;
  }
}

/// 材料包类物品在获得后，可以通过「使用」转化为材料数值
struct Material {
  constructor (kind, { count, rarity, price }) {
    assert(kind != null)

    this.prototypeId = kind
    this.entityType = kEntityTypeItem
    this.rarity = rarity ?? kCommon
    this.name = engine.locale('${kind}.package')
    this.color = kRarity[this.rarity].color
    this.icon = 'item/material/${kind}.png'

    this.category = kEntityCategoryMaterial
    this.kind = kind
    // 河图处理嵌套字符串插值有bug，暂时如此写
    this.description = engine.locale('${kind}.description')
    this.hint = engine.locale('materialPackageHint')
    this.stackSize = count ?? 1

    this.isUsable = true
    this.price = price ?? 100
    
    // 材料包
    // this.experienced = null

    // 材料属于内置物品，使用内置交互逻辑
    // this.useCustomInteraction = false

  }
}
