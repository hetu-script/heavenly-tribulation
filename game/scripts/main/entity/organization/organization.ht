import '../../game.ht'
import '../../name/organization.ht'
// import '../../l10n.ht'
import '../entity.ht'
import '../../tile/tilemap.ht'
// import '../../name/nation.ht'
import '../item/material.ht'

const kOrganizationRankMax = 4
const kOrganizationDevelopmentMax = 5
const kOrganizationRecruitOtherLocationProbability = 0.2
const kOrganizationRecruitSuccessProbability = 0.4

const kOrganizationCategories = [
  'cultivation',
  'gang',
  'religion',
  'business',
  'nation',
]

const kCultivationSupportGenre = [
  'array',
  'rune',
  'alchemy',
  'craft',
  'plant',
  'animal',
  'illusion',
  'psychic',
  'divination',
  'theurgy',
]

const _kOrganizationThinkingsOnRecruit = 3

const _kHeadRank = 80

struct Organization {
  construct ({
    name,
    category, // 扩张类型：'cultivation' | 'gang' | 'religion' | 'business' | 'nation'
    genre, // 修炼类型：'dao' | 'swordcraft' | 'bodyforge' | 'avatar' | 'vitality'
    headquartersId,
    headId,
    development = 0,
    incurIncident = true, // 是否触发历史事件
  }) {
    this.entityType = kEntityTypeOrganization
    assert(game.locations.containsKey(headquartersId))
    assert(game.characters.containsKey(headId))

    this.createdTimestamp = history.timestamp
    // 该组织的每月刷新事件的时间
    this.monthlyUpdateTime = random.nextInt(kTicksPerMonth)
    // 该组织的事件触发选项
    this.flags = {}

    // 该组织每年刷新时间的时间，一般都为 X 月 1 日
    // 例如招募大比时间等等，都发生在这个日期
    const randomMonth = random.nextInt(kMonthsPerYear)
    this.yearlyUpdateTime = randomMonth * kTicksPerMonth + random.nextInt(kTicksPerMonth)
    this.yearlyRecruitMonth = randomMonth + 1

    this.headquartersId = headquartersId
    this.headId = headId
    this.category = category ?? random.nextIterable(kOrganizationCategories)
    this.genre = genre ?? random.nextIterable(kCultivationGenres)
    assert(kOrganizationCategories.contains(this.category))
    assert(kCultivationGenres.contains(this.genre))

    this.index = game.organizations.length
    if (name) {
      this.name = name
    } else {
      let conflict = false
      do {
        // if (category != 'nation') {
          this.name = generateOrganizationName(category: this.category).name
        // } else {
        //   this.name = generateNationName().name
        // }
        conflict = game.organizations.values.where((element) =>
          element.name == this.name).isNotEmpty
      } while (conflict)
    }
    // this.id = '${this.entityType}.${this.index}.${this.id}'
    this.id = this.name
    game.organizations[this.id] = this
    
    // 本门派统治的据点 id 列表
    this.locationIds = []
    // 本门派成员，key 是 角色的 id，value 是角色的 rank
    this.characterIds = {}

    // 组织规模，决定了组织所能允许的成员数量
    // 规模也决定了新成员加入组织之后的等级
    // 例如当前规模0，那么总人数限制为 5
    // 新人加入时的等级为 1
    this.development = development

    // 门派的历史
    this.experienced = []

    const headquarters = game.locations[headquartersId]
    const head = game.characters[headId]
    const incidentContent = engine.locale('organizationCreate', interpolations: [
      head.name,
      headquarters.name,
      this.name,
    ])
    if (incurIncident) {
      // 触发创派事件，创派事件和成为掌门是两个事件
      Incident(
        subjectId: head.id,
        organizationId: this.id,
        message: incidentContent,
        order: 15,
        isGlobal: true,
      )
    } else {
      engine.info(incidentContent)
    }
    addCharacterToOrganization(head, this, incurIncident: incurIncident)
    addOrganizationTitleForCharacter(head, this, kOrganizationRankMax, 'head', incurIncident: incurIncident)

    // 国家区块颜色
    this.color = random.nextBrightColorHex()
    // 本国统治的区块
    this.territoryIndexes = []
    // 与本国国界线相邻的外国区块
    this.borderIndexes = []

    const terrain = world.terrains[headquarters.terrainIndex]
    addTerrainToOrganization(terrain, this)
    headquarters.organizationId = this.id
    stationOrganization(this, headquarters, characterIds: [headId])

    this.materials = MaterialStorage()

    // 组织所拥有的功法
    // 用法类似人物的装备栏
    // 放入的是可以被学习的技能
    // -1 的技能，即便不是本门弟子也可以花费钱财或者灵石学习
    // 0 等以上，需要本门弟子，并且 rank 小于等于对应等级，以及花费贡献点数，才可以学习
    // 保存的数据除了技能本身，还包括需要支付的费用和要求
    // {
    //   requirement: {
    //     contribution: 0,
    //     money: 0,
    //     jade: 0,
    //     organizationRank: 0,
    //   },
    //   skill: {
    //     
    //   }
    // }

    // this.skills = {}

    // 敌对名单，遇到后将会直接开始战斗
    this.enemyLists = {
      characterIds: [],
      organizationIds: [],
      // nationIds: [],
    }
  }

  // /// 国家是一种特殊的组织，单独有一个生成函数，并且单独保存
  // /// 即便不显示调用 addCharacterToOrganization 来加入国家，角色也会有一个所属的国家
  // /// 显示调用的含义其实是在此国家担任官职，此时和加入别的组织一样，要求先退出原来的组织
  // construct nation ({
  //   name,
  //   capitalId,
  //   emperorId,
  //   development = 0,
  //   rankTitles,
  // }) : this(
  //   category: kOrganizationCategoryNation,
  //   name: name,
  //   headquartersId: capitalId,
  //   headId: emperorId,
  //   development = 0,
  //   rankTitles,
  // ) {
  //   assert(capitalId != null)
  //   assert(emperorId != null)

  //   this.capitalId = capitalId
  //   const location = game.locations[capitalId]
  //   // 设为首都后，免费获得发展度+2，稳定度+50
  //   location.development += 2
  //   location.stability += 50

  //   this.color = random.nextBrightColorHex()
    
  //   // 本国统治的区块
  //   this.territoryIndexes = []
  //   // 国界线相邻的外国区块
  //   this.borderIndexes = []
  //   // 本国的门派
  //   this.organizationIds = []
  // }
  
  // construct business({
  //   name,
  //   headquartersId,
  //   headId,
  //   development = 0,
  //   rankTitles,
  // }): this(
  //   category: kOrganizationCategoryBusiness,
  //   name: name,
  //   headquartersId: headquartersId,
  //   headId: headId,
  //   development = 0,
  //   rankTitles,
  // ) {

  // }
}


// function getHeadTitle(organization) {
//   return organization.name + engine.locale('${organization.category}HeadTitle')
// }

// 类似 equip，将会在 location 上的 organizations 中保存一个新的数据对象
// {
//   id,
//   category,
//   characterIds, // 指在这个地点的该组织的人员，并不一定等于该组织的全部人员
// }

// TODO: 添加incident
function stationOrganization(organization, location, { characterIds, incurIncident: bool }) {
  assert(location.organizationId == organization.id)
  characterIds ??= organization.characterIds.keys.toList()
  
  organization.headquartersId = location.id

  const headquarters = Location(
    category: 'building',
    kind: organization.genre,
    location: location,
    name: organization.name,
  )
  let toBeRemoved
  final cityhall = location.sites.values.where((element) => element.category == kSiteCityHall)
  if (cityhall.isNotEmpty) {
    toBeRemoved = cityhall.first.id
  }
  delete location.sites[toBeRemoved]

  organization.headquartersSiteId = site.id

  for (const id in characterIds) {
    const character = game.characters[id]
    setCharacterHome(character, location, organizationName: organization.name)
  }

  organization.locationIds.add(location.id)
}

// 组织中每个等级的人数上限
// 数字越大，等级越低，0是掌门
function maxMemberOfRank(n: integer) {
  assert(n >= 0 && n <= kOrganizationRankMax)
  return ((kOrganizationRankMax - n) + 1) * ((kOrganizationRankMax - n) + 1)
}

// 组织可以拥有的人数上限取决于组织发展度
// 发展度 0，掌门 1 人，rank 1：4 人
function maxMemberOfDevelopment(n: integer) {
  let number = 0
  for (const i in range(n + 2)) {
    number += (i + 1) * (i + 1)
  }
  return number
}

function removeCharacterFromOrganization(character) {
  if (character.organizationId == null) return

  const organization = game.organizations[character.organizationId]
  organization.characterIds.remove(character.id)
  delete character.organizationId
}

function getOrganizationMemberIdsOfRank(organization, rank) {
  assert(rank >= 0 && rank <= kOrganizationRankMax)
  const ids = []
  for (const id in organization.characterIds.keys) {
    const idRank = organization.characterIds[id]
    if (idRank == rank) {
      ids.add(id)
    }
  }
  return ids
}


function organizationMemberReachMax(organization) {
  return organization.characterIds.length >= maxMemberOfDevelopment(organization.development)
}

// 新加入的成员的等级，是当前的组织发展度 + 1
function addCharacterToOrganization(character, organization, { incurIncident = true }) {
  assert(!organization.characterIds.contains(character.id))
  if (organizationMemberReachMax(organization)) {
    engine.warn('组织 ${organization.id} 的成员数量达到上限，在提升发展度之前无法再添加新成员。')
    return false
  }

  const memberIds = getOrganizationMemberIdsOfRank(organization, kOrganizationRankMax)
  if (memberIds.length >= maxMemberOfDevelopment(kOrganizationRankMax)) {
    engine.warn('组织 ${organization.id} 的低阶成员数量达到上限，在提升成员级别之前无法再添加新成员。')
    return false
  }
  if (character.organizationId != null) {
    assert(character.organizationId != organization.id)
    removeCharacterFromOrganization(character)
  }
  organization.characterIds[character.id] = character.organizationRank = 0
  character.organizationId = organization.id

  if (incurIncident) {
    const incidentContent = engine.locale('organizationEnlist', interpolations: [
      character.name,
      organization.name,
    ])
    Incident(
      subjectId: character.id,
      organizationId: organization.id,
      message: incidentContent,
      order: 10,
      isPrivate: false,
    )
  }

  const location = game.locations[organization.headquartersId]
  setCharacterHome(character, location)
  
  // const r = random.nextInt(_kOrganizationThinkingsOnRecruit)
  // for (const i in range(r)) {
  //   let thinking
  //   do {
  //     thinking = random.nextIterable(kOrganizationThinkings[organization.category])
  //   } while (character.thinkings.contains(thinking))
  //   character.thinkings.add(thinking)
  // }
  
  // setCharacterLocationId(character, organization.headquartersId)
  return true
}

function addOrganizations(orgs: List) {
  for (const org in orgs) {
    addOrganization(arg)
  }
}

function addOrganization(org) {
  assert(org.id != null)
  game.organizations[org.id] = org
}

function getOrganizationById(id: string) {
  return game.organizations[id]
}

function getOrganizations([ids]) {
  if (ids != null) {
    assert(ids.isNotEmpty)
    return game.organizations.values.where( (value) => value.id in ids )
  } else {
    return game.organizations.values
  }
}

function increaseOrganizationDevelopment(organization, { incurIncident = true }) {
  if (organization.development <= kOrganizationDevelopmentMax) {
    ++organization.development
  } else {
    engine.warn('组织 ${organization.id} 的发展度（${organization.development}）已达到或超过最大值。')
  }
  
  const incidentContent = engine.locale('organizationDeveloped', interpolations: [
    organization.name,
    organization.development,
  ])
  Incident(
    organizationId: organization.id,
    message: incidentContent,
    isGlobal: true,
  )
}

// function getNations(id: string) {
//   return game.nations
// }

// function getNationById(id: string) {
//   return game.nations[id]
// }

// function removeCharacterFromNation(character) {
//   character.nationId = null
// }

// function addCharacterToNation(character, nation) {
//   assert(nation.category == 'nation')
//   character.nationId = nation.id
// }

function removeTerrainFromOrganization(terrain, { incurIncident = true }) {
  if (terrain.nationId == null) return

  const organization = game.organizations[terrain.nationId]
  organization.territoryIndexes.remove(terrain.index)
  organization.borderIndexes.remove(terrain.index)

  final neighbors = getMapTileNeighbors(terrain.left, terrain.top, world)
  for (final neighbor in neighbors) {
    if (neighbor.nationId = organization.id &&
        !organization.borderIndexes.contains(neighbor.index)) {
      organization.borderIndexes.add(neighbor.index)
    }
  }

  if (terrain.locationId != null) {
    const location = game.locations[terrain.locationId]
    delete location.organizationId
    engine.warn('${oldOrg.id} 失去了据点：${location.id}')
    organization.locationIds.remove(location.id)
    
    let toBeRemoved
    for (let key in location.sites.keys) {
      const site = location.sites[key]
      if (site.name == organization.name) {
        engine.warn('${organization.id} 失去了总堂所在地块！')
        toBeRemoved = site.id
        break
      }
    }
    delete location.sites[toBeRemoved]
  }
}

// TODO: 添加incident
function addTerrainToOrganization(terrain, organization, { incurIncident = true }) {
  if (terrain.nationId == organization.id) {
    engine.warn('terrain [${terrain.left}, ${terrain.top}] already belongs to organization [${organization.id}]')
    return
  }
  if (terrain.nationId != null) {
    removeTerrainFromOrganization(terrain)
  }
  assert(organization.territoryIndexes.isEmpty ||
          !organization.territoryIndexes.contains(terrain.index))
  organization.territoryIndexes.add(terrain.index)
  if (organization.borderIndexes.contains(terrain.index)) {
    organization.borderIndexes.remove(terrain.index)
  }
  const neighbors = getMapTileNeighbors(terrain.left, terrain.top, world)
  for (const neighbor in neighbors) {
    if (neighbor.nationId != organization.id) {
      organization.borderIndexes.add(neighbor.index)
    }
  }
  terrain.nationId = organization.id
  if (terrain.locationId) {
    const location = game.locations[terrain.locationId]
    // 应该已经从原本的门派中移除
    assert(location.organizationId == null)
    location.organizationId = organization.id
    if (!organization.locationIds.contains(location.id)) {
      organization.locationIds.add(location.id)
    }
  }
  engine.info('门派 ${organization.id} 将其领土扩展到 [${terrain.left},${terrain.top}]')
}

// /// 将某个功法记录在这个组织的 skillRecords 中
// /// 根据技能来生成一个道具，也就是技能书
// function organizationRecordSkill(organization, skill) {
//   assert(organization != null)
//   assert(skill != null)
//   organization.skills[skill.id] = book

//   const incidentContent = engine.locale('organizationRecordSkill', interpolations: [
//     organization.name,
//     skill.name,
//   ])
//   Incident(
//     organizationId: organization.id,
//     message: incidentContent,
//   )
// }

// function organizationRecordSkill({organization, rank, skill, requirement}) {
//   assert(organization != null)
//   rank ??= -1
//   assert(skill != null)
//   organization.skills[rank].add({
//     requirement,
//     skill: skill.clone(),
//   })
// }
