import '../../game.ht'
import '../character/character.ht'
import '../../dialog.ht'
import '../../name/location.ht'
import '../entity.ht'
import '../../world/tile/hexagonal_tile.ht'
import '../../world/tile/common.ht'
import '../item/material.ht'
import '../item/item.ht'
import '../../datetime.ht'
import '../entity.ht'
import '../organization/organization.ht'

const _kLocationInitialStabilityMax = 50
const kLocationDevelopmentMax = 5

const kLocationKindInland = 'inland'
const kLocationKindHarbor = 'harbor'
const kLocationKindIsland = 'island'
const kLocationKindMountain = 'mountain'
const kLocationKindHome = 'home'
const kLocationKindResidence = 'residence'
const kLocationKindCityHall = 'cityhall'
const kLocationKindArena = 'arena'
// 这三种交易建筑，可能属于某个组织，也可能没有组织。
// 当没有组织时，属于默认生成的单纯服务性质的建筑。
// 此时交易所产生的物品、金钱，将会归属于其所在的据点。
const kLocationKindLibrary = 'library'
const kLocationKindTradingHouse = 'tradinghouse'
const kLocationKindAuctionHouse = 'auctionhouse'
const kLocationKindMine = 'mine'
const kLocationKindTimberland = 'timberland'
const kLocationKindFarmland = 'farmland'
const kLocationKindHuntground = 'huntground'
const kLocationKindCanal = 'canal'
const kLocationKindFishMarket = 'fishmarket'
const kLocationKindArrayLab = 'arraylab'
const kLocationKindRuneHouse = 'runehouse'
const kLocationKindAcademyLab = 'academylab'
const kLocationKindWorkshop = 'workshop'
const kLocationKindNursery = 'nursery'
const kLocationKindZoo = 'zoo'
const kLocationKindIllusionHouse = 'illusionhouse'
const kLocationKindPsychicHouse = 'psychichouse'
const kLocationKindDivinationHouse = 'divinationhouse'
const kLocationKindTheurgyHouse = 'theurgyhouse'

// number of plain city background count
const _kCityPlainDevelopment1BackgroundCount = 3
const _kCityPlainDevelopment2BackgroundCount = 8
const _kCityMountainDevelopment1BackgroundCount = 3
const _kCityMountainDevelopment2BackgroundCount = 4
const _kCityShoreDevelopment1BackgroundCount = 3
const _kCityShoreDevelopment2BackgroundCount = 4

struct Location {
  constructor ({
    category, // 'city', 'building'
    kind, // 'inland' | 'harbor' | 'island' | 'mountain'
    terrain,
    location,
    ownerId,
    organizationId,
    name,
    background,
    image,
    isDiscovered = true,
  }) {
    this.entityType = kEntityTypeLocation
    assert(category != null && kind != null)
    this.category = category

    this.createdTimestamp = game.timestamp
    this.id = crypto.randomNID(length: 6, withTime: true)

    // 没有category参数时，不自动添加到当前世界
    if (category) {
      game.locations[this.id] = this
    }
    
    if (category == 'location') {
      assert(terrain != null)

      terrain.locationId = this.id
      // terrain.caption = location.name
      // 城市的贴图重叠于地形贴图之上
      terrain.overlaySprite.sprite = kSpriteCity

      this.terrainIndex = terrain.index
      this.worldPosition = {
        left: terrain.left,
        top: terrain.top,
      }
      
      if (name) {
        this.name = name
      } else {
        let conflict = false
        do {
          const randomName = generateLocationName(category: this.category)
          this.name = randomName.name
          conflict = game.locations.values.where((element) =>
            element.name == this.name).isNotEmpty
        } while (conflict)
      }
    
      // 这个据点的子场景，这里只保存id，具体数据和 location 一同保存在 game 上
      this.subsidiaries = []
      
      if (background != null) {
        this.background = background
      } else {
        switch (category) {
          kLocationKindHarbor : {
            const index = random.nextInt(_kCityShoreDevelopment1BackgroundCount)
            this.background = 'location/city/city_water_${this.development}_${index}.png'
          }
          kLocationKindArcana : {
            const index = random.nextInt(_kCityMountainDevelopment1BackgroundCount)
            this.background = 'location/city/city_mountain_${this.development}_${index}.png'
          }
          // kLocationKindMirage : {

          // }
          else : {
            const index = random.nextInt(_kCityPlainDevelopment1BackgroundCount)
            this.background = 'location/city/city_plain_${this.development}_${index}.png'
          }
        }
      }
      
      // 据点发展度，最高5，初始0
      // 发展度决定了据点所能拥有的普通居民人口上限，所能拥有建筑的数量，以及能产生的悬赏任务上限等
      // 发展度需要花费钱币、矿石和木材来升级
      this.development = 0
      this.pupulation = random.nextInt(maxPopulationOfLocationDevelopment(0) / 5)
      
      engine.debug('在 ${terrain.left}, ${terrain.top} 建立了 ${this.name}')

      // 如果是盗贼营地或者洞天福地，则默认不会显示在地图上，并且也不会默认添加民居
      // 隐藏的洞天会显示为山峰，但隐藏的福地只有被发现后才会出现岛屿，之前就是普通的水面
      // if (this.category == kLocationKindCity) {
      Location(category: 'building', kind: kLocationKindCityHall, location: this)
      Location(category: 'building', kind: kLocationKindResidence, location: this)
    } else if (category == 'building') {
      assert(location != null)
      location.subsidiaries.add(this.id)
      this.name = name ?? engine.locale(kind)
      
      this.background = background ?? 'location/site/${category}.png'
      this.image = image ?? 'location/site/${category}_card.png'

      engine.debug('在 ${location.name} 建立了 ${this.name}')
    } else {
      throw 'Invalid location category: [${category}]'
    }

    // 建筑的拥有者
    // 住所的owner就是这个住所的主人
    // 如果同时有 ownerId 和 organizationID，意味着这个建筑为非私有
    this.ownerId = ownerId
    // 住所的owner就是这个住所的主人
    if (this.category == kSiteHome) {
      assert(this.ownerId != null)
    }
    // 拥有建筑的门派
    this.organizationId = organizationId
    // 每月事件刷新时间
    this.monthlyUpdateTime = random.nextInt(kTicksPerMonth)
    // 该据点的事件触发选项
    this.flags = {}
    this.isDiscovered = isDiscovered

    // 大牢中的角色
    // 如果主角自己进入了监牢，则要通过监牢副本才能离开，并且离开后会进入本据点的敌对名单。
    // 另外两种选择是通过说服，或者贿赂离开
    // this.jailedCharacterIds = []

    // 据点和人物类似，也具有物品栏
    this.inventory = {}
    this.materials = MaterialStorage()

    // 据点的历史
    this.experienced = []

    // 为了兼容性，地块的门派没有用organizationId而是用了nationId
    // this.nationId
    
    // 普通居民决定了税收收入，以及外门弟子的数量
    // const minP = maxPopulationOfLocationDevelopment(this.development - 1)
    // const maxP = maxPopulationOfLocationDevelopment(this.development)
    // this.population = random.nextInt(maxP - minP) + minP

    // 被禁止进入的名单，名单可能重叠
    // 一个人本身在名单上，但他的国家也可能在名单上，并且互相独立
    // this.banLists = {
    //   characterIds: [],
    //   organizationIds: [],
    //   // nationIds: [],
    // }
  }
}

function addLocation(loc) {
  assert(loc?.id != null)
  engine.debug('向当前世界添加新据点：${loc.name}')
  game.locations[loc.id] = loc
  let terrain = getTerrainByWorldPosition(loc.worldPosition.left, loc.worldPosition.top)
  terrain.locationId = loc.id
  // terrain.caption = location.name
  World.setTerrainCaption(loc.worldPosition.left, loc.worldPosition.top, loc.name)
  terrain.overlaySprite.sprite = kSpriteCity
  World.updateTerrainOverlaySprite(loc.worldPosition.left, loc.worldPosition.top)
}

function addLocations(locs: List) {
  engine.debug('载入地点数据')
  for (const loc in locs) {
    if (loc.nameId) {
      loc.name = engine.locale(loc.nameId)
    }
    game.locations[loc.id] = loc
  }
}

function removeLocationById(locationId: string) {
  let loc = getLocationById(locationId)
  if (loc != null) {
    engine.warn('警告：正在移除ID为 [${locationId}] 的据点。')
    let terrain = getTerrainByWorldPosition(loc.worldPosition.left, loc.worldPosition.top)
    delete terrain.locationId
    World.setTerrainCaption(loc.worldPosition.left, loc.worldPosition.top, null)
    delete terrain.overlaySprite.spriteIndex
    World.updateTerrainOverlaySprite(loc.worldPosition.left, loc.worldPosition.top)
    delete game.locations[locationId]
  }
}

function getLocationDistance(loc1, loc2) {
  return getTileDistance(loc1.tilePosition, loc2.tilePosition)
}

// 每个城市发展度对应的居民上限
// 居民可以用于充当据点的仆役
function maxPopulationOfLocationDevelopment(n: integer) {
  return  (n - 1) * (n - 1) * (n - 1) * 50 + 100
}

function maxSiteNumberOfLocationDevelopment(n: integer) {
  return (n + 1) * n ~/ 2 + 1
}

// 每个据点，每个月会自然增加人口，直到达到上限
// 人口上限会受到掌门的技能，门派的发展度和价值观，以及据点的发展度和建筑所影响
function increaseLocationPopulationPerMonth(location) {

}

function setCharacterLocationId(character, locationId: string) {
  assert(game.locations.containsKey(locationId))
  // clearCharacterLocation(character)
  character.locationId = locationId
}

function setCharacterSiteId(character, siteId: string) {
  if (!character.locationId) {
    engine.error('could not set siteId while character is not at any location.')
    return
  }
  const location = game.locations[character.locationId]
  assert(location.sites.containsKey(siteId))
  character.siteId = siteId
}

function getLocationById(id: string) {
  return game.locations[id]
}

function getLocations([ids]) {
  if (ids != null) {
    assert(ids.isNotEmpty)
    return game.locations.values.where( (value) => value.id in ids )
  } else {
    return game.locations.values
  }
}

function getLocationByWorldPosition(left, top) {
  const tile = world.terrains[tilePos2Index(left, top, world.width)]
  if (tile.locationId)
  return game.locations[tile.locationId]
}

function getLocationSiteById(location, siteId: string) {
  assert(location.sites.containsKey(siteId) || siteId)
  return location.sites[siteId]
}

function discoverLocation(location) {
  if (location.isDiscovered) return
  engine.debug('发现新据点：${location.name}')
  location.isDiscovered = true
  World.setTerrainCaption(location.worldPosition.left, location.worldPosition.top, location.name)
  if (location.category == kLocationKindArcana || location.category == kLocationKindMirage) {
    const tile = world.terrains[location.terrainIndex]
    // tile.spriteIndex = kSpriteLand
    tile.overlaySprite.sprite = kSpriteCity
    // World.setWorldMapSprite(location.worldPosition.left, location.worldPosition.top, kSpriteLand)
    World.updateTerrainOverlaySprite(location.worldPosition.left, location.worldPosition.top)
  }
}

function increaseLocationDevelopment(location) {
  if (location.development < kLocationDevelopmentMax) {
    ++location.development
  } else {
    engine.warn('据点 ${location.name} 的发展度（${location.development}）已达到或超过最大值。')
  }
}
