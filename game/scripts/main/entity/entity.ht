import '../random.ht'
import '../dialog.ht'
import '../name/skill/skill.json5' as skillData

const kAttributes = [
  'dexterity',
  'strength',
  'spirituality',
  'willpower',
  'perception',
]

const kCultivationGenres = [
  'daoism',
  'swordcraft',
  'bodyforge',
  'avatar',
  'vitality',
]

final kBattleCardKind = skillData.keys.toList()

// 进行某些互动的时候
const kFameCheckThreshold = 75
// 进行某些互动的时候
const kCharismaCheckThreshold = 75

const kBasic = 'basic' // 未知
const kCommon = 'common' // 凡品：生成数量没有限制
const kUncommon = 'uncommon' // 良品：每9世界大小
const kRare = 'rare' // 上品：每18世界大小
const kEpic = 'epic' // 极品：每36世界大小
const kLegendary = 'legendary' // 神品：每72世界大小
const kUnique = 'unique' // 秘宝：每144世界大小
const kMythic = 'mythic' // 灵宝：每288世界大小
const kArcane = 'arcane' // 古宝：每576世界大小

const kRarity = {
  /// 未分类 黑
  basic: {
    rank: 0,
    name: 'basic',
    color: '#A3A3A3',
  },
  /// 凡品 灰
  common: {
    rank: 1,
    rarity: 0.51,
    name: 'common',
    color: '#CCCCCC',
  },
  /// 良品 浅黄
  uncommon:{
    rank: 2,
    rarity: 0.255,
    name: 'uncommon',
    color: '#FFFFD4',
  },
  /// 上品 蓝
  rare:{
    rank: 3,
    rarity: 0.12,
    name: 'rare',
    color: '#9D9DFF',
  },
  /// 极品 紫
  epic: {
    rank: 4,
    rarity: 0.06,
    name: 'epic',
    color: '#804DC8',
  },
  /// 神品 橙
  legendary: {
    rank: 5,
    rarity: 0.03,
    name: 'legendary',
    color: '#C5C660',
  },
  /// 秘宝 金
  unique: {
    rank: 6,
    rarity: 0.015,
    name: 'unique',
    color: '#62CC39',
  },
  /// 古宝 暗金
  mythic: {
    rank: 7,
    rarity: 0.007,
    name: 'mythic',
    color: '#F28234',
  },
  /// 灵宝 红
  arcane: {
    rank: 8,
    rarity: 0.003,
    name: 'arcane',
    color: '#C65043',
  },
}

function getRarity({ name }) {
  if (name) {
    assert(kRarity.containsKey(name))
    return kRarity[name]
  } else {
    const r = random.nextDouble()
    if (r > kRarity.common.rarity) {
      return kRarity.common.name
    } else if (r > kRarity.uncommon.rarity) {
      return kRarity.uncommon
    } else if (r > kRarity.rare.rarity) {
      return kRarity.rare
    } else if (r > kRarity.epic.rarity) {
      return kRarity.epic
    } else if (r > kRarity.legendary.rarity) {
      return kRarity.legendary
    } else if (r > kRarity.unique.rarity) {
      return kRarity.unique
    } else if (r > kRarity.mythic.rarity) {
      return kRarity.mythic
    } else {
      return kRarity.arcane
    }
  }
}

// 从一个稀有度和值的对应表中，按照稀有度的概率取出值
// function getMappedRarityValue(valueMap) {
//   const r = getRarity()
//   const v = valueMap[r.rarity]
//   return (v is Iterable) ? v.random : v
// }

// entityType决定了该对象的数据结构和保存位置
const kEntityTypeCharacter = 'character' //game.characters
const kEntityTypeBaby = 'baby' // game.babies
const kEntityTypeItem = 'item' //character.inventory
const kEntityTypeOrganization = 'organization' //game.organizations
const kEntityTypeLocation = 'location' // game.locations
const kEntityTypeBattleCard = 'battle_card' // character.cardLibrary

const kEntityCategoryMaterial = 'material';

const kEquipmentMax = 6

// 材料的类型
const kMaterialMoney = 'money'
const kMaterialJade =  'jade'
const kMaterialFood =  'food'
const kMaterialWater = 'water'
const kMaterialStone = 'stone'
const kMaterialOre =   'ore'
const kMaterialTimber = 'timber'
const kMaterialPaper = 'paper'
const kMaterialHerb =  'herb'

const kMaterialKinds = [
  'money',
  'jade',
  'food',
  'water',
  'stone',
  'ore',
  'timber',
  'paper',
  'herb',
]

const kWeaponKinds = [
  'sword',
  'sabre',
  'staff',
  'spear',
  'bow',
  'dart',
  'pipa',
  'flute',
]

const kArmorKinds = [
  'armor',
  'gloves',
  'boots',
  'helmet',
  'shield',
]

const kTalismanKinds = [
  'amulet',
  'ring',
  'pearl',
  'bracelet',
]

const kEquipmentKinds = [
  ...kWeaponKinds,
  ...kArmorKinds,
  ...kTalismanKinds,
]

// 实际上进攻类装备也可能具有防御效果，因此这里的类型仅用于显示而已
const kEquipTypeShip = 'ship'
const kEquipTypeBoots = 'boots'
const kEquipTypeAircraft = 'aircraft'

const kItemCategoryMaterialPack = 'materialpack'
const kItemCategoryEquipment = 'equipment'
const kItemCategoryCardpack = 'cardpack'

const kRankMax = 8

const kRankRarity = {
  '0': 'basic',
  '1': 'common',
  '2': 'uncommon',
  '3': 'rare',
  '4': 'epic',
  '5': 'legendary',
  '6': 'unique',
  '7': 'mythic',
  '8': 'arcane',
}

function getRandomLevel(min, max) {
  if (min >= max) return max
  return  min + random.distantInt(max - min + 1)
}

function minLevelPerRank(rank) {
  assert(rank >= 0)
  return rank < 2 ? rank : (rank - 1) * 10
}

function maxLevelPerRank(rank) {
  assert(rank >= 0)
  return rank == 0 ? 10 : (rank * 10 + 20)
}

// 额外词条数量，卡牌和装备共用一个算法
function getMinMaxExtraAffixCount(rank) {
  assert(rank >= 0 && rank <= kRankMax)
  let minExtra = 0
  let maxExtra = 0
  let minGreater = 0
  let maxGreater = 0
  if (rank > 0) {
    if (rank < 5) {
      minExtra = rank - 1
      maxExtra = rank
    } else {
      minExtra = maxExtra = 4
      minGreater = rank - 5
      maxGreater = rank - 4
    }
  }
  return { minExtra, maxExtra, minGreater, maxGreater }
}

function getCultivationRankName(character) {
  return engine.locale('cultivationRank_${character.cultivationRank}')
}

function setEntityWorldPosition(entity, left, top, [ worldId ]) {
  entity.worldPosition = { left, top }
  if (worldId != null) {
    entity.worldId = worldId
  }
}

const _kCharacterRandomAgeMax = 40

function createRandomBirthTimestamp({min = 1, max = _kCharacterRandomAgeMax}) {
  assert(min > 0)
  const age = random.nextInt(max - min) + min
  const randomDateInAYear = random.nextInt(kTicksPerYear)
  return game.timestamp - (age * kTicksPerYear + randomDateInAYear)
}

function tryChangeStats(entity, statName, change, { overflow = false }) {
  let data = entity.stats
  assert(data != null && data[statName] != null)
  let value = data[statName]
  value += change
  let residue = 0
  if (!overflow) {
    const max = data['${statName}Max']
    if (value < 0) {
      residue = value
      value = 0
    }
    if (value >= max) {
      residue = max - value
      value = max
    }
  }
  data[statName] = value
  return residue
}
