/// battle entity 指一个可以参与战斗的对象。
/// 此对象拥有一个牌库和一个卡组。
/// 卡组是战斗中使用的。而牌库可以用来交换卡牌收藏（偷取、学习或者交换）。

import '../entity.ht'
import '../item/material.ht'

// number of the male avatar images
const _kMaleAvatarCount = 37
 // number of the female avatar images
const _kFemaleAvatarCount = 75

const _kAttributesBase = 50

const kBaseStaminaCostForMoveOnWater = 12
const kBaseStaminaCostForMoveOnHill = 12

const kBaseLife = 75 
const kBaseMana = 1
const kBaseLightedArea = 3

const kAttributeNames = [
  'spirituality',
  'dexterity',
  'strength',
  'willpower',
  'perception',
]

// 某些时候，只需要生成一个用于战斗的实体，此时不需要年龄、魅力等属性
struct BattleEntity {
  construct ({
    isMajorCharacter = true,
    isFemale,
    icon,
    illustration,
    characterSkin,
    familyName,
    middleName,
    shortName,
    name,
    generateName = true,
    description,
    cultivationLevel,
    cultivationRank,
    attributes,
    baseAttribute,
    majorAttribute,
    stats,
    cardLibrary,
    battleDecks,
  }) {
    this.entityType = kEntityTypeCharacter
    this.isFemale = isFemale ?? random.nextBool()
    if (this.isFemale) {
      const index = random.nextInt(_kFemaleAvatarCount)
      this.icon ??= 'female/${index}.jpg'
      this.illustration ??= illustration
      this.characterSkin = characterSkin ?? 'characterWoman1'
    } else {
      const index = random.nextInt(_kMaleAvatarCount)
      this.icon ??= 'male/${index}.jpg'
      this.illustration ??= illustration
      this.characterSkin = characterSkin ?? 'characterMan1'
    }
    if (generateName) {
      let randomName

      let conflict = false
      do {
        randomName = generateCharacterName(
          isFemale: this.isFemale,
          familyName: familyName,
          middleName: middleName,
        )
        if (isMajorCharacter) {
          conflict = game.characters.values.where((element) =>
            element.name == randomName.name).isNotEmpty
        }
      } while (conflict)

      this.name = randomName.fullName
      this.familyName = randomName.familyName
      this.middleName = randomName.middleName
      this.shortName = randomName.shortName
    } else {
      this.name = name ?? engine.locale('noname')
      this.familyName = familyName
      this.middleName = middleName
      this.shortName = shortName ?? name
    }
    assert(this.name != null)
    this.id = this.name
    
    // 非主角色不参与 update, interact 等逻辑交互，也不会自动显示在地图或场景中。
    this.isMajorCharacter = isMajorCharacter ?? false

    this.description = description ?? ''

    // 修真境界，凝气期是1
    // 境界决定了升级时能获得卡牌的最高稀有度，但具体获得的卡牌是随机的
    // 在所有流派中，只有修为等级最高的那个流派决定了境界
    this.cultivationRank = cultivationRank ?? 0
    this.cultivationLevelMax = maxLevelPerRank(this.cultivationRank)
    // 修为等级，每次提升修为等级可以获得1点天赋点
    this.cultivationLevel = cultivationLevel ?? 0

    // 身上携带的材料，材料本身没有特殊属性，多个材料只是堆叠数字增加
    // 材料单独显示在物品栏上方，没有携带的材料不会显示
    // 金钱也是一种材料，其他材料包括可以用来建筑的木材、石料等
    this.materials = MaterialStorage()

    // 身上携带的普通物品，每一个都是单独生成，无法堆叠
    this.inventory = {}

    // 装备栏的位置是固定的 8 个
    // 装备栏只能装备法宝，获得其佩戴效果
    // key 是 0-5 的数字，代表第几栏，
    // value 是 物品的 id，物品的具体数据在角色的 inventory 中
    this.equipments = {
      '0': null,
      '1': null,
      '2': null,
      '3': null,
      '4': null,
      '5': null,
    }

    // 随主角移动的其他角色
    this.companions = {}

    // 角色当前卡牌库，关于战斗卡牌的具体信息另行参阅文档
    // 卡牌库是一个 map，key 是卡牌的 id，value 是卡牌数据
    this.cardLibrary = cardLibrary ?? {}
    // 战斗卡组的数组，数组的值是一个结构体，包含卡组的命名（可修改）和卡组内容
    // [
    //   {
    //     title: 'deck name',
    //     isBattleDeck: false, // 是否是当前使用的战斗卡组
    //     cards: [
    //       'card id 1', // 卡组中只保存卡牌id，实际数据在角色的library中
    //       'card id 2',
    //     ]
    //   }
    // ]
    this.battleDecks = battleDecks ?? []
    // 当前使用的战斗卡组，记录的是战斗卡组数组的index
    this.battleDeckIndex = this.battleDecks.isNotEmpty ? 0 : -1

    // 角色的属性
    // 包括：灵力、身法、体魄、念力、神识
    let generated = generateCharacterAttributes(base: baseAttribute, major: majorAttribute)
    Object.assign(this, generated)

    // 天赋，天赋本身的数据另外保存，这里只保存了天赋的id和天赋等级
    this.talents = {}

    // 从装备或者天赋树中获得的被动加成，key是词条id
    this.passives = {}

    // 角色的数值
    // 包括经过物品、天赋和状态加成的基本属性值
    // 通过属性还会计算出：攻击、防御、体力、生命、灵气
    this.stats = stats ?? {
      life: kBaseLife,
      lifeMax: kBaseLife,
      ...generated,
    }

    // 主流派：御剑、道术、锻体、炼魂、法身
    // 副流派：炼丹、炼器、阵法、符法、灵植、灵兽、幻术、卜术、通灵、通神
    // this.cultivationGenre = cultivationGenre
  }
}

// function generateCharacterAttributes({
//     sum,
//     base,
//     major,
//     // majorAttributes: List = [],
//   }) {
//   if (sum != null) {
//     assert(sum > 0)
//   } else {
//     sum = _kAttributesSum + random.distantInt(_kAttributesSumExtra - _kAttributesSum)
//   }
//   if (base != null) {
//     assert(base >= 0 && base * kAttributeNames.length <= sum)
//   } else {
//     base = _kAttributesBase + random.distantInt(_kAttributesBaseExtra - _kAttributesBase)
//   }
//   if (major != null) {
//     assert(kAttributeNames.contains(major))
//   }

//   sum = sum - base * kAttributeNames.length

//   const attributes = {}

//   let reserved = (sum * _kMajorAttributeFactor).toInt()
//   let rest = major ? sum - reserved : sum
  
//   let attrList = random.shuffle(kAttributeNames).toList()
//   for (var i = 0; i < attrList.length - 1; ++i) {
//     let value = 0
//     if (rest > 0) {
//       value = random.nextInt(rest)
//       rest -= value
//     }
//     attributes[attrList[i]] = base + value
//   }
//   attributes[attrList.last] = rest

//   if (major) {
//     attributes[major] +=reserved

    // let majorAttrList = random.shuffle(major).toList()
    // for (var i = 0; i < majorAttrList.length - 1; ++i) {
    //   const value = random.nextInt(reserved)
    //   attributes[majorAttrList[i]] += value
    //   reserved -= value
    // }
    // attributes[majorAttrList.last] += reserved
//   }
  
//   return attributes
// }

function generateCharacterAttributes({base, major}) {
  base ??= _kAttributesBase
  let attributes = {}
  for (var i = 0; i < kAttributeNames.length; ++i) {
    final attrName = kAttributeNames[i]
    if (attrName == major) {
      attributes[attrName] = random.nearInt(base)
    } else {
      attributes[attrName] = random.distantInt(base)
    }
  }
  return attributes
}

function getCharacterStats(character) {
  const stats = character.stats.clone()
  return stats
}

function getCharacterMovableTerrainKinds(character) {
  let kinds = ['plain', 'forest']
  let movableOnWater = getCharacterMoveCostOnWater(character)
  if (movableOnWater) kinds.addAll(['sea', 'lake'])
  let movableOnHill = getCharacterMoveCostOnHill(character)
  if (movableOnHill) kinds.addAll(['mountain'])
  return kinds
}

/// 获取角色水上移动体力消耗，如果返回null表示不可水上移动
/// 消耗以tick为单位，在角色进入该地块之后扣减相应数值
function getCharacterMoveCostOnWater(character) {
  // TODO: 结丹境可以直接飞行，因此无需船只
  for (let i = 1; i < kEquipmentMax; ++i) {
    let itemId = character.equipments[i]
    let item = character.inventory[itemId]
    if (item != null && item.equipType == kEquipTypeShip) {
      return kBaseStaminaCostForMoveOnWater
    }
  }
  return null
}

/// 获取角色山地移动体力消耗，如果返回null表示不可山上移动
/// 消耗以tick为单位，在角色进入该地块之后扣减相应数值
function getCharacterMoveCostOnHill(character) {
  for (let i = 1; i < kEquipmentMax; ++i) {
    let itemId = character.equipments[i]
    let item = character.inventory[itemId]
    if (item != null && item.equipType == kEquipTypeBoots) {
      return kBaseStaminaCostForMoveOnHill
    }
  }
  return null
}
