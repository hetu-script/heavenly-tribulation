import '../../game.ht'
import '../../datetime.ht'
import '../../incident.ht'
import '../../util.ht'
import '../entity.ht'
import '../../world/tile/hexagonal_tile.ht'
import 'battle_entity.ht'
import '../item/item.ht'
import '../../dialog.ht'
import '../../random.ht'
import '../achievement.ht'

export 'battle_entity.ht'

const _kCharacterAverage = 50.0
const _kCharacterDeviation = 25.0
/// 容貌最大值: 100.0
const _kCharacterMax = 100.0
const _kCharacterImpressionCheckpoint = 10.0
const _kCharacterInitialGeneralThinking = 4

const kCultivationRankMax = 8

const kMajorMotivations = [
  'immortality', // 等级，境界
  'cultivation', // 功法，战斗
  'domination', // 国家领地
  'wealth', // 财富（法宝和材料）
  'pleasure', // 快乐
  'soulmate', // 知己
  'wuwei', // 无欲无求
]

const kMinorMotivations = [
  'entrepreneur',
  'friendship',
  'marriage',
  'child',
]

const kCultivationFavor = [
  'none',
  'any',
  'swordcraft',
  'daoism',
  'bodyforge',
  'vitality',
  'avatar',
]

const kOrganizationFavor = [
  'cultivation',
  'gang',
  'religion',
  'business',
  'nation',
]

const kMajorThinkings = [
  "respectForElders",
  "malePreference",
  "exclusionism",
  "bigFamily",
  "heritage",
  'selfDiscipline',
  'helping',
  'travelling',
  'curiosity',
  'competitiveness',
  'humor',
  'enthusiasm',
  'romance',
  'modesty',
  'celibate',
  'dink',
  'chatting',
  'heavyhanded',
  'cynicism',
  'appearanceIsEverything',
  'bullying',
  'promiscuousness',
  'saddist',
  'backstabbing',
  'greediness',
  'arrogance',
  'jealousness',
  'anger',
]

const kLifespan = {
  '0': {
    min: 62,
    max: 87,
  },
  '1': {
    min: 75,
    max: 125,
  },
  '2': {
    min: 100, // 前一等级的中心点
    max: 200, // min + 前一等级跨度的两倍
  },
  '3': {
    min: 150,
    max: 350,
  },
  '4': {
    min: 250,
    max: 650,
  },
  '5': {
    min: 450,
    max: 1250,
  },
  '6': {
    min: 850,
    max: 2450,
  }
}

function createRandomLifespan(cultivationRank) {
  let { min, max } = kLifespan[cultivationRank]
  let minTick = min * kTicksPerYear
  let maxTick = max * kTicksPerYear
  let randomSpan = minTick + random.nextInt(maxTick)
  return randomSpan
}

// 羁绊, 人物对其他的某个事物的印象和评价
struct Bond {
  constructor ({
    character,
    target,
    score = 0,
    haveMet = false,
  }) {
    this.id = target.id
    this.name = target.name
    this.relationship = getCharacterRelationshipOfTarget(character, target)
    this.score = score
    // 是否见过此对象
    this.haveMet = haveMet

    character.bonds[this.id] = this
  }
}

const _kPregnancyTime = kTicksPerMonth * 9
const _kPregnancyTimeVariable = kTicksPerMonth * 2

struct Baby {
  constructor ({
    id,
    father,
    mother,
    conceptionTimestamp,
    middleName,
    shortName,
  }) {
    assert(father != null)
    assert(mother != null)
    assert(conceptionTimestamp != null)
    this.entityType = kEntityTypeBaby

    mother.isPregnant = true

    this.fatherId = father.id
    this.motherId = mother.id
    this.conceptionTimestamp = conceptionTimestamp
    this.pregnancyTime = Math.gaussianNoise(
      _kPregnancyTime,
      _kPregnancyTimeVariable, 
      randomGenerator: random,
    )
    this.isFemale = random.nextBool()
    this.familyName = father.familyName

    if (shortName) {
      this.shortName = middleName + shortName
    } else {
      let randomName
      let conflict = false
      do {
        randomName = generateCharacterName(
          isFemale: this.isFemale,
          familyName: this.familyName,
          middleName: middleName,
        )
        conflict = game.characters.values.where((element) =>
          element.name == randomName.name).isNotEmpty
      } while (conflict)
      this.shortName = randomName.shortName
    }
    this.name = this.familyName + this.shortName

    // this.id = 'character.${crypto.randomUID4(2)}.${this.name}'
    this.id = id ?? this.name

    game.babies[this.id] = this
  }
}

const basicLibrary = [
  'attack_normal',
]

function getMajorAttribute(character) {
  let major = character.spirituality
  let majorName = 'spirituality'

  if (character.dexterity > major) {
    major = character.dexterity
    majorName = 'dexterity'
  }
  if (character.strength > major) {
    major = character.strength
    majorName = 'strength'
  }
  if (character.willpower > major) {
    major = character.willpower
    majorName = 'willpower'
  }
  if (character.perception > major) {
    majorName = 'perception'
  }

  return majorName
}

struct Character {
  constructor ({
    id,
    isMain = true,
    isFemale,
    icon,
    illustration,
    characterSkin,
    shipSkin,
    familyName,
    middleName,
    shortName,
    name,
    titleId,
    generateName = true,
    description,
    cultivationLevel,
    cultivationRank,
    attributes,
    majorAttribute,
    stats,
    cardLibrary: {},
    battleDecks: List = [],
    birthTimestamp,
    unconvertedExp,
    exp,
    availableSkillPoints,
    worldId,
    worldPositionX,
    worldPositionY,
    locationId,
    // nationId,
    isNewborn = false, // 是否是新生儿，如果是则会自动为其添加父母关系
    fatherId,
    motherId,
    spouseId,
  }) {
    // 生成战斗单位相关数据，并写入当前对象
    // 不使用继承主要是因为这些数据经常会改动，直接写在这个对象上的话会更清晰
    const battleInfo = BattleEntity(
      id: id,
      isMain: isMain,
      isFemale: isFemale,
      icon: icon,
      illustration: illustration,
      characterSkin: characterSkin,
      familyName: familyName,
      middleName: middleName,
      shortName: shortName,
      name: name,
      generateName: generateName,
      description: description,
      cultivationLevel: cultivationLevel,
      cultivationRank: cultivationRank,
      attributes: attributes,
      majorAttribute: majorAttribute,
      stats: stats,
      cardLibrary: cardLibrary,
      battleDecks: battleDecks,
    )
    Object.assign(this, battleInfo)

    // this.entityType = 'character'
    // this.category = category ?? 'character'

    if (this.isMain) {
      game.characters[this.id] = this
    }

    this.shipSkin = shipSkin ?? 'ship1'
    
    this.cultivationFavor = getMajorAttribute(this)
    this.organizationFavor = random.nextIterable(kOrganizationFavor)

    // 经验值，获取后会体现为修炼界面的光点，点击或者划过光点才会转化为真正的修为经验
    this.unconvertedExp = unconvertedExp ?? 0
    // 转换后的修为经验值，经验值达到下一等级需求后，自动扣除并提升修为能级
    this.exp = exp ?? 0
    // 未分配的修为点数，修为点数可以用来在天赋盘上升级天赋
    this.availableSkillPoints = availableSkillPoints ?? 0
    // 已解锁的天赋盘节点，保存的是posiitonId，代表天赋盘上某个位置的坐标。如果存在意味着该位置已经被解锁
    this.passiveTreeUnlockedNodes = {}

    this.worldId = worldId ?? world?.id

    this.color = kRarity.rare.color

    this.luck =  Math.gaussianNoise(
      _kCharacterAverage,
      _kCharacterDeviation,
      min: 1,
      max: _kCharacterMax,
      randomGenerator: random,
    ).toInt()
    this.wisdom = Math.gaussianNoise(
      _kCharacterAverage,
      _kCharacterDeviation,
      min: 1,
      max: _kCharacterMax,
      randomGenerator: random,
    ).toInt()
    this.charisma = Math.gaussianNoise(
      _kCharacterAverage,
      _kCharacterDeviation,
      min: 1,
      max: _kCharacterMax,
      randomGenerator: random,
    ).toInt()
    this.charismaFavor =  Math.gaussianNoise(
      _kCharacterAverage,
      _kCharacterDeviation,
      min: 1,
      max: _kCharacterMax,
      randomGenerator: random,
    ).toInt()

    // 该人物的事件触发选项
    this.flags = {}

    // 该角色的称号
    this.titles = []
    if (titleId != null) {
      this.titles.add(titleId)
    }
    // titles中直接保存了称号字符串
    this.currentTitleId = titleId

    // 组织中的等级，一开始是 -1，表示没有组织，越大等级越高
    // 掌门的等级是 6
    this.organizationRank = -1

    this.fame = 0
    this.infamy = 0

    // 有多少人知道此人的名字
    // this.knownByPopulation = 0
    // // 恶名，知道名字中，对此人差评的人的数量
    // this.infamy = 0

    // 该角色的人际关系
    this.relationships = {
      fatherId,
      motherId,
      spouseId,
      // 姬妾男宠
      // concubineIds: [],
      // 兄弟姐妹
      siblingIds: [],
      // stepParents: [],
      // fosterParents: [],
      childrenIds: [],
      // 师父id一般只显示最后一个也就是最新的师父，但在互动时，之前的师父也会有影响
      masterIds: [],
      friendIds: [],
    }

    // 该角色的人格纬度
    this.personality = {
      // 三观，最小 -50 最大 +50
      ideal: (random.nextDouble() * 100.0 - 50.0).toInt(),
      order: (random.nextDouble() * 100.0 - 50.0).toInt(),
      good: (random.nextDouble() *100.0 - 50.0).toInt(),

      // 行为逻辑，最小 -50 最大 +50
      social: (random.nextDouble() * 100.0 - 50.0).toInt(),
      reason: (random.nextDouble() * 100.0 - 50.0).toInt(),
      control: (random.nextDouble() * 100.0 - 50.0).toInt(),
      frugal: (random.nextDouble() * 100.0 - 50.0).toInt(),
      frank: (random.nextDouble() * 100.0 - 50.0).toInt(),
      confidence: (random.nextDouble() * 100.0 - 50.0).toInt(),
      prudence: (random.nextDouble() * 100.0 - 50.0).toInt(),
      empathy: (random.nextDouble() * 100.0 - 50.0).toInt(),
      generosity: (random.nextDouble() * 100.0 - 50.0).toInt(),
    }

    // 动机列表，列表第一格为主要动机，次要动机可以有多个
    // 动机决定了角色如何安排行动
    this.motivations = []
    this.motivations.add(random.nextIterable(kMajorMotivations))

    // 思想列表，列表第一格为主要思想，次要思想可以有多个
    // 思想决定了角色对事物的看法
    this.thinkings = []
    this.thinkings.add(random.nextIterable(kMajorThinkings))

    // 该角色当前的任务
    this.quests = {}
    this.activeQuestIds = []

    // 该角色经历过的事情
    // 保存的是incident的index
    this.experienced = [] // 主动或者被动
    // 该角色听说过的事情
    this.known = []
    // conducted: [],
    // heard: [],

    // 该角色和角色的交互历史
    // key是角色id，value是一个bond data
    // bond数据结构
    // {
    //   score: int 对这个人的好感度分数
    //   memory: {} 对这个人的相关记忆
    //   promises: {} 对这个人的承诺
    // }
    this.bonds = {}
    
    if (locationId) {
      const location = world.locations[locationId]
      setCharacterLocationId(this, locationId)

      this.worldPosition = {
        left: location.worldPosition.left,
        top: location.worldPosition.top,
      }

      if (isNewborn) {
        this.birthTimestamp = game.timestamp
        assert(motherId != null)
        assert(fatherId != null)
        const mother = game.characters[motherId]
        const father = game.characters[fatherId]
        this.birthPlaceId = locationId
        assert(isMain == true)
        // 出生事件会修改自身，需要放在最后处理
        const incidentContent = engine.locale('characterBorn',
          interpolations: [
            mother.name,
            father.name,
            this.name,
            location.name,
          ])
        Incident(
          message: incidentContent,
          subjectId: mother.id,
          objectId: this.id,
          locationId: locationId,
          isPrivate: false,
          order: 10,
          ideal: -10,
        )
        characterFirstMet(mother, this)
        characterFirstMet(father, this)
        // const homeId = mother.homeId ?? mother.locationId
        // const home = world.locations[homeId]
        const home = world.locations[mother.homeId]
        setCharacterHome(this, home)
        const siblingIds = father.relationships.childrenIds
        this.relationships.siblingIds.addAll(siblingIds)
        for (const id in siblingIds) {
          const sib = game.characters[id]
          sib.relationships.siblingIds.add(this.id)
          characterFirstMet(sib, this)
        }
        mother.relationships.childrenIds.add(this.id)
        father.relationships.childrenIds.add(this.id)
        updateCharacterRelationship(mother, this)
        updateCharacterRelationship(father, this)
      } else {
        // 设置居住地会触发事件从而修改自身，需要放在最后处理
        setCharacterHome(this, location)
      }
    } else {
      if (worldPositionX != null && worldPositionY != null) {
        this.worldPosition = {
          left: worldPositionX,
          top: worldPositionY,
        }
      }
    }
    
    // age 的格式是 timestamp, 精确到 tick. 
    if (this.birthTimestamp == null) {
      this.birthTimestamp = createRandomBirthTimestamp()
    }

    /// 寿命必须在已知境界之后计算
    this.deathTimestamp = this.birthTimestamp + createRandomLifespan(this.cultivationRank)
    
    this.achievements = Achievements()
  }
}

// 必须已经是门派成员，才可以设定头衔
function addOrganizationTitleForCharacter(character, organization, rank, titleId, { incurIncident = true }) {
  assert(character.isMain == true)
  assert(organization.characterIds.keys.contains(character.id))
  assert(character.organizationId == organization.id)
  assert(rank >= 0 && rank <= kOrganizationRankMax)
  const membersOfRank = getOrganizationMemberIdsOfRank(organization, rank)
  assert(membersOfRank.length < maxMemberOfDevelopment(organization.development))
  const titleId = engine.locale('${organization.category}_titleRank${rank}')
  if (character.titles.contains(titleId)) {
    engine.warn('角色 ${character.name} 已经拥有组织头衔 ${titleId}。')
  } else {
    character.titles.add(title)
  }
  character.currentTitleId = titleId
  character.organizationRank = rank
  if (rank == kOrganizationRankMax) {
    organization.headId = character.id
  }
  const incidentContent = engine.locale('characterGainOrganizationRank', interpolations: [
    character.name,
    organization.name,
    title,
  ])
  if (incurIncident) {
    Incident(
      subjectId: character.id,
      organizationId: organization.id,
      message: incidentContent,
      order: 15,
      isGlobal: true,
    )
  }
  engine.debug(incidentContent)
}

function setCharacterTitle(character, titleId) {
  character.currentTitleId = titleId
}

// 如果没有称号，会返回 null
function getCharacterTitle(character) {
  if (character.currentTitleId != null) {
    return character.titles[character.currentTitleId]
  } else {
    return null
  }
}

function getCharacterAge(character) {
  return (game.timestamp - character.birthTimestamp) ~/ kTicksPerYear
}

function getCharacterAgeString(character) {
  return formatAgeString(game.timestamp - character.birthTimestamp)
}

function getCharacterRestLifespanString(character) {
  return formatAgeString(character.deathTimestamp - game.timestamp)
}

function getCharacterBirthDayString(character) {
  return formatDateTimeString(character.birthTimestamp, format: 'date.md')
}

function getCharacterBirthDateString(character) {
  return formatDateTimeString(character.birthTimestamp, format: 'date.ymd')
}

function getCharacterFameString(character) {
  let fame = character.fame
  if (fame < 20) {
    return engine.locale('fame.1')
  } else if (fame < 40) {
    return engine.locale('fame.2')
  } else if (fame < 60) {
    return engine.locale('fame.3')
  } else if (fame < 80) {
    return engine.locale('fame.4')
  } else {
    return engine.locale('fame.5')
  }
  // return (character.knownByPopulation / game.characters.length).toPercentageString(2)
}

// 名声等于有多少个角色听说过你，是随着世界上的人数变化而动态变化的，取值：0 - 100
function getCharacterInfamyString(character) {
  let infamy = character.infamy
  if (infamy < 20) {
    return engine.locale('none')
  }
  else if (infamy >= 20 && infamy < 40) {
    return engine.locale('infamy.2')
  } else if (infamy < 60) {
    return engine.locale('infamy.3')
  } else if (infamy < 80) {
    return engine.locale('infamy.4')
  } else {
    return engine.locale('infamy.5')
  }
  // return character.knownByPopulation / game.characters.length * 100
}

function getCharacterMasterId(character) {
  if (character.relationships.masterIds.isNotEmpty) {
    return character.relationships.masterIds.last
  }
}

// TODO: 亲戚关系比较复杂，可能还要做家谱图才能理清楚
function getCharacterRelationshipOfTarget(character, target) {
  if (character.relationships.fatherId == target.id) {
    return 'father'
  }
  if (character.relationships.motherId == target.id) {
    return 'mother'
  }
  if (character.relationships.spouseId == target.id) {
    return target.isFemale ? 'wife' : 'husband'
  }
  if (character.relationships.siblingIds.contains(target.id)) {
    if (target.isFemale) {
      if (target.birthTimestamp > character.birthTimestamp) {
        return 'youngerSister'
      } else {
        return 'elderSister'
      }
    } else {
      if (target.birthTimestamp > character.birthTimestamp) {
        return 'youngerBrother'
      } else {
        return 'elderBrother'
      }
    }
  }
  if (character.relationships.childrenIds.contains(target.id)) {
    return target.isFemale ? 'daughter' : 'son'
  }
  if (character.relationships.friendIds.contains(target.id)) {
    return 'friend'
  }
  if (character.relationships.masterIds.contains(target.id)) {
    return target.isFemale ? 'femaleMaster' : 'master'
  }
  return 'none'
}

function updateCharacterRelationship(character, target) {
  let bond1 = character.bonds[target.id]
  assert(bond1 != null)
  bond1.relationship = getCharacterRelationshipOfTarget(character, target)
  let bond2 = target.bonds[character.id]
  assert(bond2 != null)
  bond2.relationship = getCharacterRelationshipOfTarget(target, character)
}

function getCharacterBondScoreOfTargetId(character, targetId) {
  if (character.bonds.containsKey[targetId]) {
    return character.bonds[targetId].score
  }
  return null
}

/// 容貌评价的计算公式
/// 每个角色自身有一个容貌值，这个数值代表大众眼中的评价
/// 每个角色都会有一个对特定容貌值的偏好
/// 本公式会利用这两个数值，计算某个角色对另一个角色的容貌的评价
/// charisma 是对方的容貌，0 <= charisma <= 100
/// favor 是该角色的偏好，0 <= favor <= 100
function _calculateCharismaScore({charisma: float, favor: float}) -> float {
  assert(0.0 <= charisma && charisma <= _kCharacterMax)
  if (favor != null) {
    assert(0.0 <= favor && favor <= _kCharacterMax)
  }
  if (charisma < ((favor + _kCharacterMax) / 2)) {
    return (-(charisma - favor) * (charisma - favor)) / 20 + _kCharacterMax
  } else {
    return (-(charisma - _kCharacterMax) * (charisma - _kCharacterMax)) / 20 + _kCharacterMax
  }
}

// 第一印象分
function _characterFirstMet(subject, target, [causeIncident, causeIncidentScore]) {
  assert(subject != null && target != null)
  assert(subject.isMain == true && target.isMain == true)
  let bond
  if (subject.bonds[target.id] != null) {
    // 虽然没见过，但如果以前就听说过的话
    bond = subject.bonds[target.id]
    if (bond.haveMet) return
  } else {
    // ++target.knownByPopulation // 第一次创建羁绊，target 的知名度增加
    bond = Bond(character: subject, target: target)
  }
  let metScore = 0
  metScore += _calculateCharismaScore(charisma: target.charisma, favor: subject.charismaFavor) ~/ 10
  if (target.organizationId != null) {
    // TODO: 敌对门派要减分
    metScore += target.organizationId == subject.organizationId ? 10 : 0
  }
  // TODO: 敌对国家要减分
  // TODO: 这两个挪到聊天互动之后再计算
  // bond.scoreOfSameNation = target.nationId == subject.nationId ? 5 : 0
  // bond.scoreOfSameBirthPlace = target.birthPlaceId == subject.birthPlaceId ? 10 : 0
  // score += target.familyName == subject.familyName ? 10: 0
  // TODO: 同名之谊?

  let incidentContent
  if (metScore < -_kCharacterImpressionCheckpoint) {
    incidentContent = engine.locale('characterFirstMeetHate', interpolations: [
      subject.name,
      target.name,
    ])
  } else if (metScore > _kCharacterImpressionCheckpoint) {
    incidentContent = engine.locale('characterFirstMeetLike', interpolations: [
      subject.name,
      target.name,
    ])
  } else {
    incidentContent = engine.locale('characterFirstMeetNormal', interpolations: [
      subject.name,
      target.name,
    ])
  }

  const metIncident = Incident(
    message: incidentContent,
    subjectId: subject.id, // 见面是一个单向事件
    isPrivate: true,
  )

  engine.debug('${subject.id} 对 ${target.id} 的第一印象 [${metScore}]')
  bond.score += metScore
  bond.haveMet = true
}

function characterFirstMet(subject, target, [causeIncident, causeIncidentScore]) {
  _characterFirstMet(subject, target, causeIncident, causeIncidentScore)
  _characterFirstMet(target, subject, causeIncident, causeIncidentScore)
}

function characterKnowIncident(character, incident, { witnessed }) {
  assert(character.isMain == true)
  // 不是major character直接跳过
  if (character?.known == null) {
    engine.warn('${character.name} is not a entity that can know incidents.')
    return
  }

  assert(character != null)
  assert(incident != null && incident.index != null)
  
  if (character.known.contains(incident.index)) {
    engine.warn('${entity.name} 已经知道了事件：[${incident.index}]，不能再次添加。')
    return
  }

  engine.debug('${character.name} 知道了事件 \'${incident.message}\'')
  character.known.add(incident.index)

  let score = calculateCharacterScoreOfIncident(character, incident)
  if (witnessed) {
    // 亲身经历者会放大原本的评价
    score = (score * 1.5).toInt()
  }
  const subject = game.characters[incident.subjectId]
  if (character.bonds.containsKey(incident.subjectId)) {
    const bond = character.bonds[incident.subjectId]
    bond.score += score
    // 评价发生了改变
    // if (oldScore < 0 && bond.score >= 0) {
    //   --subject.infamy
    // } else if (oldScore >= 0 && bond.score < 0) {
    //   ++subject.infamy
    // }
  } else {
    // 名声增加
    // ++subject.knownByPopulation
    Bond(character: character, target: subject, score: score)
    // if (score < 0) {
    //   ++subject.infamy
    // }
  }
  if (score != 0) {
    engine.debug('${character.name} 对 ${subject.name} 的好感度改变了 [${score}]')
  }
  
  // if (!character.bonds.containsKey(id)) {
  //   const object = game.characters[id]
  //   // 名声增加
  //   // ++object.knownByPopulation
  //   Bond(character: character, target: object, score: score)
  //   engine.debug('${character.id} 对 ${object.id} 的好感度改变了 [${score}]')
  // }
}

// function getSpiritRankTitle(spiritRank) {
//   return engine.locale('spiritRank${spiritRank}') + engine.locale('sorcerer')
// }
function removeCharacterHome(character) {
  if (!character.homeId) return
  const oldHomeLoc = world.locations[character.homeId]
  oldHomeLoc.sites.remove('${kLocationKindHome}_${character.id}')
  // oldHome.residingCharacterIds.remove(character.id)
  // let organization = oldHome.organizations[character.organizationId]
  // if (organizationData != null) {
  //   organizationData.characterIds.remove(character.id)
  // }
}

function setCharacterHome(character, location, {incurIncident = true}) {
  assert(character.isMain == true)
  if (character.homeId == location.id) {
    engine.warn('character ${character.name} already resides in location ${location.id}')
    return
  }
  if (character.homeId != null) {
    removeCharacterHome(character)
  }
  character.homeId = location.id
  let homeSiteId = '${kLocationKindHome}_${character.id}'
  Location(
    category: 'site',
    kind: kLocationKindHome,
    atLocation: location,
    ownerId: character.id,
  )
  let incidentContent
  incidentContent = engine.locale('characterSettle', interpolations: [
    character.name,
    location.name,
  ])
  if (incurIncident) {
    Incident(
      message: incidentContent,
      subjectId: character.id,
    )
  } else {
    engine.debug(incidentContent)
  }
}

function getCharacterWorldPosition(character) {
  return character.worldPosition
}

function setCharacterWorldPosition(character, left, top, {worldId}) {
  character.worldPosition = {
    left,
    top,
  }
  if (worldId != null) {
    character.worldId = worldId
  }
}

function addCharacter(character) {
  assert(character != null)
  character.isMain == true
  engine.debug('向当前世界添加新角色：${character.id}')
  game.characters[character.id] = character
}

function addCharacters(chars: List) {
  for (const char in chars) {
    addCharacter(char)
  }
}

/// 如果不传 ids，就返回所有的角色
function getCharacters([ids]) {
  if (ids?.isNotEmpty) {
    return game.characters.values.where( (char) => char.id in ids)
  } else {
    return game.characters.values
  }
}

function getCharactersOnWorldMap([ worldId ]) {
  worldId ??= world.id
  return game.characters.values.where((char) {
    if (char.worldId != worldId) return false
    if (char.worldPosition == null) return false
    if (char.locationId != null) return false
    return true
  })
}

function getCharactersByWorldMapPosition(left, top, [ worldId ]) {
  worldId ??= world?.id
  return game.characters.values.where((char) {
    if (char.worldId != worldId) return false
    if (char.worldPosition == null) return false
    if (char.worldPosition.left != left || char.worldPosition.top != top) return false
    if (char.locationId != null) return false
    return true
  })
}

function getCharactersByLocationId(locationId) {
  return game.characters.values.where((char) {
    if (char.locationId == null) return false
    if (char.locationId != locationId) return false
    return true
  })
}

function getCharactersByLocationAndSiteId(locationId, siteId) {
  return game.characters.values.where((char) {
    if (char.locationId == null) return false
    if (char.locationId != locationId || char.siteId != siteId) return false
    return true
  })
}

function getCharactersByHomeId(homeId) {
  return game.characters.values.where((char) {
    return (char.homeId == homeId)
  })
}

/// 如果不传 ids，就返回所有的角色
function getNpcs() {
  return game.characters.values.where( (char) => (char.id != game.heroId))
}

function getNpcsOnWorldMap([ worldId ]) {
  worldId ??= world?.id
  return game.characters.values.where((char) {
    if (char.id == game.heroId) return false
    if (char.worldId != worldId) return false
    if (char.worldPosition == null) return false
    if (char.locationId != null) return false
    return true
  })
}

function getNpcsByWorldMapPosition(left, top, [ worldId ]) {
  worldId ??= world?.id
  return game.characters.values.where((char) {
    if (char.id == game.heroId) return false
    if (char.worldId != worldId) return false
    if (char.worldPosition == null) return false
    if (char.worldPosition.left != left || char.worldPosition.top != top) return false
    if (char.locationId != null) return false
    return true
  })
}

function getNpcsByLocationId(locationId) {
  assert(locationId != null)
  return game.characters.values.where((char) {
    if (char.id == game.heroId) return false
    if (char.locationId != locationId) return false
    return true
  })
}

function getCharacterById(id: string) {
  return game.characters[id]
}

function getCharacterFlagsById(id: string) {
  return game.characters[id].flags
}

function removeCharacterById(id: string) {
  engine.warn('正在移除ID为 [${id}] 的角色。')
  // TODO: 角色相关的信息，例如门派首领，拥有的建筑等等需要一并清除才行
  delete game.characters[id]
}

function haveMet(subject, target) {
  const bond = subject.bonds[target.id]
  if (bond && bond.haveMet) {
    return true
  } else {
    return false
  }
}

function handleCharacterTalk(subject, target) {
  if (!haveMet(subject, target)) {
    characterFirstMet(subject, target)
  }
}

function characterSteal(character, item) {
  throw 'steal is not implemented yet'
}

/// 提升NPC的修为等级，NPC不会有天赋盘，所以这里不处理经验值和天赋点数等问题
function characterCultivationLevelUp(character, {level = 1, incurIncident = true }) {
  assert(level > 0)
  character.cultivationLevel += level

  const incidentContent = engine.locale('characterCultivationLevelUp', interpolations: [
    character.name,
    character.cultivationLevel,
  ])
  if (character.isMain && incurIncident) {
    Incident(
      message: incidentContent,
      subjectId: character.id,
      isPrivate: true,
    )
  }
  engine.debug(incidentContent)
  return character.cultivationLevel
}

/// 提升NPC的境界
/// 和玩家只能一级一级提升不同，NPC可以直接提升多个境界
function characterCultivationRankUp(character, {rank, incurIncident = true }) {
  if (character.cultivationRank >= kCultivationRankMax) {
    engine.warn('角色已经达到最高境界，无法再提升。')
    return character.cultivationRank
  }

  if (rank != null) {
    assert(rank > character.cultivationRank)
    character.cultivationRank += rank
  } else {
    ++character.cultivationRank
  }

  if (character.cultivationRank > kCultivationRankMax) {
    character.cultivationRank = kCultivationRankMax
  }

  const incidentContent = engine.locale('characterCultivationRankUp', interpolations: [
    character.name,
    getCultivationRankName(character),
  ])
  if (character.isMain && incurIncident) {
    Incident(
      message: incidentContent,
      subjectId: character.id,
      isPrivate: true,
    )
  }
  engine.debug(incidentContent)

  return character.cultivationRank
}
