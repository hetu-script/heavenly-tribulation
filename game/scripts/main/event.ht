import 'game.ht'

/// 加载到本次游戏的事件处理模块。
/// module {
///   // 第一层key是世界名字，每个世界有自己的一套逻辑
///   worldName1: {
///     // 第二层是事件名字
///     onNewGame: () {
///       engine.info('[${this.id}]: 新游戏事件回调函数')
///     }
///   }
/// }

/// 将自定义时间处理函数绑定到module对象上，
/// 因为函数不会被序列化，因此每次启动游戏都会执行一次绑定
/// 此时模组元数据尚未加载
function addEventHandlers({moduleId, worldId, handlers}) {
  let module = {}
  if (worldId != null) {
    engine.info('为模组 [${moduleId}] 在世界 [${worldId}] 上添加事件处理...')
    module[worldId] = {}
    Object.assign(module[worldId], handlers)
  } else {
    engine.info('为模组 [${moduleId}] 添加通用事件处理...')
    module = handlers
  }
  if (game.modules[moduleId] == null){
    game.modules[moduleId] = {}
  }
  Object.assign(game.modules[moduleId], module)
}

/// 触发 mod 的回调函数
/// 游戏自己的逻辑不用这个
/// 回调函数需要在游戏开始时就读取，不要动态添加
/// 因为函数无法保存，因此一旦读档，回调就会消失
/// 事件处理函数将会收到两个参数
/// 第一个参数module是模组数据，可以保存一些flag之类
/// 第二个是回调本身的一些传入参数，例如执行时的一些情况等等

function onWorldEvent(eventId: string, ...args) async {
  for (const module in game.modules.values) {
    let callback = null
    if (module.contains(world.id)) {
      callback = module[world.id][eventId]
    }
    // callback 可能是 null
    if(callback is function) {
      engine.info('执行模组 [${module.id}] 在世界 [${world.id}] 上的事件处理函数 [${eventId}]')
      await callback.apply(module, ...args)
    }
  }
}

function onGameEvent(eventId: string, ...args) async {
  for (const module in game.modules.values) {
    let callback = module[eventId]
    // callback 可能是 null
    if(callback is function) {
      engine.info('执行模组 [${module.id}] 的通用事件处理函数 [${eventId}]')
      await callback.apply(module, ...args)
    }
  }
}

/// 这里的事件和模组，剧情无关
const mainEvents = {
  onEnterCultivation: async () {
    if (hero.exp > 0) return
    await dialog.localeLines([
      'intro.cultivation1',
      'intro.cultivation2',
    ])
  }
}

/// 这里的事件和模组，剧情无关
const mapEvents = {
  onNewGame: async () {
    WorldMap.lightUpAroundTile(hero.worldPosition.left, hero.worldPosition.top, hero.stats.lightRadius)
  }
}
