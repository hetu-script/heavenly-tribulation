import 'entity/entity.ht'
import 'lootbox.ht'

const kQuestDifficultyNormal = 'normal'
const kQuestDifficultyHard = 'hard'
const kQuestDifficultyExpert = 'expert'
const kQuestDifficultyMaster = 'master'
const kQuestDifficultyTorment = 'torment'
const kQuestDifficultyNightmare = 'nightmare'
const kQuestDifficultyPurgatory = 'purgatory'

const kQuestCategoryConquestMaze = 'conquestMaze' // 征讨盗贼营地
const kQuestCategoryArrest = 'arrest' // 抓捕
const kQuestCategoryTraining = 'training' // 演武
const kQuestCategoryRitual = 'ritual' // 法事
const kQuestCategoryCatering = 'catering' // 招待
const kQuestCategoryDelivery = 'delivery' // 运送人员或物品
const kQuestCategoryCraft = 'craft' // 定制

const kQuestDeliveryKindEscort = 'escort'
const kQuestDeliveryKindConvoy = 'convoy'

const kQuestConquestMazeKindKillBanditBoss = 'killBanditBoss'
const kQuestConquestMazeKindWipeBandits = 'wipeBandits'
const kQuestConquestMazeKindReturnHostage = 'returnHostage'
const kQuestConquestMazeKindReturnTreasure = 'returnTreasure'


const kQuestCatergoryVisitCharacter = 'character'
const kQuestCatergoryVisitTerrain = 'terrain'
const kQuestCatergoryVisitLocation = 'location'
const kQuestCatergoryVisitSite = 'site'
const kQuestCatergoryVisitZone = 'zone'
const kQuestCatergoryDefeat = 'defeat'
const kQuestCatergoryClearDungeon = 'clear'
const kQuestCatergoryCollect = 'collect'
const kQuestCatergoryAcquire = 'acquire'
const kQuestCatergoryDelivery = 'delivery'
const kQuestCatergoryEscort = 'escort'

struct Quest {
  constructor({
    id,
    name,
    publishCharacterId,
    stages: List,
  }) {
    assert(name != null)
    this.name = name

    this.id = id ?? crypto.randomUID(withTime: true)
    this.publishCharacterId = publishCharacterId

    assert(stages is List && stages.isNotEmpty)
    /// stages 是任务每个阶段的数据，以列表形式保存，具体内容如下：
    /// {
    ///   category,
    ///   objective,
    ///   expirationTimestamp,
    ///   description,
    /// }
    this.stages = stages
    
    // 结束不代表任务成功
    this.isFinished = false
    this.isSuccessed = false

    // 任务进度，默认就一定包含 index 为 0 的初始阶段
    this.progress = [ 0 ]
  }
}

function generateQuestById(questId, {publishCharacterId}) {
  assert(game.quests.containsKey(questId))
  final questData = game.quests[questId]
  final quest = Quest(
    id: questId,
    publishCharacterId: publishCharacterId,
    name: engine.locale(questData.name),
    stages: questData.stages.map((stageData) {
      return {
        category: stageData.category,
        objective: stageData.objective,
        expirationTimestamp: stageData.expirationTimestamp,
        description: engine.locale(stageData.description),
      }
    }).toList(),
  )
  return quest
}

// function generateQuestReward(difficulty) {
//   const reward = Lootbox()
//   return reward
// }

// // 尝试完成任务，如果成功返回 true，并扣除任务所要求提交的物品等
// function characterTrySubmitQuest(character, target, quest) -> bool {
//   if (quest.questEntitiesSubmit) {
//     for (const data in quest.questEntitiesSubmit) {
//       if (game.entityType == kEntityTypeCharacter || game.entityType == kEntityTypeNpc) {
//         if (!character.companions.containsKey(game.id)) return false
//       } else if (game.entityType == kEntityTypeItem) {
//         if (!character.inventory.containsKey(game.id)) {
//           return false
//         } else {
//           const item = character.inventory[game.id]
//           if (item.stackSize < game.count) {
//             return false
//           }
//         }
//       } else {
//         print(data)
//         engine.error('提交任务时发生错误，对象类型既不是人员也是物品：${game.entityType}')
//       }
//     }

//     for (const data in quest.questEntitiesSubmit) {
//       if (game.entityType == kEntityTypeCharacter || game.entityType == kEntityTypeNpc) {
//         const entity = character.companions[game.id]
//         characterDismissCompanion(character, entity)
//       } else if (game.entityType == kEntityTypeItem) {
//         give(character, target, game.id, count: game.count)
//       }
//     }
//   }
//   return true
// }

