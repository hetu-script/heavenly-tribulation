import '../world/tile/tilemap.ht'
import '../datetime.ht'
import '../player.ht'

export '../random.ht'

/// 游戏设置，和存档无关，属于载入存档或者开始新游戏之前的全局设置
let isDebugMode
let isNewGame

let game
// game.characters[game.heroId]
let hero

let universe
// universe[game.currentWorldId]
let world

let history
// history[game.currentWorldId]
let timeline

let ticksOfYear
let ticksOfMonth
let ticksOfDay
let year
let month
let day
let timeOfDay

/// 这个值仅在战斗场景中会被赋值，指向当前战斗的敌人
let enemy
/// 这个值仅在交易场景中会被赋值，指向当前交易的对象
let merchant
/// 用来在运行时绑定脚本模组的命名空间
/// 和game.mods不同，这里的内容不会被序列化
/// 只用来访问一些非事件性质的脚本函数
let mods = {}

function getMonthlyIdentifiedCards() {
  return game.playerMonthly.identifiedEnemyCards
}

function useIdentifyCard() {
  ++game.playerMonthly.identifiedEnemyCards
}

/// 用于限制玩家每个月的互动操作次数，月初会重置
struct MonthlyActions {
  constructor {
    // 战斗相关
    this.identifiedEnemyCards = 0 // 鉴定敌人卡牌数量

    // 对其他角色操作
    this.gifted = []
    this.attacked = []
    this.stolen = []

    // 婚姻关系的嫁娶和离婚
    this.proposed = []

    // 师徒关系的传授功法
    this.baishi = []
    this.shoutu = []
    this.consulted = []
    this.tutored = []

    // 组织的加入，招募和开除
    this.applied = []
    this.recruited = []

    // 对某个建筑操作
    this.worked = []
  }
}

struct GameData {
  constructor ({saveName}) {
    this.saveName = saveName
    this.isNewGame = true
    this.currentWorldId = null
    this.heroId = null
    this.timestamp = 0

    this.deceased = {}
    this.babies = {}
    this.characters = {}
    this.organizations = {}
    // 具有唯一性的物品，材料之类不在此列
    this.items = {}
    // 家族信息
    // key 是家族的 id，值是一个结构体数组
    // 值的key是人物的 id，值是 GenerationMember 数据，含角色的 generation 和 peer
    this.families = {}
    // 师徒传承信息
    // key 是师徒传承的 id，值是一个结构体数组
    // 值的 key 是人物的 id，值是 SectMember 数据，含角色的 generation 和 peer
    this.sects = {}

    // 游戏本身逻辑所用到的一些事件检查选项
    // 例如每个月是否进行了某个动作之类
    this.playerMonthly = MonthlyActions()

    // 本次游戏加载的 module，这里是纯数据，函数保存在另外的地方
    this.mods = {}
    this.itemPrototypes = {}
    this.battleCards = {}
    this.battleCardAffixes = {}
    this.passives = {}
    this.quests = {}
  }
}

/// 创建新游戏，重置所有状态，返回game
function createGame(saveName) {
  engine.debug('准备开始新游戏')
  game = GameData(saveName: saveName)
  calculateTimestamp()
  universe = {}
  history = {}

  hero = null
  world = null
  timeline = []
}

function resetPlayerMonthlyActivities() {
  game.playerMonthly = MonthlyActions()
}

function monthlyActionContains(actionId, targetId) {
  return game.playerMonthly[actionId].contains(targetId)
}

function getTimeData() {
  return {
    ticksOfYear: ticksOfYear,
    ticksOfMonth: ticksOfMonth,
    ticksOfDay: ticksOfDay,
    year: year,
    month: month,
    day: day,
    timeOfDay: timeOfDay,
  }
}

function getTicksOfDayName() {
  return engine.locale('timeOfDay${ticksOfDay}')
}

function calculateTimestamp() {
  ticksOfYear = (game.timestamp % kTicksPerYear) + 1
  ticksOfMonth = (game.timestamp % kTicksPerMonth) + 1
  ticksOfDay = (game.timestamp % kTicksPerDay) + 1
  year = toYear(game.timestamp) + 1
  month = toMonth(game.timestamp) + 1
  day = toDay(game.timestamp) + 1
  timeOfDay = getTicksOfDayName()
}

function getTicksTillNextDay() {
  if (ticksOfDay >= kTicksPerDay) {
    return kTicksPerDay
  } else {
    return kTicksPerDay - ticksOfDay
  }
}

function getTicksTillNextMonth() {
  if (ticksOfMonth >= kTicksPerMonth) {
    return kTicksPerMonth
  } else {
    return kTicksPerMonth - ticksOfMonth
  }
}

/// 载入游戏数据，返回game
function loadGameFromJsonData({
  gameData,
  universeData,
  historyData,
  // isEditorMode,
}) -> List {
  game = Object.fromJSON(gameData)
  game.isNewGame ??= true
  
  universe = Object.create(universeData)
  history = Object.create(historyData)
  
  assert(game.currentWorldId != null)
  // if (!isEditorMode) {
  //   assert(game.heroId != null)
  // }

  world = universe[game.currentWorldId]
  timeline = history[game.currentWorldId]
  assert(world != null)
  assert(timeline != null)
  
  engine.info('当前世界: [${world.id}]')

  if (game.heroId != null) {
    assert(game.characters.containsKey(game.heroId))
    hero = game.characters[game.heroId]
    engine.info('当前英雄: [${hero.name}]')
  }

  calculateTimestamp()
  engine.info('游戏时间: [${year}年${month}月${day}日${timeOfDay}]')
}

function addWorld(newWorld) {
  world = universe[newWorld.id] = newWorld
  timeline = history[newWorld.id] = []

  game.currentWorldId = newWorld.id
}

function switchWorld(worldId) {
  assert(universe.containsKey(worldId))
  world = universe[worldId]

  assert(history.containsKey(world.id))
  timeline = history[world.id]
  
  game.currentWorldId = world.id

  return world
}

function getMapComponents() {
  return world.components
}

/// 为地图创建显示组件，注意这里仅限非角色类装饰性数据
function createMapComponent(componentData, left, top) {
  assert(componentData.entityType == null)
  final component = Object.fromJSON(componentData)
  engine.info('添加显示组件：[${component.id}]')
  component.worldPosition = { left, top }
  world.components.add(component)
  return component
}

function removeMapComponentByPosition(left, top) {
  engine.info('移除显示组件，位于: [${left}, ${top}]')
  world.components.removeWhere((c) => c.worldPosition.left == left && c.worldPosition.top == top)
}

function removeMapComponentById(id) {
  engine.info('移除显示组件，id: [${id}]')
  world.components.removeWhere((c) => c.id == id)
}

function getGameJsonData() {
  return game.toJSON()
}

function getUniverseJsonData() {
  return universe.toJSON()
}

function getHistoryJsonData() {
  return history.toJSON()
}

function getTimestamp {
  return game.timestamp
}

function getHeroId() {
  return game.heroId
}

function setHeroId(id: string) {
  assert(game.characters.containsKey(id))
  if (hero != null) {
    game.playerMonthly = MonthlyActions()
  }

  hero = game.characters[id]

  Player.updateStats()
  engine.debug('设置当前玩家人物为 [${hero.id}]。')
  game.heroId = id
}

function setHeroWorldId(worldId) {
  hero.worldId = worldId
}

function getHeroHomeLocation({worldId}) {
  let atWorld = worldId != null ? universe[worldId] : world
  if (hero.homeLocationId) {
    assert(atWorld.locations.containsKey(hero.homeLocationId))
    return atWorld.locations[hero.homeLocationId]
  }
}

function getHeroHomeSite({worldId}) {
  let atWorld = worldId != null ? universe[worldId] : world
  if (hero.homeSiteId) {
    assert(atWorld.locations.containsKey(hero.homeSiteId))
    return atWorld.locations[hero.homeSiteId]
  }
}

function getHeroOrganization {
  if (hero.organizationId) {
    return game.organizations[hero.organizationId]
  } else {
    return null
  }
}

function getHeroLightedArea {
  return hero.stats.lightRadius
}

// function getHeroCultivationGenre {
//   return hero.cultivationGenre
// }

function getTerrainByIndex(index, {worldId}) {
  let atWorld = worldId != null ? universe[worldId] : world
  return world.terrains[index]
}

function getTerrainByWorldPosition(left, top, {worldId}) {
  let atWorld = worldId != null ? universe[worldId] : world
  return world.terrains[tilePos2Index(left, top, world.width)]
}

function getWorldIds {
  return universe.keys
}

function setCurrentWorldId(id) {
  engine.debug('设置当前世界为: [${id}]')
  game.currentWorldId = id
  world = universe[id]
  timeline = history[id]
}

function deleteWorldById(id) {
  assert(world.id != id)
  engine.warn('删除世界数据: [${id}]')
  universe.remove(id)
  history.remove(id)
}

function getCurrentWorldId {
  return game.currentWorldId
}

function getWorldSize({worldId}) {
  let atWorld = worldId != null ? universe[worldId] : world
  return {
    width: atWorld.width,
    height: atWorld.height,
  }
}

function getZones({worldId}) {
  let atWorld = worldId != null ? universe[worldId] : world
  return atWorld.zones.values
}

function getZoneById(id: string, {worldId}) {
  let atWorld = worldId != null ? universe[worldId] : world
  return atWorld.zones[id]
}

function addObject(object, {worldId}) {
  let atWorld = worldId != null ? universe[worldId] : world
  atWorld.objects[object.id] = object
}

function removeObjectById(id, {worldId}) {
  let atWorld = worldId != null ? universe[worldId] : world
  delete atWorld.objects[id]
}

function getObjects({worldId}) {
  let atWorld = worldId != null ? universe[worldId] : world
  return atWorld.objects.values
}

function getObjectById(id: string, {worldId}) {
  let atWorld = worldId != null ? universe[worldId] : world
  return atWorld.objects[id]
}

function hasObject(id: string, {worldId}) {
  let atWorld = worldId != null ? universe[worldId] : world
  return atWorld.objects[id] != null
}

function getNameFromId(id, [orElse = 'null']) {
  if (id != null) {
    return id.split('.').last
  } else {
    return engine.locale(orElse)
  }
}

async function onNewGame() {
  game.isNewGame = false
  await onWorldEvent('onNewGame')
}