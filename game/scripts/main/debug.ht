import 'game/data.ht'
import 'entity/character/character.ht'
import 'entity/item/item.ht'
import 'game/dialog.ht'
import 'world/tile/hexagonal_tile.ht'
import 'random.ht'

const kDebugEquipments = [
  'sword',
  'sabre',
  'staff',
  'dart',
]

namespace Debug {

  external function reloadGameData()

  external function reloadModules()

  function generateHero({rank = 0, level = 0}) {
    Character(
      id: 'hero',
      isFemale: false,
      level: level,
      rank: rank,
      availableSkillPoints: level,
    )
    setHeroId('hero')
  }

  function testItem([character]) {
    character ??= hero
    final item = Equipment(
      kind: kDebugEquipments.random,
      rank: character.rank,
    )
    entityAcquire(character, item)

    final cardPack1 = Cardpack(rank: character.rank)
    entityAcquire(character, cardPack1)
    final cardPack2 = Cardpack(rank: character.rank)
    entityAcquire(character, cardPack2)
    final cardPack3 = Cardpack(rank: character.rank)
    entityAcquire(character, cardPack3)

    final shardPack = Materialpack(kind: 'shard', amount: 5000)
    entityAcquire(character, shardPack)

    final moneyPack = Materialpack(kind: 'money', amount: 5000)
    entityAcquire(character, moneyPack)

    final scroll = createItemByPrototype('identify_scroll')
    entityAcquire(character, scroll)

    if (character == hero) {
      Game.promptNewItems([cardPack1, cardPack2, cardPack3, item, shardPack, moneyPack, scroll])
    }
  }

  function testQuest() {
    final quest1 = Player.acquireQuestById('mysticGirl')
    Player.progressQuestById(quest1.id, stage: 1)
    Player.progressQuestById(quest1.id, stage: 3)
    Game.promptNewQuest(quest1)
  }
 
  function getCurrentTerrain() {
    if (world == null) return
    if (hero == null) return
    const position = hero.worldPosition
    const terrainIndex = tilePos2Index(position.left, position.top, world.width)
    let terrain = world.terrains[terrainIndex]
    return terrain
  }

  function getCurrentLocation() {
    if (world == null) return
    if (hero == null) return
    const position = getHeroPosition()
    const terrainIndex = tilePos2Index(position.left, position.top, world.width)
    const terrain = world.terrains[terrainIndex]
    if (terrain.locationId) {
      const location = world.locations[terrain.locationId]
      return location
    }
  }

  function updateAllCaptions() {
    for (const tile in world.terrains) {
      if (tile.locationId) {
        assert(world.locations.containsKey(tile.locationId))
        const location = world.locations[tile.locationId]
        World.setTerrainCaption(tile.left, tile.top, location.name)
      } else if (tile.objectId) {
        World.setTerrainCaption(tile.left, tile.top, tile.objectId)
      }
    }
  }

  function debugDialog() {
    Dialog.pushLocales(
      'debug_dialog_content1',
      displayName: '凌初雪',
      icon: 'story/illustration/ling_chuxue_head.png',
      image: 'story/illustration/ling_chuxue.png'
    )
    Dialog.pushLocales(
      'debug_dialog_content2',
      displayName: '萧墨',
      icon: 'story/illustration/xiaomo_head.png',
      image: 'story/illustration/xiaomo.png'
    )
    Dialog.execute()
  }
  
  function testMerchant() {
    // setRandomSeed(1003)
    // resetGame()
    // const hero = Character()
    // acquireMoney(hero, 100)
    // setHeroId(hero.id)
    // const merchant = Character()
    // acquireMoney(merchant, 500)
    // acquire(merchant, Consumable.medicine(), count: 20)
    // acquire(merchant, Consumable.beverage(), count: 20)
    // dialog.merchant(merchant)
  }

  function skipStoryChapter0() {
    game.mods.story.flags = {
      checkPoint1: true,
      checkPoint2: true,
      checkPoint3: true,
      checkPoint4: true,
      checkPoint5: true,
    }

    Player.setTo(6, 2, direction: 'south')
  }
}