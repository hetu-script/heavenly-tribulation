import 'game.ht'
import 'entity/character/character.ht'
import 'entity/item/item.ht'
import 'dialog.ht'
import 'tile/hexagonal_tile.ht'
import 'random.ht'

namespace Debug {
  external function setFog(value: bool)

  external function reloadGameData()

  function generateHero() {
    final hero = Character(
      unconvertedExp: 1000000,
      isFemale: false,
      cultivationLevel: 10,
      cultivationRank: 1,
      availableSkillPoints: 10,
    )
    setHeroId(hero.id)
    return hero
  }

  function testCardpack() {
    assert(hero != null)
    for (var i in range(12)) {
      final cardPack = Cardpack(
        rank: hero.cultivationRank,
      )
      Player.acquire(cardPack)
    }
  }

  const kDebugEquipments = [
    'sword',
    'sabre',
    'staff',
    'dart',
  ]

  function testEquipment() {
    assert(hero != null)
    for (var i in range(12)) {
      final item = Equipment(
        kind: kDebugEquipments.random,
        rank: hero.cultivationRank,
      )
      Player.acquire(item)
    }
  }
 
  function getCurrentTerrain() {
    if (world == null) return
    if (hero == null) return
    const position = hero.worldPosition
    const terrainIndex = tilePos2Index(position.left, position.top, world.width)
    let terrain = world.terrains[terrainIndex]
    return terrain
  }

  function getCurrentLocation() {
    if (world == null) return
    if (hero == null) return
    const position = getHeroPosition()
    const terrainIndex = tilePos2Index(position.left, position.top, world.width)
    const terrain = world.terrains[terrainIndex]
    if (terrain.locationId) {
      const location = game.locations[terrain.locationId]
      return location
    }
  }

  function updateAllCaptions() {
    for (const tile in world.terrains) {
      if (tile.locationId) {
        const location = game.locations[tile.locationId]
        WorldMap.setTerrainCaption(tile.left, tile.top, location.name)
      } else if (tile.objectId) {
        WorldMap.setTerrainCaption(tile.left, tile.top, tile.objectId)
      }
    }
  }
  
  function testMerchant() {
    // setRandomSeed(1003)
    // resetGame()
    // const hero = Character()
    // acquireMoney(hero, 100)
    // setHeroId(hero.id)
    // const merchant = Character()
    // acquireMoney(merchant, 500)
    // acquire(merchant, Consumable.medicine(), count: 20)
    // acquire(merchant, Consumable.beverage(), count: 20)
    // dialog.merchant(merchant)
  }
}