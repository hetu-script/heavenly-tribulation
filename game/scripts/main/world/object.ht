import '../game.ht'

const kEntityTypeObject = 'object'

const kObjectPortal = 'portal'
const kObjectWorldPortal = 'worldPortal'

const kObjectCharacter = 'character'
const kObjectTreasureBox = 'treasureBox'

/// 地图上的对象，例如机关，宝箱，固定NPC等，但对象可能是隐藏的
/// {
///   id: 'id',
///   entityType: 'object',
///   category: 'custom',
///   isDiscovered: true,
///   useCustomInteraction: true,
///   blockHeroMove: true
/// }

struct ObjectPortal {
  constructor ({
    id,
    isDiscovered = true,
    useCustomInteraction = false,
    targetLeft,
    targetTop,
  }) {
    assert(id != null)
    this.id = id
    this.entityType = kEntityTypeObject
    this.category = kObjectPortal
    this.isDiscovered = isDiscovered
    this.useCustomInteraction = useCustomInteraction
    this.targetTilePosition = {
      left: targetLeft,
      top: targetTop,
    }

    world.objects[this.id] = this
  }
}

struct ObjectWorldPortal {
  constructor ({
    id,
    isDiscovered = true,
    useCustomInteraction = false,
    worldId,
    worldPositionLeft,
    worldPositionTop,
  }) {
    assert(id != null)
    this.id = id
    this.entityType = kEntityTypeObject
    this.category = kObjectWorldPortal
    this.isDiscovered = isDiscovered
    this.useCustomInteraction = useCustomInteraction
    this.worldId = worldId
    this.targetTilePosition = {
      left: targetLeft,
      top: targetTop,
    }

    world.objects[this.id] = this
  }
}

struct ObjectCharacter {
  constructor ({
    id,
    characterId,
  }) {
    assert(id != null)
    this.id = id
    this.entityType = kEntityTypeObject
    this.category = kObjectCharacter
    this.characterId = characterId

    world.objects[this.id] = this
  }
}

/// 宝箱内的物品
/// 分为四种：材料，原型道具，装备，卡包
/// category: ['material', 'prototype', 'equipment', 'cardpack']
/// items = [
///   {
///     category: 'material',
///     kind: 'money',
///     amount: 100,
///   },
///   {
///     category: 'prototype',
///     kind: 'jade',
///   },
///   {
///     category: 'equipment',
///     kind: 'sword',
///     rarity: 'basic',
///     rank: 0,
///     level: 0,
///   },
///   {
///     category: 'cardpack',
///     kind: 'punch',
///     genre: null,
///     rank: 0,
///   },
/// ]
struct ObjectTreasureBox {
  constructor ({
    id,
    isDiscovered = true,
    useCustomInteraction = false,
    items: List,
  }) {
    assert(id != null)
    this.id = id
    this.entityType = kEntityTypeObject
    this.category = kObjectTreasureBox
    this.isDiscovered = isDiscovered
    this.useCustomInteraction = useCustomInteraction
    world.objects[this.id] = this

    this.items = items
  }
}
