import 'module:main' as game

import 'l10n/l10n.ht'
import 'events/cave.ht'
import 'events/tutorial.ht'

// 这里的函数最终是绑定到游戏对象上执行
// 是运行时的命名空间，并不是这里的命名空间
// 因此可以直接使用 engine, game 等 global 上的 对象
const module = {
  meta: {
    id: 'tutorial',
    displayName: '教程模组',
    description: '包含了一些展示游戏基础操作的关卡。',
    supportedLocales: ['zh'],
    version: '0.0.1',
    flags: {
      chapter0: {},
      chapter1: {},
      chapter2: {},
      chapter3: {},
    }
  },
}

/// 这个函数只会执行一次
/// config是一个引擎传过来的JSON，包含游戏版本、所有MOD名等信息
/// 通常在这里将mod信息加载到游戏数据中
/// 以及将角色、据点等数据添加到主世界中
/// 可以在这里检查是否存在版本冲突或者和其他脚本的冲突
function init(config) {
  engine.debug('游戏脚本模块 [${module.meta.id}(ver-${module.meta.version})] 初始化...')

  game.addModule(module.meta)
}

const modName = '${module.meta.displayName}-${module.meta.id}-(${module.meta.version.major}.${module.meta.version.minor}.${module.meta.version.build})';

// main每次启动游戏都会执行
function main() {
  engine.debug('游戏脚本模块 [${module.meta.id}(ver-${module.meta.version})] 载入...')

  // 加载本地化字符串
  engine.loadLocaleDataFromJSON(localizations.toJSON())
  // 向世界添加事件回调函数
  // 每个世界的事件是分开的
  addEventHandlers(
    moduleId: module.meta.id,
    worldId: 'cave',
    handlers: cave,
  )
  addEventHandlers(
    moduleId: module.meta.id,
    worldId: 'tutorial',
    handlers: tutorial,
  )
}
