import '../../game/tile/hexagonal_tile.ht'
import '../../game/tile/tilemap.ht'

const kDefaultBlockWidth = 4
const kDefaultBlockHeight = 4

/// 3*3 的区块地图中，每个锚点所连接的路径
/// 链接所有九个锚点的路径一共有 12 个：
///
///     1-----2-----3
///     |     |     |
///     |     |     |
///     4-----5-----6
///     |     |     |
///     |     |     |
///     7-----8-----9
///
/// 为了保证唯一性，描述字符串一定是从左到右，从上到下
const kRoutesOfAnchorBySquare3 = {
  '1': ['1-2', '1-4'],
  '2': ['1-2', '2-5', '2-3'],
  '3': ['2-3', '3-6'],
  '4': ['1-4', '4-5', '4-7'],
  '5': ['2-5', '4-5', '5-6', '5-8'],
  '6': ['3-6', '5-6', '6-9'],
  '7': ['4-7', '7-8'],
  '8': ['7-8', '5-8', '8-9'],
  '9': ['6-9', '8-9'],
}

// 4*4 的区块地图中，每个锚点所连接的路径
// 链接所有九个锚点的路径一共有 12 个：
//
//     1------2------3------4
//     |      |      |      |
//     |      |      |      |
//     5------6------7------8
//     |      |      |      |
//     |      |      |      |
//     9-----10-----11-----12
//     |      |      |      |
//     |      |      |      |
//     13----14-----15-----16
// 

/// 根据路径的描述字符串生成路径，描述字符串必须是 1-2 的形式，其中1和2是锚点的index，可以是其他数字
function generateRouteByAnchor(achorDescription, anchors, map, { flag }) {
  const pos = achorDescription.split('-')
  assert(pos.length > 1)
  const start = integer.parse(pos.first)
  const end = integer.parse(pos.last)
  assert(start is integer && end is integer)
  assert(start < end)
  // print('generateRouteByAnchor', start, end)
  // print('generateRouteByAnchor', anchors[start], anchors[end])
  generateRouteByIndex(anchors[start].index, anchors[end].index, map, flag: flag)
}

/// 使用 A* 算法（calculateRoute），计算最短路径
/// 若是在地图生成时执行这个函数时，不需要考虑zone，因为不是用的真正的terrain来计算
function generateRouteByIndex(index1, index2, map, { flag }) {
  // print('generateRouteByIndex', index1, index2)

  const tile1 = index2TilePosition(index1, map.width)
  const tile2 = index2TilePosition(index2, map.width)
  // print('tile position', tile1.left, tile1.top, tile2.left, tile2.top)
  // print('generate route from ${tile1} to ${tile2}')
  const route = calculateRoute(tile1, tile2, map)
  // print(route)
  if (route && route.length > 1) {
    for (const index in route) {
      const terrain = map.terrains[index]
      terrain.isRoute = true
      if (flag != null) {
        terrain.flags[flag] = true
      }
    }
  } else {
    const terrain = map.terrains[index1]
    terrain.isRoute = true
    if (flag != null) {
      terrain.flags[flag] = true
    }
  }
}
