// import '../random.ht'
// import '../name/skill.ht'
// import '../entity/entity.ht'
// import '../common.ht'

function getCardRankUpProbability(rank) {
  if (rank == 0) return 1.0
  if (rank >= kCultivationRankMax) return 0.0
  return 0.7 * (1 - rank / kCultivationRankMax)
}

/// 创建一张功法战斗卡牌
/// genre 如果为 null，表示可以匹配任意词条
/// 如果为 'none', 表示只匹配没有 genre 要求的词条
struct BattleCard {
  constructor ({
    category, // 'attack', 'buff'
    affixId,
    kind, // 'sword',
    genre, // 'spellcraft', 'swordcraft', 'none'
    level,
    rank, // 境界决定了额外词条数量
    maxOutLevel = false, // 是否最大化等级
    maxRank,
    isIdentified = true,
    isScroll = false,
  }) {
    this.entityType = kEntityTypeBattleCard
    if (rank != null) {
      assert(rank >= 0 && rank <= kCultivationRankMax)
      this.rank = rank
    } else if (maxRank != null) {
      assert(maxRank >= 0 && maxRank <= kCultivationRankMax)
      if (maxRank == 0) {
        this.rank = 0
      } else {
        this.rank = random.nearInt(maxRank + 1)
      }
    } else {
      this.rank = 0
    }

    if (genre != null && genre != 'none' && this.rank == 0) {
      this.rank = 1
    }

    this.id = crypto.randomUID(withTime: true)
    this.isIdentified = isIdentified
    this.isScroll = isScroll

    this.tags = []

    // 注意：主词条数据的genre是字符串，但额外词条的genre是字符串数组
    let mainAffixes = game.battleCards.values.where( (affix) {
      if (affixId) {
        return affix.id == affixId
      } else {
        if (genre != null) {
          if (genre == 'none') {
            if (affix.genre != null) {
              return false
            }
          } else if (genre != affix.genre) {
            return false
          }
        }
        if (kind != null && affix.kind != kind) {
          return false
        }
        if (category != null && affix.category != category) {
          return false
        }
        if (affix.rank > this.rank) {
          return false
        }
        return true
      }
    })

    if (mainAffixes.isEmpty) {
      throw('Found no main affix for: id: ${affixId} genre: ${genre}, category: ${category}, kind: ${kind}, rank: ${rank}')
    }

    const mainAffix = Object.create(random.nextIterable(mainAffixes))

    this.affixes = [mainAffix]

    if (mainAffix.rank > this.rank) {
      this.rank = mainAffix.rank
    }
    this.name = generateSkillName(kind: mainAffix.kind)
    this.image = mainAffix.image
    this.genre = mainAffix.genre
    this.category = mainAffix.category
    this.kind = mainAffix.kind
    this.equipment = mainAffix.equipment
    this.requirement = mainAffix.requirement

    final minLevel = minLevelForRank(this.rank)
    final maxLevel = maxLevelForRank(this.rank)
    if (level == null) {
      if (maxOutLevel) {
        level = maxLevel
      } else {
        level = minLevel + random.distantInt(maxLevel - minLevel)
      }
    } else {
      level = level.clamp(Math.max(1, minLevel), maxLevel)
    }
    this.level = level
    
    _updateMainAffixValue(this)

    final affixUniqueIds = []
    if (mainAffix.uniqueId) {
      if (mainAffix.uniqueId is List) {
        affixUniqueIds.addAll(mainAffix.uniqueId)
      } else if (mainAffix.uniqueId is string) {
        affixUniqueIds.add(mainAffix.uniqueId)
      }
    }

    this.affixUniqueIds = affixUniqueIds

    _addExtraAffixes(this)

    _updateAffixUniqueIds(this)

    // _updateRequirementsOfCard(this)
    // _updateCardTags(this)
  }
}

function _getSupportAffixes(card) {
  let affixes = []
  for (final affix of game.battleCardAffixes) {
    assert(affix.uniqueId != null)
    assert(affix.category is List)
    if (affix.genre && affix.genre != card.genre) {
      continue
    }
    if (!affix.category.contains(card.category)) {
      continue
    }
    if (card.affixUniqueIds.contains(affix.uniqueId)) {
      continue
    }
    if (affix.rank > card.rank) {
      continue
    }
    affixes.add(affix)
  }

  if (affixes.isEmpty) {
    engine.warn('Found no support affixes for card: [genre: ${card.genre}, category: ${card.category}, kind: ${card.kind}, rank: ${card.rank}]')  
  }

  return affixes
}

// function calculateRequirementsOfCard(card) {
//   let requirement = {}

//   for (final affix in card.affixes) {
//     for (final key in affix.requirement.keys) {
//       if (!requirement.containsKey(key)) {
//         requirement[key] = 0
//       }
//       requirement[key] += affix.requirement[key].base + affix.requirement[key].increment * affix.level
//     }
//   }
//   return requirement
// }

function _checkRequirementForCard(character, card) {

}

function _updateMainAffixValue(card) {
  let mainAffix = card.affixes.first
  if (mainAffix.valueData is List) {
    if (mainAffix.maxLevel) {
      mainAffix.level = Math.min(card.level, mainAffix.maxLevel)
    } else {
      mainAffix.level = card.level
    }
    let values = []
    for (final valueData in mainAffix.valueData) {
      let valueLevel = valueData.maxLevel ? Math.min(valueData.maxLevel, mainAffix.level) : mainAffix.level
      final value = valueData.base + valueData.increment * valueLevel
      values.add(value.round())
    }
    // if (mainAffix.requirement && mainAffix.requirement.isNotEmpty) {
    //   for (final reqData in mainAffix.requirement.values) {
    //     final value = reqData.base + reqData.increment * mainAffix.level
    //     reqData.value = value.round()
    //   }
    // }
    mainAffix.value = values
  }
}

function _randomizeAffixLevel(card, affix) {
  if (affix.valueData is List) {
    if (affix.maxLevel) {
      let affixMaxLevel = Math.min(card.level, affix.maxLevel)
      affix.level = getRandomLevel(0, affixMaxLevel)
    } else {
      affix.level = getRandomLevel(0, card.level)
    }
    let values = []
    for (final valueData in affix.valueData) {
      let valueLevel = valueData.maxLevel ? Math.min(valueData.maxLevel, affix.level) : affix.level
      let value = valueData.base + valueData.increment * valueLevel
      values.add(value.round())
    }
    affix.value = values
  } else {
    // 对于没有 valueData 的词条，意味着是非数值词条，等级永远是 0
    affix.level = 0
  }
}

function _addAffixToCard(card, affix) {

  _randomizeAffixLevel(card, affix)

  card.affixes.add(affix)

  _updateAffixUniqueIds(card)
}

function _updateAffixUniqueIds(card) {
  card.affixUniqueIds = Set()
  // card.tags = Set()
  for (final affix in card.affixes) {
    if (affix.isMain) {
      if (affix.uniqueId is List) {
        card.affixUniqueIds.addAll(affix.uniqueId)
      } else if (affix.uniqueId is string) {
        card.affixUniqueIds.add(affix.uniqueId)
      }
    } else if (affix.uniqueId is string) {
      card.affixUniqueIds.add(affix.uniqueId)
    }
    // card.tags.addAll(affix.tags)
  }
}

function _addExtraAffixes(card) {
  let affixCountInfo = getMinMaxExtraAffixCount(card.rank)

  // 计算额外词条数量
  let extraAffixCount = affixCountInfo.minExtra
  if (affixCountInfo.maxExtra == 0) return
  if (extraAffixCount < affixCountInfo.maxExtra) {
    extraAffixCount += random.nextInt(affixCountInfo.maxExtra - extraAffixCount + 1)
  }
  
  for (var i = 0; i < extraAffixCount; ++i) {
    // 检索出所有符合条件的额外词条
    let supportAffixes = _getSupportAffixes(card)
    if (supportAffixes.isEmpty) {
      throw('Found no extra affix for: genre: ${card.genre}, category: ${card.category}, kind: ${card.kind}, rank: ${card.rank}')
    }

    let affix = Object.create(random.nextIterable(supportAffixes))

    _addAffixToCard(card, affix)
  }
}

// function identifyCard(card) {
//   if (card.isIdentified == true) {
//     return 'deckbuilding_identifyCard_warning'
//   }

//   card.isIdentified = true

//   // 这里显式返回空值表明成功执行
//   return null
// }

/// 增加一个额外词条
function addAffix(card) {
  let extraAffixCount = getMinMaxExtraAffixCount(card.rank)
  // 这里判断的时候要 +1 因为主词条本身也在 length 中
  if (card.affixes.length >= extraAffixCount.maxExtra + 1) {
    return engine.locale('deckbuilding_addAffix_warning')
  }

  let supportAffixes = _getSupportAffixes(card)

  if (supportAffixes.isEmpty) {
    throw('Found no support affixes for card: [id: ${card.id}, genre: ${card.genre}, category: ${card.category}, kind: ${card.kind}, rank: ${card.rank}]')  
  }
  
  final cost = getCardCraftOperationCost('addAffix', card)
  if (hero.exp < cost) {
    return engine.locale('hint_notEnoughExp')
  }
  hero.exp -= cost

  final affix = random.nextIterable(supportAffixes)

  _addAffixToCard(card, affix)

  // _updateRequirementsOfCard(card)
  // _updateCardTags(card)

  // 这里显式返回空值表明成功执行
  return null
}

/// 重置额外词条的数值
function rerollAffix(card) {
  final extraAffixes = card.affixes.where( (affix) {
    return (!affix.isMain && affix.valueData != null)
  })

  if (extraAffixes.isEmpty) {
    return engine.locale('deckbuilding_rerollAffix_warning')
  }
  
  final cost = getCardCraftOperationCost('rerollAffix', card)
  if (hero.exp < cost) {
    return engine.locale('hint_notEnoughExp')
  }
  hero.exp -= cost
  
  final minLevel = minLevelForRank(card.rank)
  final maxLevel = maxLevelForRank(card.rank)
  card.level = minLevel + random.distantInt(maxLevel - minLevel)
  
  _updateMainAffixValue(this)

  for (final affix in extraAffixes) {
    _randomizeAffixLevel(card, affix)
  }

  // 这里显式返回空值表明成功执行
  return null
}

/// 替换一个额外词条
function replaceAffix(card) {
  final extraAffixes = card.affixes.where( (affix) {
    return (!affix.isMain)
  })

  if (extraAffixes.isEmpty) {
    return engine.locale('deckbuilding_replaceAffix_warning')
  }

  final cost = getCardCraftOperationCost('replaceAffix', card)
  if (hero.exp < cost) {
    return engine.locale('hint_notEnoughExp')
  }
  hero.exp -= cost

  final affix = random.nextIterable(extraAffixes)

  card.affixes.remove(affix)
  
  addAffix(card)

  _updateAffixUniqueIds(card)

  // _updateRequirementsOfCard(card)
  // _updateCardTags(card)

  // 这里显式返回空值表明成功执行
  return null
}

/// 升级卡牌境界
function upgradeRank(card) {
  if (card.rank >= kCultivationRankMax) {
    return engine.locale('deckbuilding_upgradeRank_warning_maxRank')
  }
  
  final nextRankMinLevel = minLevelForRank(card.rank + 1)
  if (card.level < nextRankMinLevel) {
    return engine.locale('deckbuilding_upgradeRank_warning', interpolations: [nextRankMinLevel])
  }

  final cost = getCardCraftOperationCost('upgradeRank', card)
  if (hero.exp < cost) {
    return engine.locale('hint_notEnoughExp')
  }
  hero.exp -= cost

  final successRate = getCardRankUpProbability(card.rank)
  if (random.nextDouble() > successRate) {
    return 'deckbuilding_upgradeRank_failed_hint'
  }

  card.rank += 1
  // card.minLevel = minLevelForRank(card.rank)
  // card.maxLevel = maxLevelForRank(card.rank)

  final mainAffix = card.affixes.first

  if (card.level < card.minLevel) {
    card.level = card.minLevel
    mainAffix.level = card.level
    _updateMainAffixValue(card)
  }

  card.affixes = [mainAffix]

  _addExtraAffixes(card)
  
  _updateAffixUniqueIds(card)

  // _updateRequirementsOfCard(card)
  // _updateCardTags(card)

  // 这里显式返回空值表明成功执行
  return null
}

/// 分解卡牌，返回获得的灵气数量
function dismantle(card) {
  final price = Player.dismantleCard(card)

  final info = engine.locale('deckbuilding_dismantle_warning', interpolations:[
    card.name,
    price,
  ])
  
  return info
}

/// 升级卡牌等级
/// 这个操作并非打造操作，而是某些卡牌词条效果可能会用到
function upgradeCard(card) {
  card.level += 1
  _updateMainAffixValue(card)
}

/// 卡牌包是一种特殊物品，每个卡牌包包含3张牌
/// 其中一张必然是指定的类别、流派、境界和类型的卡牌
/// 另外两张则是随机卡牌，但境界不会超过卡包本身的境界
/// 如果 isBasic 为 true，则另外两张卡牌不会有装备和流派要求
struct Cardpack {
  constructor ({
    category,
    genre,
    rank,
    kind,
    isBasic = false,
  }) {
    assert(genre == null || genre == 'general' || Constants.cultivationGenres.contains(genre), genre)
    assert(rank == null || (rank >= 0 && rank <= kCultivationRankMax), rank)
    assert(kind == null || kBattleCardKind.contains(kind), kind)
    this.entityType = kEntityTypeItem
    this.createdTimestamp = game.timestamp
    this.category = kItemCategoryCardpack;

    rank ??= 0
    if (rank < 1 && genre != null) {
      rank = 1
    }
    this.rank = rank
    this.filter = {
      category: category,
      genre: genre,
      rank: rank,
      kind: kind,
      isBasic: isBasic,
    }

    this.id = crypto.randomUID(withTime: true)
    final rankString = engine.locale('cultivationRank_${rank}') + engine.locale('rank2')
    final genreString = genre != null ? engine.locale(genre) : ''
    final kindString = kind != null ? engine.locale('kind_${kind}') : ''
    this.name = rankString + genreString + kindString + engine.locale('cardpack')
    this.icon = 'item/cardpack.png'
    
    this.flavortext = engine.locale('cardpack_flavortext')
    this.rarity = kRankRarity[this.rank]

    // 秘籍无需鉴定
    this.isIdentified = true
    this.isUsable = true

    calculatePrice(this)
  }
}
