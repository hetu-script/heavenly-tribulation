// import 'data.ht'
// import '../colors.ht'
// import '../game/world.ht'
// import '../entity/entity.ht'
// import '../entity/quest.ht'
// import '../common.ht'

const kQuickThreshold = 10
const kSlowThreshold = 10
const kNimbleThreshold = 10
const kClumsyThreshold = 10

struct PassiveData {
  constructor ({
    id,
    priority,
    level,
    value,
    increment,
    description,
  }) {
    assert(id != null && description != null)
    this.id = id
    this.priority = priority ?? 0
    this.level = level ?? 0
    this.value = value
    this.increment = increment
    this.description = description
  }
}

namespace Player {

  function setTo(left, top, { worldId, direction } ) {
    assert(hero != null)
    if (worldId != null) {
      assert(universe.containsKey(worldId), worldId)
    }
    engine.info('player set to: [${left}, ${top}] of world [${worldId ?? world.id}] facing [${direction}]')
    setCharacterWorldPosition(hero, left, top, worldId: worldId)
    if (worldId == null || worldId == world.id) {
      if (direction != null) {
        assert(kOrthogonalDirections.contains(direction))
      }
      World.setCharacterTo(hero.id, left, top, direction: direction)
      World.moveCameraToMapPosition(left, top, animated: false)
      World.lightUpAroundTile(left, top, hero.stats.lightRadius)
      final terrain = getTerrainByWorldPosition(left, top)
      onWorldEvent('onAfterMove', terrain)
    }
  }
  
  function setHomeLocation(location, {incurIncident = true}) {
    assert(hero != null)
    setCharacterHome(hero, location, incurIncident: incurIncident)
  }

  function met(character) {
    assert(hero != null)
    return characterMet(hero, character)
  }

  function collect(materialId, { amount = 1, incurIncident = true }) {
    assert(hero != null)
    entityCollect(hero, materialId, amount: amount, incurIncident: incurIncident)
  }

  function exhaust(materialId, { amount = 1, incurIncident = true }) -> bool {
    assert(hero != null)
    return entityExhaust(hero, materialId, amount: amount, incurIncident: incurIncident)
  }

  /// 直接获取一个已经被创造出来的物品
  function acquire(item, { incurIncident = true }) {
    assert(hero != null)

    if (item.category == kItemCategoryExppack) {
      gainExp(item.stackSize)
    } else if (item.category == kItemCategoryMaterialPack) {
      collect(item.kind, amount: item.stackSize)
    } else {
      entityAcquire(hero, item, incurIncident: incurIncident)
    }
  }

  /// 从物品库中复制并获取一个物品
  function acquireById(itemId, { amount = 1, incurIncident = true }) {
    assert(hero != null)
    assert(amount > 0)
    return entityAcquireById(hero, itemId, amount: amount, incurIncident: incurIncident)
  }

  function lose(item, { incurIncident = true }) {
    assert(hero != null)
    entityLose(hero, item, incurIncident: incurIncident)
  }

  function acquireCard(card, { incurIncident = true }) {
    assert(hero != null)
    characterAcquireBattleCard(hero, card, incurIncident: incurIncident)
  }
  
  /// 分解卡牌，返回获得的灵光数量
  function dismantleCard(card, { incurIncident = true }) {
    assert(hero != null)
    assert(hero.cardLibrary.containsKey(card.id))

    final price = Game.getCardCraftOperationCost('dismantle', card)

    hero.unconvertedExp += price
    hero.cardLibrary.remove(card.id)

    for (final deck in hero.battleDecks) {
      if (deck.cards.contains(card.id)) {
        deck.cards.remove(card.id)
      }
    }
    
    let incidentContent
    incidentContent = engine.locale('entityDismantle', interpolations: [
      hero.name,
      card.name,
    ])
    if (incurIncident) {
      Incident(
        message: incidentContent,
        subjectId: hero.id,
        card: card,
        isPrivate: true,
      )
    } else {
      engine.debug(incidentContent)
    }

    return price
  }

  // 使用食物或者丹药
  // 返回值代表是否使用成功
  // 此函数允许对一个不在物品栏中的物品调用
  // function consume(item, { forcerCharacter }) {
  //   if (!item.isConsumable) {
  //     engine.warn('${item.id} 无法食用。')
  //     return false
  //   }

  //   if (hero.inventory.containsKey(item.id)) {
  //     if (item.rarity == kCommon) {
  //       if (item.stackSize > 1) {
  //         --item.stackSize
  //       } else {
  //         delete hero.inventory[item.id]
  //       }
  //     } else {
  //       delete hero.inventory[item.id]
  //     }
  //   }

  //   // if (item.stats.effects) {
  //   //   for (const effect of item.stats.effects) {
  //   //     // 即便是可以食用的物品，也可能包含一些非食用效果，因此这里要加以判断
  //   //     if (effect.category == kEffectCategoryConsume) {
  //   //       const effectHandler = getEffectHandlerById(effect.id)
  //   //       if (effectHandler is function) effectHandler(effect, character)
  //   //     }
  //   //   }
  //   // }

  //   let incidentContent
  //   switch (item.kind) {
  //     kEntityConsumableKindMedicine : {
  //       incidentContent = forcerCharacter ?
  //         engine.locale('characterTakeMedicineForced', interpolations: [
  //           forcerCharacter.name,
  //           character.name,
  //           item.name,
  //         ]) :
  //         engine.locale('characterTakeMedicine', interpolations: [
  //           character.name,
  //           item.name,
  //         ])
  //     }
  //     kEntityConsumableKindBeverage : {
  //       incidentContent = forcerCharacter ?
  //         engine.locale('characterDrinkBeverageForced', interpolations: [
  //           forcerCharacter.name,
  //           character.name,
  //           item.name,
  //         ]) :
  //         engine.locale('characterDrinkBeverage', interpolations: [
  //           character.name,
  //           item.name,
  //         ])
  //     }
  //     else : {
  //       incidentContent = forcerCharacter ?
  //         engine.locale('characterEatForced', interpolations: [
  //           forcerCharacter.name,
  //           character.name,
  //           item.name,
  //         ]) :
  //         engine.locale('characterEat', interpolations: [
  //           character.name,
  //           item.name,
  //         ])
  //     }
  //   }

  //   let subjectIds
  //   let objectIds
  //   if (forcerCharacter && forcerCharacter.isMain) {
  //     subjectIds = [forcerCharacter.id]
  //     if (character.isMain) {
  //       objectIds = [character.id]
  //     }
  //   } else if (character.isMain) {
  //     subjectIds = [character.id]
  //   }

  //   Incident(
  //     message: incidentContent,
  //     subjectIds: subjectIds,
  //     objectIds: objectIds,
  //     isPrivate: true,
  //   )
    
  //   return true
  // }

  // 法宝和技能都可以装备，只要类型符合
  // 返回值代表是否装备成功
  // 如果对一个不在物品栏中的物品调用，会先将其加入物品栏
  // 但并不会检查是否已经在别人的物品栏里了
  // 装备并非直接将物品数据保存在人物数据中，而是只保存物品id
  function equip(item, { index }) -> bool {
    assert(hero != null)

    return characterEquip(hero, item, index: index)
  }

  /// 检查是否装备了某种 category 的物品，返回装备的数量
  function equippedCategory(category) {
    assert(hero != null)
    
    return characterEquippedCategory(hero, category)
  }
  
  function firstEquippedCategory(category) {
    assert(hero != null)
    
    return characterfirstEquippedCategory(hero, category)
  }

  function equippedKind(kind) {
    assert(hero != null)
    
    return characterEquippedKind(hero, kind)
  }

  function firstEquippedKind(kind) {
    assert(hero != null)
    
    return characterFirstEquippedKind(hero, kind)
  }

  function unequip(item) {
    assert(hero != null)
    characterUnequip(hero, item)
  }
  
  /// 用于从一个宝箱中根据物品信息创造物品并获取
  function loot(box) {
    final items = getItemsFromLootbox(box)
    for (final item in items) {
      acquire(item)
    }
  }

  /// 用于从另一个角色身上批量拿取
  function lootEntity(entity, { incurIncident = true }) {
    assert(hero != null)
    for (const item of entity.inventory) {
      acquire(item, incurIncident: incurIncident)
    }
    for (const materialId in entity.materials.keys) {
      const amount = entity.materials[materialId]
      collect(materialId, amount: amount, incurIncident: incurIncident)
    }

    // 清空
    entity.inventory = {}
    entity.materials = MaterialStorage()
  }

  // 设定人物的随从，返回值是否成功
  // 随从并非直接将人物数据放在人物上，而是用下面的数据结构
  // {
  //   id,
  //   entityType,
  //   coordination,
  // }
  function accompany(companion, { incurIncident = true }) {
    assert(hero != null)
    if (hero.companions.contains(companion.id)) {
      engine.warn('${companion.name} 已经是随从了，无法再次添加。')
      return
    }
    hero.companions.add(companion.id)
    
    const incidentContent = engine.locale('characterAcquireCompanion', interpolations: [
      companion.name,
      hero.name,
    ])
    if (incurIncident) {
      Incident(
        message: incidentContent,
        subjectId: companion.id,
        objectId: hero.id,
        isPrivate: true,
      )
    } else {
      engine.debug(incidentContent)
    }
  }

  function dismiss(companion, { incurIncident = true }) {
    assert(hero != null)
    if (!hero.companions.contains(companion.id)) {
      engine.warn('${companion.name} 不是随从，无法解散。')
      return
    }

    hero.companions.remove(companion.id)
    
    const incidentContent = engine.locale('characterLoseCompanion', interpolations: [
      companion.name,
      hero.name,
    ])
    if (incurIncident) {
      Incident(
        message: incidentContent,
        subjectId: companion.id,
        objectId: hero.id,
        isPrivate: true,
      )
    }
    engine.debug(incidentContent)
  }

  function getCompanions() {
    return hero.companions
  }

  function levelUp({ incurIncident = true }) {
    assert(hero != null)
    final levelMax = maxLevelForRank(hero.rank)
    if (hero.level >= levelMax) {
      engine.warn('角色已达到游戏允许的最高等级，无法再提升！等级：[${hero.level}], 当前境界：[${hero.rank}]')
      return
    }
    if (hero.level >= kCurrentVersionCultivationLevelMax) {
      engine.warn('角色已达到版本允许的最高等级，无法再提升！等级：[${hero.level}], 当前境界：[${hero.rank}]')
      return
    }

    let expRequirement = expForLevel(hero.level)
    if (hero.exp < expRequirement) {
      engine.warn('没有足够的经验值用来提升等级！当前经验值：[${hero.exp}], 需要的经验值：[${expRequirement}]')
      return
    }

    hero.exp -= expRequirement
    ++hero.level
    hero.expForLevel = expForLevel(hero.level)
    hero.skillPoints += 1

    const incidentContent = engine.locale('characterCultivationLevelUp', interpolations: [
      hero.name,
      hero.level,
    ])
    if (incurIncident) {
      Incident(
        message: incidentContent,
        subjectId: hero.id,
        isPrivate: true,
      )
    } else {
      engine.debug(incidentContent)
    }

    return hero.level
  }

  function rankUp({ incurIncident = true }) {
    assert(hero != null)
    if (hero.rank >= kCurrentVersionCultivationRankMax ) {
      engine.error('角色已达到版本允许的最高境界，无法再提升！当前境界: [${hero.rank}]')
      return
    }

    if (hero.rank >= kCultivationRankMax ) {
      engine.error('角色已达到游戏允许的最高境界，无法再提升！当前境界: [${hero.rank}]')
      return
    }

    ++hero.rank

    const incidentContent = engine.locale('characterCultivationRankUp', interpolations: [
      hero.name,
      getCultivationRankName(hero),
    ])
    if (incurIncident) {
      Incident(
        message: incidentContent,
        subjectId: hero.id,
        isPrivate: true,
      )
    } else {
      engine.debug(incidentContent)
    }

    return hero.rank
  }

  function gainExp(value: integer) {
    assert(hero != null)
    assert(value > 0)

    characterGainExp(hero, value)

    // World.addHintText(
    //   '${engine.locale('exp')} + ${value}',
    //   hero.worldPosition.left,
    //   hero.worldPosition.top,
    //   Colors.blue,
    // )
  }

  function gainPassive(dataId, {level = 1}) {
    assert(hero != null)
    characterSetPassive(hero, dataId, level: level)
  }

  function refundPassive(dataId, {level = 1}) {
    assert(hero != null)
    characterSetPassive(hero, dataId, level: -level)
  }

  function hasPassive(dataId) {
    assert(hero != null)
    return hero.passives[dataId]
  }

  function calculateStats({rejuvenate = false}) {
    assert(hero != null)
    characterCalculateStats(hero, rejuvenate: rejuvenate)
  }

  function setLife(amount) {
    assert(hero != null)
    setCharacterLife(hero, amount)
  }

  function restoreLife(count) {
    assert(hero != null)
    characterRestoreLife(hero, count)
  }

  function rejuvenate() {
    assert(hero != null)
    characterRejuvenate(hero)
  }

  function acquireQuestById(questId, { setAsActive = false, incurIncident = true }) {
    assert(hero != null)
    final quest = generateQuestById(questId)

    if (hero.quests.containsKey(quest.id)) {
      engine.error('任务 [${quest.id}] 已经存在，不能再次接受！')
      return
    }
    hero.quests[quest.id] = quest
    if (setAsActive) {
      hero.activeQuestId = quest.id
    }
    
    const incidentContent = engine.locale(
      'characterAcceptQuest',
      interpolations: [ hero.name, quest.title ],
    )
    if (incurIncident) {
      Incident(
        message: incidentContent,
        subjectId: hero.id,
      )
    } else {
      engine.debug(incidentContent)
    }

    return quest
  }

  function setActiveQuest(quest) {
    assert(hero != null)
    assert(hero.quests.containsKey(quest.id))
    hero.activeQuestId = quest.id
  }

  function getActiveQuest() {
    assert(hero != null)
    assert(hero.quests.containsKey(hero.activeQuestId))
    return hero.quests[hero.activeQuestId]
  }

  /// 推动任务进度
  /// 这里不处理任务的成功和失败
  function progressQuestById(questId, { stage,  incurIncident = true }) {
    assert(hero != null)
    final quest = hero.quests[questId]
    assert(quest != null)
    if (quest.isFinished) {
      engine.error('任务 [${quest.id}] 已经完成，不能再推进进度！')
      return
    }
    assert(quest.sequence.length > 0)
    stage ??= quest.stage + 1
    assert(stage > quest.stage)
    assert(!quest.sequence.contains(stage))
    
    quest.sequence.add(stage)
    quest.stage = stage

    if (quest.endings.contains(stage)) {
      quest.isFinished = true
      
      if (hero.activeQuestId == quest.id) {
        hero.activeQuestId = null
      }
      let incidentContent = engine.locale(
        'characterQuestFinished',
        interpolations: [ hero.name, quest.title ],
      )
      if (incurIncident) {
        Incident(
          message: incidentContent,
          subjectId: hero.id,
        )
      }
    } else {
      let incidentContent = engine.locale(
        'characterQuestProgressed',
        interpolations: [ hero.name, quest.title ],
      )
      if (incurIncident) {
        Incident(
          message: incidentContent,
          subjectId: hero.id,
        )
      }
    }
    engine.debug('任务「${quest.title}」进度：${quest.stage}')
  }
}
