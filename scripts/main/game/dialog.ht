// import '../entity/character/character.ht'
// import 'data.ht'
import '../util.ht'

/// 加载到本次游戏的对话资源
let gDialogs = {}

namespace Dialog {

  // 对应 GameDialogContent 的接口，这种对话框会以模态的形式显示在游戏界面上

  // 对应 GameDialogState 的接口，不会阻断浮窗和装备栏等其他UI
  
  /// 执行对话，当执行结束时，所有场景、角色和对话数据都会被清理
  external async function execute()
  
  external function _pushDialog(dialogData, {image})

  external function pushImage(image: string, { offsetX: float = 0.0, offsetY: float = 0.0})

  external function popImage({image: string})

  external function pushBackground(image: string, {isFadeIn: bool = false})

  external function popBackground({image: string, isFadeOut: bool = false})

  external function popAllBackgrounds()

  external function pushTask(task: function, {flagId: string})

  /// 这个函数会解析参数并最终生成显示用的名字、头像、插画和对话内容
  /// 此函数不能是async的
  function pushLocales(localeKeys, {
    character,
    characterId,
    isHero: bool,
    displayNameId,
    displayName,
    hideName: bool,
    icon,
    hideIcon: bool,
    image,
    hideImage: bool,
    interpolations,
  }) -> Future {
    character ??= isHero ? hero : game.characters[characterId]
    icon ??= hideIcon ? null : character?.icon
    image ??= hideImage ? null : character?.illustration
    
    if (isHero) {
      displayName ??= hideName ? '???' : engine.locale('me')
    } else {
      if (displayName == null) {
        if (displayNameId != null) {
          displayName = engine.locale(displayNameId)
        } else {
          if (character != null) {
            let heroHaveMetChar = haveMet(hero, character)
            if (hideName || !heroHaveMetChar) {
              if (character.titleId != null) {
                displayName = engine.locale(character.titleId)
              } else {
                displayName = '???'
              }
            } else {
              displayName = character.name
            }
          }
        }
      }
    }
    
    let strings
    if (localeKeys is List) {
      assert(localeKeys.isNotEmpty)
      strings = localeKeys.map( (key) => engine.locale(key, interpolations: interpolations) ).toList()
    } else if (localeKeys is string) {
      strings = [engine.locale(localeKeys, interpolations: interpolations)]
    } else if (lines is List) {
      assert(lines is List && lines.isNotEmpty)
      strings = lines.map( (line) => interpolate(line, interpolations) ).toList()
    } else {
      assert(lines is string)
      strings = [interpolate(line, interpolations)]
    }
    let lines = []
    for (const message in strings) {
      const splits = message.split('\n')
      for (final split in splits) {
        final trim = split.trim()
        if (trim.isNotEmpty) {
          lines.add(trim)
        }
      }
    }

    return _pushDialog({
      displayName: displayName,
      icon: icon,
      image: image,
      lines: lines,
    })
  }

  /// selection 对话框的 data 数据结构：
  /// {
  ///   id: 'taskId',
  ///   selections: {
  ///     selectKey1: 'localedText1',
  ///     selectKey2: 'localedText3',
  ///     ...
  ///   } 
  /// }
  external function pushSelection(selectionsData)

  // 虽然返回值是future，但这个函数不能设为 async，否则会打乱Dialog的执行顺序
  function pushLocalesSelection(id, locales: List) {
    final selections = {}
    for (final key in locales) {
      selections[key] = engine.locale(key)
    }
    return pushSelection({ id: id, selections: selections })
  }

  external function checkSelected(selectionsValue)
}
