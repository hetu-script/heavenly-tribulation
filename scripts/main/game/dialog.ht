import '../util.ht'

namespace dialog {

  // 对应 GameDialogContent 的接口，这种对话框会以模态的形式显示在游戏界面上

  // 对应 GameDialogState 的接口，不会阻断浮窗和装备栏等其他UI
  
  /// 执行对话，当执行结束时，所有场景、角色和对话数据都会被清理
  external async function execute()
  
  external function _pushDialog(dialogData)

  external function pushImage(image: string, { offsetX: float = 0.0, offsetY: float = 0.0})

  external function popImage({image: string})

  external function popAllImages()

  external function pushBackground(image: string, {isFadeIn: bool = false})

  external function popBackground({image: string, isFadeOut: bool = false})

  external function popAllBackgrounds()

  external function pushTask(task: function, {flagId: string})

  /// 这个函数会解析参数并最终生成显示用的名字、头像、插画和对话内容
  /// 此函数不能是async的
  external function pushDialog(localeKeys, {
    character,
    characterId,
    npc,
    npcId,
    isHero: bool,
    nameId,
    name,
    hideName: bool,
    icon,
    hideIcon: bool,
    illustration,
    hideIllustration: bool,
    interpolations,
  });

  /// selection 对话框的 data 数据结构：
  /// {
  ///   id: 'taskId',
  ///   selections: {
  ///     selectKey1: 'localeKey1', // 可以只有一个单独的文本
  ///     selectKey2: { text: 'localeKey2', description: 'localeKey3' }, // 也可以是文本加一个描述文本
  ///     ...
  ///   } 
  /// }
  /// 虽然返回值是future，但这个函数不能设为 async，否则会打乱Dialog的执行顺序
  /// locales 可以是一个字符串列表，也可以是一个 Map<String, String>，
  external function pushSelection(id, locales)

  external function pushSelectionRaw(selectionData)

  external function checkSelected(selectionsValue)

  function pushAll(lines) {
    for (final line in lines) {
      if (line.localeId) {
        pushDialog(line.localeId,
          characterId: line.characterId,
          character: line.character,
          isHero: line.isHero,
          nameId: line.nameId,
          name: line.name,
          icon: line.icon,
          illustration: line.illustration,
          hideName: line.hideName,
          hideIcon: line.hideIcon,
          hideImage: line.hideImage,
          interpolations: line.interpolations,
        )
      } else if (line.image) {
        if (line.action == 'pop') {
          popImage(image: line.image)
        } else if (line.action == 'popAll') {
          popAllImages()
        } else {
          pushImage(line.image, offsetX: line.offsetX, offsetY: line.offsetY)
        }
      } else if (line.background) {
        if (line.action == 'pop') {
          popBackground(image: line.background, isFadeOut: line.isFadeOut)
        } else if (line.action == 'popAll') {
          popAllBackgrounds()
        } else {
          pushBackground(line.background, isFadeIn: line.isFadeIn)
        }
      } else if (line.task) {
        assert(line.task is function)
        pushTask(line.task, flagId: line.flagId)
      } else if (line.selection) {
        pushSelection(line.selection)
      } else {
        engine.error('dialog.pushLines: unrecognized line game. ${line}')
      }
    }
  }
}
