export 'cardgame/battle_character.ht'
export 'cardgame/card.ht'
export 'cardgame/card_script.ht'
export 'cardgame/status_script.ht'
export 'entity/character/character.ht'
export 'entity/character/battle_entity.ht'
export 'entity/character/npc.ht'
export 'entity/item/item.ht'
export 'entity/item/consumable.ht'
export 'entity/item/material.ht'
export 'entity/location/location.ht'
export 'entity/organization/organization.ht'
export 'entity/entity.ht'
export 'entity/quest.ht'
export 'event/event.ht'
export 'game/constants.ht'
export 'game/data.ht'
export 'game/dialog.ht'
export 'game/game.ht'
export 'game/logic.ht'
export 'game/player.ht'
export 'game/world.ht'
export 'name/name.ht'
export 'world/tile/hexagonal_tile.ht'
export 'world/tile/tilemap.ht'
export 'world/dungeon.ht'
export 'world/generation_algorithm.ht'
export 'world/object.ht'
export 'world/world.ht'
export 'colors.ht'
export 'common.ht'
export 'datetime.ht'
export 'debug.ht'
export 'incident.ht'
export 'random.ht'
export 'util.ht'

import 'event/game.ht' as gameEvents
import 'event/dungeon.ht' as dungeonEvents
import 'event/cultivation_trial.ht' as cultivationTrialEvents

// 这里的数据会被添加到game.mods上，并序列化为字符串进入存档
// 在游戏每次运行时，会重新将函数绑定到这个对象上
const meta = {
  id: 'main',
  name: '《天道奇劫》核心脚本',
  description: '《天道奇劫》核心脚本',
  supportedLocales: ['zh'],
  version: '0.0.1',
  priority: 0,
  flags: {}
}

/// Run every time game starts
function main() {
  engine.debug('游戏脚本模块 [${meta.id}(ver-${meta.version})] 绑定事件处理函数...')

  addEventHandlers(
    moduleId: meta.id,
    namespace: gameEvents,
  )

  addEventHandlers(
    moduleId: meta.id,
    worldId: 'dungeon_1',
    namespace: dungeonEvents,
  )

  addEventHandlers(
    moduleId: meta.id,
    worldId: 'cultivation_trial_1',
    namespace: cultivationTrialEvents,
  )
}

/// Initialize the core script module.
/// Only run once when a new game is created
function init({
  itemsData,
  craftablesData,
  battleCardsData,
  battleCardAffixesData,
  passivesData,
  mapsData,
}) {
  engine.debug('游戏脚本模块 [${meta.id}(ver-${meta.version})] 初始化...')

  // 清空游戏上的已有数据
  game.mods = {}
  game.prototypes = {}
  game.craftables = {}
  game.battleCards = {}
  game.battleCardAffixes = {}
  game.passives = {}
  game.quests = {}

  // 重新载入数据
  addModMetaData(meta)
  addPrototypeItemsData(itemsData)
  addCraftableItemsData(craftablesData)
  addBattleCardsData(battleCardsData)
  addBattleCardAffixesData(battleCardAffixesData)
  addPassivesData(passivesData)
  addMapsData(mapsData)
}

function addModMetaData(mod) {
  assert(mod.id != null)
  // assert(game.mods.containsKey(mod.id))
  // game.mods[mod.id] ??= {}
  // Object.assign(game.mods[mod.id], mod)
  game.mods[mod.id] = mod
  engine.debug('载入模组元信息 [${mod.id}(ver-${mod.version})]')
}

/// 向 game.prototypes 中添加数据
function addPrototypeItemsData(itemsData) {
  for (let item of itemsData) {
    if (game.prototypes.containsKey(item.prototypeId)) {
      engine.warn('预定义物品数据 id 冲突：[${item.prototypeId}]')
    }
    game.prototypes[item.prototypeId] = item
  }
  engine.debug('载入预定义物品：[${itemsData.length}]')
}

/// 向 game.craftables 中添加数据
function addCraftableItemsData(craftablesData) {
  for (let craftable of craftablesData) {
    if (game.craftables.containsKey(craftable.id)) {
      engine.warn('打造数据 id 冲突：[${craftable.id}]')
    }
    game.craftables[craftable.id] = craftable
  }
  engine.debug('载入打造数据：[${craftablesData.length}]')
}

/// 向 game.battleCards 中添加数据
function addBattleCardsData(cardsData) {
  for (let card of cardsData) {
    if (game.battleCards.containsKey(card.id)) {
      engine.warn('战斗卡牌主词条数据 id 冲突：[${card.id}]')
    }
    game.battleCards[card.id] = card
  }
  engine.debug('载入战斗卡牌主词条：[${cardsData.length}]')
}

/// 向 game.battleCardAffixes 中添加数据
function addBattleCardAffixesData(affixesData) {
  for (let affix of affixesData) {
    if (game.battleCardAffixes.containsKey(affix.id)) {
      engine.warn('战斗卡牌额外词条数据 id 冲突：[${affix.id}]')
    }
    game.battleCardAffixes[affix.id] = affix
  }
  engine.debug('载入战斗卡牌额外词条：[${affixesData.length}]')
}

/// 向 game.passives 中添加数据
function addPassivesData(passivesData) {
  for (let skill of passivesData) {
    if (game.passives.containsKey(skill.id)) {
      engine.warn('被动技能词条数据 id 冲突：[${skill.id}]')
    }
    game.passives[skill.id] = skill
  }
  engine.debug('载入被动技能词条：[${passivesData.length}]')
}

/// 向 game.quests 中添加数据
/// game.quests中保存的是任务原型数据
/// 实际创建任务时会重新创建，并填入本地化字符串等
function addQuestsData(questsData) {
  for (let quest of questsData) {
    if (game.quests.containsKey(quest.id)) {
      engine.warn('任务数据 id 冲突：[${quest.id}]')
    }
    game.quests[quest.id] = quest
  }
  engine.debug('载入剧情日志数据：[${questsData.length}]')
}

/// 向 universe 中添加数据
function addMapsData(mapsData) {
  for (final map of mapsData) {
    if (universe.containsKey(map.id)) {
      engine.warn('地图数据 id 冲突：[${map.id}]')
    }
    universe[map.id] = Object.create(map)
    // history[map.id] = []
  }
  engine.debug('载入预定义地图：[${mapsData.length}]')
}
