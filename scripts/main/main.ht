export 'cardgame/battle_character.ht'
export 'cardgame/card.ht'
export 'cardgame/card_script.ht'
export 'cardgame/status_script.ht'
export 'entity/character/character.ht'
export 'entity/character/battle_entity.ht'
export 'entity/character/npc.ht'
export 'entity/item/item.ht'
export 'entity/item/consumable.ht'
export 'entity/item/material.ht'
export 'entity/location/location.ht'
export 'entity/organization/organization.ht'
export 'entity/journal.ht'
export 'entity/quest.ht'
export 'event/common.ht'
export 'event/event.ht'
export 'game/common.ht'
export 'game/constants.ht'
export 'game/dialog.ht'
export 'game/game.ht'
export 'game/logic.ht'
export 'game/player.ht'
export 'game/world.ht'
export 'name/name.ht'
export 'world/tile/hexagonal_tile.ht'
export 'world/tile/tilemap.ht'
export 'world/dungeon.ht'
export 'world/generation_algorithm.ht'
export 'world/object.ht'
export 'world/world.ht'
export 'colors.ht'
export 'datetime.ht'
export 'debug.ht'
export 'incident.ht'
export 'random.ht'
export 'util.ht'

import 'event/game.ht' as gameEvents
import 'event/sandbox.ht' as sandboxEvents
import 'event/dungeon.ht' as dungeonEvents
import 'event/cultivation_trial.ht' as cultivationTrialEvents

// 这里的数据会被添加到game.mods上，并序列化为字符串进入存档
// 在游戏每次运行时，会重新将函数绑定到这个对象上
const meta = {
  id: 'main',
  name: '《天道奇劫》核心脚本',
  description: '《天道奇劫》核心脚本',
  supportedLocales: ['zh'],
  version: '0.0.1',
  priority: 0,
  flags: {}
}

/// Run every time game starts
function main() {
  engine.debug('游戏脚本模块 [${meta.id}(ver-${meta.version})] 绑定事件处理函数...')

  addEventHandlers(
    moduleId: meta.id,
    namespace: gameEvents,
  )

  addEventHandlers(
    moduleId: meta.id,
    worldId: 'sandboxWorld',
    namespace: sandboxEvents,
  )

  addEventHandlers(
    moduleId: meta.id,
    worldId: 'dungeon_1',
    namespace: dungeonEvents,
  )

  addEventHandlers(
    moduleId: meta.id,
    worldId: 'cultivation_trial_1',
    namespace: cultivationTrialEvents,
  )
}

/// Initialize the core script module.
/// Only run once when a new game is created
function init({
  mapsData,
  battleCardsData,
  battleCardAffixesData,
  itemsData,
  craftablesData,
  passivesData,
  journalsData,
  questsData,
}) {
  engine.debug('游戏脚本模块 [${meta.id}(ver-${meta.version})] 初始化...')

  // 重新载入模组数据
  game.mods = {}
  game.battleCards = {}
  game.battleCardAffixes = {}
  game.items = {}
  game.craftables = {}
  game.passives = {}
  game.journals = {}
  game.quests = {}

  addModMetaData(meta)
  
  addMapsData(mapsData)

  addGameData(battleCardsData, 'battleCards', engine.locale('gameDataCard'))
  addGameData(battleCardAffixesData, 'battleCardAffixes', engine.locale('gameDataCardAffix'))
  addGameData(itemsData, 'items', engine.locale('gameDataItem'))
  addGameData(craftablesData, 'craftables', engine.locale('gameDataCraftable'))
  addGameData(passivesData, 'passives', engine.locale('gameDataPassive'))
  addGameData(journalsData, 'journals', engine.locale('gameDataJournal'))
  addGameData(questsData, 'quests', engine.locale('gameDataQuest'))
}

function addModMetaData(mod) {
  assert(mod?.id != null)
  // assert(game.mods.containsKey(mod.id))
  // game.mods[mod.id] ??= {}
  // Object.assign(game.mods[mod.id], mod)
  game.mods[mod.id] = mod
  engine.debug('载入模组元信息 [${mod.id}(ver-${mod.version})]')
}

/// 向 universe 中添加数据
function addMapsData(mapsData) {
  for (final map of mapsData) {
    if (universe.containsKey(map.id)) {
      engine.warn('地图数据 id 冲突：[${map.id}]，将会被覆盖')
    }
    universe[map.id] = Object.create(map)
    // history[map.id] = []
  }
  engine.debug('载入预定义地图：[${mapsData.length}]')
}

/// 向 game 中添加数据
function addGameData(gameData, directory, name) {
  for (let item of gameData) {
    final dir = game[directory]
    assert(dir != null, 'game.${directory} 不存在')
    if (dir.containsKey(item.id)) {
      engine.warn('${name}数据 id 冲突：[${item.id}]，将会被覆盖')
    }
    dir[item.id] = item
  }
  engine.debug('载入预定义${name}：[${gameData.length}]')
}
