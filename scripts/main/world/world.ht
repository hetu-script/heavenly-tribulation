import 'tile/common.ht'

export { createSandboxWorld } from 'sandbox.ht'

/// 获得当前地图的区域上色信息
function getCurrentWorldZoneColors {
  const colors = []
  const zoneColors = Map()
  const cityColors = Map()
  const organizationColors = Map()
  for (const tile in world.terrains) {
    if (tile.zoneId) {
      const zone = world.zones[tile.zoneId]
      assert(zone != null, 'zoneId: ${tile.zoneId} not found')
      zoneColors[tile.index] = zone.color
    }
    if (tile.cityId) {
      const city = game.locations[tile.cityId]
      cityColors[tile.index] = city.color
    }
    if (tile.nationId) {
      const organization = game.organizations[tile.nationId]
      organizationColors[tile.index] = organization.color
    }
  }
  colors.add(zoneColors)
  colors.add(cityColors)
  colors.add(organizationColors)

  return colors
}

struct TileMapTerrain {
  constructor ({
    left,
    top,
    index,
    mapWidth,
    spriteIndex,
  }) {
    this.index = index
    if (left != null && top != null) {
      Object.assign(this, 
        Tile(
          left, top,
          index: index,
          mapWidth: mapWidth
        )
      )
    }
    if (spriteIndex != null) {
      this.spriteIndex = spriteIndex
    }
    this.overlaySprite = {}
    this.kind = kTerrainKindVoid
    this.flags = {}
    // 地形互动
    this.montylyActivities = {
      explored: [],
      gathered: [],
      woodcutted: [],
      mined: [],
      hunted: [],
      fished: [],
    }
  }
}

function createBlankWorld({
    id = 'main',
    name,
    isMain,
    terrainSpriteSheet = 'tilemap/fantasyhextiles_v3_borderless.png',
    width,
    height,
    useCustomLogic = false,
  }) {
  assert(width is integer && width > 0)
  assert(height is integer && height > 0)

  let newWorld = TileMap(
    id: id,
    name: name,
    isMain: isMain,
    width: width,
    height: height,
    terrainSpriteSheet: terrainSpriteSheet,
  )

  newWorld.useCustomLogic = useCustomLogic

  addWorld(newWorld)

  for (const j in range(height)) {
    for (const i in range(width)) {
      let spriteIndex
      if (y > 0 && y < height - 1 && x > 0 && x < width - 1) {
        // 边界地块为 void
        spriteIndex = kSpriteWater
      }
      newWorld.terrains.add(
        TileMapTerrain(
          left: i + 1,
          top: j + 1,
          index: tilePos2Index(i + 1, j + 1, width),
          spriteIndex: spriteIndex,
        )
      )
    }
  }

  return newWorld
}

function getTileNeighbors(left, top, {terrainKinds = []}) {
  return getMapTileNeighbors(left, top, world: world, terrainKinds: terrainKinds)
}

function expandCurrentWorldBySize(width, height, [direction = 'bottomRight']) {
  assert(width >= 0 && height >= 0)

  switch (direction) {
    'topLeft': {
      throw 'expand toward `topLeft` is not supported yet!'
    }
    'topCenter': {
      throw 'expand toward `topCenter` is not supported yet!'
      // let topTerrains = []
      // for (let j in range(height)) {
      //   for (let i in range(width + world.width)) {
      //     topTerrains.add(TileMapTerrain())
      //   }
      // }
      // world.terrains.insertAll(0, topTerrains)
      
      // let leftOffset = width ~/ 2
      // for (let j in range(world.height)) {
      //   let leftTerrains = []
      //   let rightTerrains = []
      //   for (let i in range(width)) {
      //     if (i < leftOffset) {
      //       leftTerrains.add(TileMapTerrain())
      //     } else {
      //       rightTerrains.add(TileMapTerrain())
      //     }
      //   }
      //   world.terrains.insertAll(topTerrains.length + j * (width + world.width), leftTerrains)
      //   world.terrains.insertAll(topTerrains.length + (j + 1) * (leftTerrains.length + world.width)
      //                            + j * (rightTerrains.length), rightTerrains)
      // }
    }
    'topRight': {
      throw 'expand toward `topRight` is not supported yet!'
    }
    'centerLeft': {
      throw 'expand toward `centerLeft` is not supported yet!'
    }
    'center': {
      throw 'expand toward `center` is not supported yet!'
      // let leftOffset = width ~/ 2
      // let topOffset = height ~/ 2
      // let rightOffset = width - leftOffset
      // let bottomOffset = height - topOffset

      // // print('leftOffset: ${leftOffset}, topOffset: ${topOffset}, rightOffset: ${rightOffset}, bottomOffset: ${bottomOffset}')

      // let topTerrains = []
      // for (let j in range(topOffset)) {
      //   for (let i in range(width + world.width)) {
      //     topTerrains.add(TileMapTerrain())
      //   }
      // }
      // world.terrains.insertAll(0, topTerrains)

      // for (let j in range(world.height)) {
      //   // print('adding row ${j}')
      //   let leftTerrains = []
      //   let rightTerrains = []
      //   for (let i in range(width)) {
      //     if (i < leftOffset) {
      //       leftTerrains.add(TileMapTerrain())
      //     } else {
      //       rightTerrains.add(TileMapTerrain())
      //     }
      //   }
      //   // print('leftTerrains: ${leftTerrains.length}, rightTerrains: ${rightTerrains.length}')
      //   world.terrains.insertAll(topTerrains.length + j * (width + world.width), leftTerrains)
      //   world.terrains.insertAll(topTerrains.length + (j + 1) * (leftTerrains.length + world.width)
      //                            + j * (rightTerrains.length), rightTerrains)
      // }

      // for (let j in range(bottomOffset)) {
      //   for (let i in range(width + world.width)) {
      //     world.terrains.add(TileMapTerrain())
      //   }
      // }
    }
    'centerRight': {
      throw 'expand toward `centerRight` is not supported yet!'
    }
    'bottomLeft': {
      throw 'expand toward `bottomLeft` is not supported yet!'
    }
    'bottomCenter': {
      throw 'expand toward `bottomCenter` is not supported yet!'
    }
    'bottomRight': {
      for (let j in range(world.height)) {
        let row = []
        for (let i in range(width)) {
          row.add(TileMapTerrain())
        }
        world.terrains.insertAll((j + 1) * world.width + j * width, row)
      }

      for (let j in range(height)) {
        for (let i in range(world.width + width)) {
          world.terrains.add(TileMapTerrain())
        }
      }
    }
  }

  world.width += width
  world.height += height

  correctTerrainIndexAndPosition()
}

function correctTerrainIndexAndPosition() {
  for (let i in range(world.terrains.length)) {
    let terrain = world.terrains[i]
    let tilePosition = index2TilePosition(i, world.width)
    Object.assign(terrain, Tile(tilePosition.left, tilePosition.top, index: i))
  }
  engine.debug('corrected terrain indexes and tile position!')
}
