// import 'tilemap.ht'

struct Tile {
  constructor (left, top, {index, mapWidth}) {
    assert(left != null && top != null)
    if (index) {
      this.index = index
    } else if (mapWidth) {
      this.index = tilePos2Index(left, top, mapWidth)
    }
    this.left = left
    this.top = top
  }
}

// 计算 orthogonal tile 的方向
function getDirection(start: {}, end: {}) {
  assert(start.left != end.left || start.top != end.top)
  if (end.left == start.left) {
    if (end.top < start.top) {
      return 'north'
    } else {
      return 'south'
    }
  } else if (end.left > start.left) {
    if (end.top == start.top) {
      return 'east'
    } else if (end.top < start.top) {
      return 'northEast'
    } else {
      return 'southEast'
    }
  } else {
    if (end.top == start.top) {
      return 'west'
    } else if (end.top < start.top) {
      return 'northWest'
    } else {
      return 'southWest'
    }
  }
}

// manhattan 距离算法
function getTileDistance(start, end) {
  const result = (end.left - start.left).abs() + (end.top - start.top).abs()
  // print('getTileDistance: ${start}, ${end}, result: ${result}')
  return result
}

/// 获取相邻并且在地图范围内的格子
/// 返回一个Map，index 是 1-8 (边和角)
/// 每个编号对应一个固定位置的相邻地块，如果值为 null 表示这个位置没有符合要求的相邻地块
/// 对于方格tile，邻居顺序是上(1)右(2)下(3)左(4)左上(5)右上(6)右下(7)左下(8)
/// 如果 [terrainKinds] 不为 空，则只会返回指定 kind 属性范围的格子
function getMapTileNeighbors(left: integer, top: integer, map, { terrainKinds = [], includeDiagonal = false }) {
  const neighbors = {}

  function addNeighbor(neighborIndex, tileIndex) {
    if (tileIndex < 0 || tileIndex >= map.terrains.length) return
    final tile = map.terrains[tileIndex]
    if (terrainKinds.isEmpty || tile.kind in terrainKinds) {
      neighbors[neighborIndex] = tile
    }
  }

  // 上面
  addNeighbor(1, tilePos2Index(left, top - 1, map.width))
  // 右边
  addNeighbor(2, tilePos2Index(left + 1, top, map.width))
  // 下面
  addNeighbor(3, tilePos2Index(left, top + 1, map.width))
  // 左边
  addNeighbor(4, tilePos2Index(left - 1, top, map.width))
  if (includeDiagonal) {
    // 左上
    addNeighbor(5, tilePos2Index(left - 1, top - 1, map.width))
    // 右上
    addNeighbor(6, tilePos2Index(left + 1, top - 1, map.width))
    // 右下
    addNeighbor(7, tilePos2Index(left + 1, top + 1, map.width))
    // 左下
    addNeighbor(8, tilePos2Index(left - 1, top + 1, map.width))
  }
  return neighbors
}
