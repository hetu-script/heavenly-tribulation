
const _kBasicDungeonRoomMax = 5
const _kDungeonRoomMax = 13

struct DungeonFlags {
  constructor ({
    rank,
    initialRoom = true,
    isBasic = false,
  }) {
    rank ??= 0
    rank = rank.clamp(0, kCultivationRankMax - 1)
    this.rank = rank
    this.level = 0
    if (isBasic) {
      this.levelMax = 0
    } else {
      this.levelMax = rank * 2 + 1
    }
    this.minEnemyLevel = minLevelForRank(rank)
    this.isBasic = isBasic
    this.room = initialRoom ? 0 : 1
    this.roomMax = isBasic ? _kBasicDungeonRoomMax : _kDungeonRoomMax
    this.buildCompleted = false
    this.battleResult = null
    this.selectedPortal = null
  }
}

function resetDungeon({
  rank,
  initialRoom = true,
  isBasic = false,
}) {
  game.flags.dungeon = DungeonFlags(
    rank: rank,
    initialRoom: initialRoom,
    isBasic: isBasic,
  )
}

struct TrialFlags {
  constructor ({
    name,
    difficulty,
    organizationId,
    npcId,
  }) {
    this.name = name ?? engine.locale('cultivation_trial')
    this.difficulty = difficulty ?? 0
    this.organizationId = organizationId
    this.npcId = npcId

    this.introCompleted = false
    this.buildCompleted = false
    this.room = 0
    this.roomMax = 3
  }
}

function resetTrial({
    name,
    difficulty,
    organizationId,
    npcId,
}) {
  game.flags.trial = TrialFlags(
    name: name,
    difficulty: difficulty,
    organizationId: organizationId,
    npcId: npcId,
  )
}

function addOverlaySprite(tilePosition, overlaySprite) {
  final tile = getTerrainByWorldPosition(tilePosition.left, tilePosition.top)
  tile.overlaySprite = overlaySprite
  World.updateTerrainOverlaySprite(tilePosition.left, tilePosition.top)
}

function addSwitch(tilePosition, {
    objectId,
    hoverContent,
    isOn = false,
    useCustomLogic = false,
  }) {
  final tile = getTerrainByWorldPosition(tilePosition.left, tilePosition.top)
  tile.isNonEnterable = true
  tile.overlaySprite = {
    sprite: isOn ? 'object/switchOn.png' : 'object/switchOff.png',
  }
  final object = ObjectSwitch(
    id: objectId,
    hoverContent: hoverContent,
    isOn: isOn,
    useCustomLogic: useCustomLogic,
  )
  tile.objectId = object.id
  World.updateTerrainData(tilePosition.left, tilePosition.top, updateOverlaySprite: true)
}

function addPortal(tilePosition, {
    objectId,
    targetTilePosition,
    useCustomLogic,
    hoverContent,
  }) {
  final tile = getTerrainByWorldPosition(tilePosition.left, tilePosition.top)
  tile.overlaySprite = {
    sprite: 'object/dungeonStoneGate.png',
    animation: {
      path: 'object/animation/portal.png',
    },
  }
  final object = ObjectPortal(
    id: objectId,
    useCustomLogic: useCustomLogic ?? false,
    targetLeft: targetTilePosition?.left,
    targetTop: targetTilePosition?.top,
    hoverContent: hoverContent,
  )
  tile.objectId = object.id
  World.updateTerrainData(tilePosition.left, tilePosition.top, updateOverlaySprite: true)
}

function addTreasureBox(tilePosition, {objectId, items}) {
  final tile = getTerrainByWorldPosition(tilePosition.left, tilePosition.top)
  tile.isNonEnterable = true
  tile.overlaySprite = {
      sprite: 'object/treasureBox.png',
  }
  final object = ObjectTreasureBox(
    id: objectId,
    items: items,
  )
  tile.objectId = object.id
  World.updateTerrainData(tilePosition.left, tilePosition.top, updateOverlaySprite: true)
}

function addSpiritWell(tilePosition, {rank, objectId}) {
  rank.clamp(1, kCultivationRankMax)
  final tile = getTerrainByWorldPosition(tilePosition.left, tilePosition.top)
  tile.isNonEnterable = true
  tile.overlaySprite = {
      sprite: 'object/oldWell.png',
  }
  final object = ObjectSpiritWell(
    id: objectId,
    rank: rank,
  )
  tile.objectId = object.id
  World.updateTerrainData(tilePosition.left, tilePosition.top, updateOverlaySprite: true)
}

function addMerchant(tilePosition, {
    objectId,
    name,
    sprite,
    hoverContent,
    useCustomLogic = false,
    rank,
    money = 100000,
    shard = 100000,
    category,
    itemCount = 5,
    useShard = false,
  }) {
  final tile = getTerrainByWorldPosition(tilePosition.left, tilePosition.top)
  tile.isNonEnterable = true
  tile.overlaySprite = {
    sprite: sprite ?? 'object/characterMan31.png',
  }
  final object = ObjectMerchant(
    id: objectId,
    name: name,
    hoverContent: hoverContent,
    useCustomLogic: useCustomLogic,
    rank: rank,
    money: money,
    shard: shard,
    category: category,
    itemCount: itemCount,
    useShard: useShard,
  )
  tile.objectId = object.id
  World.updateTerrainData(tilePosition.left, tilePosition.top, updateOverlaySprite: true)

  engine.debug('添加商人：${objectId} (category: ${category})')
}

function addEnemy(tilePosition, {
    objectId,
    level,
    rank,
    name,
    sprite,
    useCustomLogic = true,
    isElite = false,
  }) {
  final tile = getTerrainByWorldPosition(tilePosition.left, tilePosition.top)
  tile.isNonEnterable = true
  // tile.overlaySprite = {
  //   sprite: sprite ?? 'object/characterMan11.png',
  // }
  final object = ObjectEnemy(
    id: objectId,
    name: name,
    level: level,
    rank: rank,
    useCustomLogic: useCustomLogic,
    isElite: isElite,
    tilePosition: tilePosition,
  )
  tile.objectId = object.id
  World.updateTerrainData(tilePosition.left, tilePosition.top, updateOverlaySprite: true)

  engine.debug('添加敌人：${objectId} (rank: ${rank}, level: ${level})')
}

function addRestBed(tilePosition, {
  objectId = 'bloodCoffin',
  hoverContent,
}) {
  final tile = getTerrainByWorldPosition(tilePosition.left, tilePosition.top)
  tile.isNonEnterable = true
  tile.overlaySprite = {
    sprite: 'object/coffin.png',
  }
  final object = ObjectBed(
    id: objectId,
    hoverContent: hoverContent,
  )
  tile.objectId = object.id
  World.updateTerrainData(tilePosition.left, tilePosition.top, updateOverlaySprite: true)
}

function addExpArray(tilePosition, {
  objectId = 'exparray',
  hoverContent,
  collectableLight,
}) {
  final tile = getTerrainByWorldPosition(tilePosition.left, tilePosition.top)
  tile.isNonEnterable = true
  tile.overlaySprite = {
    sprite: 'object/statue.png',
  }
  final object = ObjectExpArray(
    id: objectId,
    hoverContent: hoverContent,
    collectableLight: collectableLight,
  )
  tile.objectId = object.id
  World.updateTerrainData(tilePosition.left, tilePosition.top, updateOverlaySprite: true)
}

function addCardLibraryStele(tilePosition, {
  objectId = 'cardlibrary',
  hoverContent,
}) {
  final tile = getTerrainByWorldPosition(tilePosition.left, tilePosition.top)
  tile.isNonEnterable = true
  tile.overlaySprite = {
    sprite: 'object/stoneStele.png',
    offsetY: -32.0,
    srcWidth: 32.0,
    srcHeight: 96.0,
  }
  final object = ObjectCardLibrary(
    id: objectId,
    hoverContent: hoverContent,
  )
  tile.objectId = object.id
  World.updateTerrainData(tilePosition.left, tilePosition.top, updateOverlaySprite: true)
}

function addAlchemyFurnace(tilePosition, {
  objectId = 'potionFurnace',
  hoverContent,
}) {
  final tile = getTerrainByWorldPosition(tilePosition.left, tilePosition.top)
  tile.isNonEnterable = true
  tile.overlaySprite = {
    sprite: 'object/furnace.png',
  }
  final object = ObjectAlchemyFurnace(
    id: objectId,
    hoverContent: hoverContent,
  )
  tile.objectId = object.id
  World.updateTerrainData(tilePosition.left, tilePosition.top, updateOverlaySprite: true)
}
