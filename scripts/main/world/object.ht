// import '../game/data.ht'

const kEntityTypeObject = 'object'

const kObjectPortal = 'portal'
const kObjectWorldPortal = 'worldPortal'
const kObjectCharacter = 'character'
const kObjectTreasureBox = 'treasureBox'
const kObjectCultivation = 'cultivation'
const kObjectLibraryCraft = 'libraryCraft'
const kObjectLibraryScroll = 'libraryScroll'

function discoverObject(object, terrain) {
  if (object.isDiscovered) return
  object.isDiscovered = true
  if (object.isHidden) {
    assert(object.overlaySprite != null)
    terrain.overlaySprite ??= {}
    Object.assign(terrain.overlaySprite, object.overlaySprite)
    // World.setWorldMapSprite(location.worldPosition.left, location.worldPosition.top, kSpriteLand)
    World.updateTerrainOverlaySprite(object.worldPosition.left, object.worldPosition.top)
  }
}

/// 地图上的对象，例如机关，宝箱，固定NPC等，但对象可能是隐藏的
/// {
///   id: 'id',
///   entityType: 'object',
///   category: 'custom',
///   isDiscovered: true,
///   useCustomLogic: true,
///   blockMove: true
/// }

struct ObjectPortal {
  constructor ({
    id,
    isDiscovered = true,
    useCustomLogic = false,
    targetLeft,
    targetTop,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.entityType = kEntityTypeObject
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic
    this.targetTilePosition = {
      left: targetLeft,
      top: targetTop,
    }

    world.objects[this.id] = this
  }
}

struct ObjectWorldPortal {
  constructor ({
    id,
    isDiscovered = true,
    useCustomLogic = false,
    worldId,
    worldPositionLeft,
    worldPositionTop,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.entityType = kEntityTypeObject
    this.category = kObjectWorldPortal
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic
    this.worldId = worldId
    this.targetTilePosition = {
      left: targetLeft,
      top: targetTop,
    }

    world.objects[this.id] = this
  }
}

struct ObjectCharacter {
  constructor ({
    id,
    characterId,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.entityType = kEntityTypeObject
    this.category = kObjectCharacter
    this.characterId = characterId

    world.objects[this.id] = this
  }
}

/// 创建一个宝箱对象，打开后可以获得物品
/// [items] 是物品信息列表，包含了用于生成实际物品的信息
/// items: [
///   {
///     type: 'material',
///     kind: 'money',
///     amount: 100,
///   },
///   {
///     type: 'prototype',
///     kind: 'shard',
///   },
///   {
///     type: 'equipment',
///     kind: 'sword',
///     rarity: 'basic',
///     rank: 0,
///     level: 0,
///   },
///   {
///     type: 'cardpack',
///     kind: 'punch',
///     genre: null,
///     rank: 0,
///   },
/// ]
struct ObjectTreasureBox {
  constructor ({
    id,
    isDiscovered = true,
    useCustomLogic = false,
    items: List,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.entityType = kEntityTypeObject
    this.category = kObjectTreasureBox
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic
    this.items = items

    world.objects[this.id] = this
  }
}

struct ObjectCultivation {
  constructor ({
    id,
    isDiscovered = true,
    useCustomLogic = false,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.entityType = kEntityTypeObject
    this.category = kObjectCultivation
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic

    world.objects[this.id] = this
  }
}

struct ObjectLibraryCraft {
  constructor ({
    id,
    isDiscovered = true,
    useCustomLogic = false,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.entityType = kEntityTypeObject
    this.category = kObjectLibraryCraft
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic

    world.objects[this.id] = this
  }
}

struct ObjectLibraryScroll {
  constructor ({
    id,
    isDiscovered = true,
    useCustomLogic = false,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.entityType = kEntityTypeObject
    this.category = kObjectLibraryScroll
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic

    world.objects[this.id] = this
  }
}

