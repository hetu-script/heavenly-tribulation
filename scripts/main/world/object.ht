
const kObjectCategoryPortal = 'portal'
const kObjectCategoryWorldPortal = 'worldPortal'
const kObjectCategoryDungeonEntrance = 'dungeonEntrance'
const kObjectCategoryCharacter = 'character'
const kObjectCategoryMerchant = 'merchant'
const kObjectCategoryEnemy = 'enemy'
const kObjectCategoryTreasureBox = 'treasureBox'
const kObjectCategorySpiritWell = 'spiritWell'
const kObjectCategoryBed = 'bed'
const kObjectCategorySwitch = 'switch'
const kObjectCategoryExpArray = 'exparray'
const kObjectCategoryCardLibrary = 'cardlibrary'
// const kObjectCategoryScrollTable = 'scrollTable'
const kObjectCategoryWorkbench = 'workbench'
const kObjectCategoryAlchemyFurnace = 'alchemyFurnace'

function discoverObject(object, terrain) {
  if (object.isDiscovered) return
  object.isDiscovered = true
  if (object.isHidden) {
    assert(object.overlaySprite != null)
    terrain.overlaySprite ??= {}
    Object.assign(terrain.overlaySprite, object.overlaySprite)
    // World.setWorldMapSprite(location.worldPosition.left, location.worldPosition.top, kSpriteLand)
    World.updateTerrainOverlaySprite(object.worldPosition.left, object.worldPosition.top)
  }
}

/// 地图上的对象，例如机关，宝箱，固定NPC等，但对象可能是隐藏的
/// {
///   id: 'id',
///   entityType: 'object',
///   category: 'custom',
///   isDiscovered: true,
///   useCustomLogic: true,
///   blockMove: true
/// }

struct ObjectWorldPortal {
  constructor ({
    id,
    name,
    hoverContent,
    isDiscovered = true,
    useCustomLogic = false,
    worldId,
    worldPositionLeft,
    worldPositionTop,
  }) {
    if (useCustomLogic) {
      assert(id != null)
      this.id = id
    } else {
      this.id = '${kObjectCategoryWorldPortal}_${crypto.randomUID(withTime: true)}'
    }
    this.name = name ?? engine.locale('worldPortal')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryWorldPortal
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic
    this.worldId = worldId
    this.targetTilePosition = {
      left: targetLeft,
      top: targetTop,
    }

    world.objects[this.id] = this
  }
}

struct ObjectPortal {
  constructor ({
    id,
    kind,
    name,
    hoverContent,
    isDiscovered = true,
    useCustomLogic = false,
    targetLeft,
    targetTop,
  }) {
    if (useCustomLogic) {
      assert(id != null)
      this.id = id
    } else {
      this.id = '${kObjectCategoryPortal}_${crypto.randomUID(withTime: true)}'
    }
    this.name = name ?? engine.locale('portal')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryPortal
    this.kind = kind
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic
    this.targetTilePosition = {
      left: targetLeft,
      top: targetTop,
    }

    world.objects[this.id] = this
  }
}

struct ObjectSwitch {
  constructor ({
    id,
    name,
    hoverContent,
    isDiscovered = true,
    useCustomLogic = false,
  }) {
    if (useCustomLogic) {
      assert(id != null)
      this.id = id
    } else {
      this.id = '${kObjectCategorySwitch}_${crypto.randomUID(withTime: true)}'
    }
    this.name = name ?? engine.locale('switch')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategorySwitch
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic

    world.objects[this.id] = this
  }
}

struct ObjectMerchant {
  constructor ({
    id,
    name,
    hoverContent,
    useCustomLogic = false,
    rank,
    money = 100000,
    shard = 100000,
    itemCategories,
    itemCount = 5,
    useShard = false,
    isMysterious = false,
    materialMode = false,
    priceFactor,
    filter,
  }) {
    if (useCustomLogic) {
      assert(id != null)
      this.id = id
    } else {
      this.id = '${kObjectCategoryMerchant}_${crypto.randomUID(withTime: true)}'
    }
    this.name = name ?? engine.locale('merchant')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryMerchant
    this.isDiscovered = true
    this.useCustomLogic = useCustomLogic
    this.useShard = useShard

    this.merchant = BattleEntity(
      id: this.id,
      name: this.name,
      rank: rank,
    )

    if (money > 0) {
      entityCollect(this.merchant, 'money', money)
    }
    if (shard > 0) {
      entityCollect(this.merchant, 'shard', shard)
    }

    if (itemCategories is! List) {
      itemCategories = [itemCategories]
    }

    for (var i in range(itemCount)) {
      final c = random.nextIterable(itemCategories)
      if(Constants.equipmentCategoryKinds.containsKey(c)) {
        final k = random.nextIterable(Constants.equipmentCategoryKinds[c])
        final item = Equipment(kind: k, rank: rank, isIdentified: !isMysterious)
        entityAcquire(this.merchant, item)
      } else if (c == kItemCategoryCardpack) {
        final item = Cardpack(rank: rank)
        entityAcquire(this.merchant, item)
      } else if (c == kItemCategoryPotion) {
        final item = Potion(rank: rank, isIdentified: !isMysterious)
        entityAcquire(this.merchant, item)
      } else if (kNormalPrototypeItems.contains(c)) {
        final item = createItemById(c)
        entityAcquire(this.merchant, item)
      } else if (kRankedPrototypeItems.contains(c)) {
        if (rank < 1) continue
        final item = createItemById(c, rank: rank)
        entityAcquire(this.merchant, item)
      }
      
      else {
        engine.warn('未知的商人商品类别：${c}')
      }
    }

    world.objects[this.id] = this
  }
}

struct ObjectEnemy {
  constructor ({
    id,
    name,
    hoverContent,
    useCustomLogic = false,
    level,
    rank,
    isElite = false,
    tilePosition,
  }) {
    if (useCustomLogic) {
      assert(id != null)
      this.id = id
    } else {
      this.id = '${kObjectCategoryEnemy}_${crypto.randomUID(withTime: true)}'
    }
    this.name = name ?? engine.locale('dungeonGuard')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryEnemy
    this.isDiscovered = true
    this.useCustomLogic = useCustomLogic

    enemy = BattleEntity(
      id: this.id,
      name: this.name,
      level: level,
      rank: rank,
    )
    this.battleEntity = enemy

    setCharacterWorldPosition(enemy, tilePosition.left, tilePosition.top, worldId: world.id)
    World.setCharacterToWorldPosition(enemy, tilePosition.left, tilePosition.top, direction: 'south')

    world.objects[this.id] = this
  }
}

struct ObjectBed {
  constructor ({
    id,
    name,
    hoverContent,
    useCustomLogic = false,
  }) {
    if (useCustomLogic) {
      assert(id != null)
      this.id = id
    } else {
      this.id = '${kObjectCategoryBed}_${crypto.randomUID(withTime: true)}'
    }
    this.id = id ?? crypto.randomUID(withTime: true)
    this.name = name ?? engine.locale('bed')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryBed
    this.isDiscovered = true
    this.useCustomLogic = useCustomLogic
    
    world.objects[this.id] = this
  }
}

/// 创建一个宝箱对象，打开后可以获得物品
/// [items] 是物品信息列表，包含了用于生成实际物品的信息
/// items: [
///   {
///     type: 'material',
///     kind: 'money',
///     amount: 100,
///   },
///   {
///     type: 'prototype',
///     kind: 'shard',
///   },
///   {
///     type: 'equipment',
///     kind: 'sword',
///     rarity: 'common',
///     rank: 0,
///     level: 0,
///   },
///   {
///     type: 'cardpack',
///     kind: 'punch',
///     genre: null,
///     rank: 0,
///   },
/// ]
struct ObjectTreasureBox {
  constructor ({
    id,
    name,
    hoverContent,
    isDiscovered = true,
    useCustomLogic = false,
    items: List,
  }) {
    if (useCustomLogic) {
      assert(id != null)
      this.id = id
    } else {
      this.id = '${kObjectCategoryTreasureBox}_${crypto.randomUID(withTime: true)}'
    }
    this.name = name ?? engine.locale('treasureBox')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryTreasureBox
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic
    this.items = items

    world.objects[this.id] = this
  }
}

struct ObjectSpiritWell {
  constructor ({
    id,
    name,
    hoverContent,
    isDiscovered = true,
    useCustomLogic = false,
    rank,
  }) {
    if (useCustomLogic) {
      assert(id != null)
      this.id = id
    } else {
      this.id = '${kObjectCategorySpiritWell}_${crypto.randomUID(withTime: true)}'
    }
    this.name = name ?? engine.locale('oldWell')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategorySpiritWell
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic
    this.rank = rank

    world.objects[this.id] = this
  }
}

struct ObjectExpArray {
  constructor ({
    id,
    name,
    hoverContent,
    isDiscovered = true,
    useCustomLogic = false,
    collectableLight,
  }) {
    if (useCustomLogic) {
      assert(id != null)
      this.id = id
    } else {
      this.id = '${kObjectCategoryExpArray}_${crypto.randomUID(withTime: true)}'
    }
    this.name = name ?? engine.locale('enterCultivation')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryExpArray
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic
    this.collectableLight = collectableLight ?? 0

    world.objects[this.id] = this
  }
}

struct ObjectCardLibrary {
  constructor ({
    id,
    name,
    hoverContent,
    isDiscovered = true,
    useCustomLogic = false,
  }) {
    if (useCustomLogic) {
      assert(id != null)
      this.id = id
    } else {
      this.id = '${kObjectCategoryCardLibrary}_${crypto.randomUID(withTime: true)}'
    }
    this.name = name ?? engine.locale('enterLibrary')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryCardLibrary
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic

    world.objects[this.id] = this
  }
}

struct ObjectAlchemyFurnace {
  constructor ({
    id,
    name,
    hoverContent,
    isDiscovered = true,
    useCustomLogic = false,
  }) {
    if (useCustomLogic) {
      assert(id != null)
      this.id = id
    } else {
      this.id = '${kObjectCategoryAlchemyFurnace}_${crypto.randomUID(withTime: true)}'
    }
    this.name = name ?? engine.locale('furnace')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryAlchemyFurnace
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic

    world.objects[this.id] = this
  }
}
