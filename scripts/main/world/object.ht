// import '../game/data.ht'

const kEntityTypeObject = 'object'

const kObjectCategoryPortal = 'portal'
const kObjectCategoryWorldPortal = 'worldPortal'
const kObjectCategoryCharacter = 'character'
const kObjectCategoryMerchant = 'merchant'
const kObjectCategoryEnemy = 'enemy'
const kObjectCategoryTreasureBox = 'treasureBox'
const kObjectCategorySpiritWell = 'spiritWell'
const kObjectCategoryBed = 'bed'
const kObjectCultivation = 'cultivation'
const kObjectCategoryCardLibrary = 'cardLibrary'
// const kObjectCategoryScrollTable = 'scrollTable'
const kObjectCategoryWorkbench = 'workbench'
const kObjectCategoryAlchemyFurnace = 'alchemyFurnace'

function discoverObject(object, terrain) {
  if (object.isDiscovered) return
  object.isDiscovered = true
  if (object.isHidden) {
    assert(object.overlaySprite != null)
    terrain.overlaySprite ??= {}
    Object.assign(terrain.overlaySprite, object.overlaySprite)
    // World.setWorldMapSprite(location.worldPosition.left, location.worldPosition.top, kSpriteLand)
    World.updateTerrainOverlaySprite(object.worldPosition.left, object.worldPosition.top)
  }
}

/// 地图上的对象，例如机关，宝箱，固定NPC等，但对象可能是隐藏的
/// {
///   id: 'id',
///   entityType: 'object',
///   category: 'custom',
///   isDiscovered: true,
///   useCustomLogic: true,
///   blockMove: true
/// }

struct ObjectPortal {
  constructor ({
    id,
    name,
    hoverContent,
    isDiscovered = true,
    useCustomLogic = false,
    targetLeft,
    targetTop,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.name = name ?? engine.locale('portal')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryPortal
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic
    this.targetTilePosition = {
      left: targetLeft,
      top: targetTop,
    }

    world.objects[this.id] = this
  }
}

struct ObjectWorldPortal {
  constructor ({
    id,
    name,
    hoverContent,
    isDiscovered = true,
    useCustomLogic = false,
    worldId,
    worldPositionLeft,
    worldPositionTop,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.name = name ?? engine.locale('worldPortal')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryWorldPortal
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic
    this.worldId = worldId
    this.targetTilePosition = {
      left: targetLeft,
      top: targetTop,
    }

    world.objects[this.id] = this
  }
}

struct ObjectDungeonEntrance {
  constructor ({
    id,
    name,
    hoverContent,
    isDiscovered = true,
    useCustomLogic = false,
    dungeonId,
    isTutorial = false,
    rank,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.name = name ?? engine.locale('dungeonEntrance')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryWorldPortal
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic
    this.dungeonId = dungeonId
    this.isTutorial = isTutorial
    world.objects[this.id] = this
  }
}

struct ObjectMerchant {
  constructor ({
    id,
    name,
    hoverContent,
    useCustomLogic = false,
    rank,
    money = 100000,
    shard = 100000,
    category,
    itemCount = 5,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.name = name ?? engine.locale('merchant')
    
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryMerchant
    this.isDiscovered = true
    this.useCustomLogic = useCustomLogic

    this.merchant = BattleEntity(
      id: this.id,
      name: this.name,
      rank: rank,
    )

    if (money > 0) {
      entityCollect(this.merchant, 'money', amount: money)
    }
    if (shard > 0) {
      entityCollect(this.merchant, 'shard', amount: shard)
    }

    if (category is List) {
      for (var i in range(itemCount)) {
        final c = category.random
        assert(c in kItemCategoryKinds)
        final k = kItemCategoryKinds[c].random
        final item = Equipment(kind: k, rank: rank)
        entityAcquire(this.merchant, item)
      }
    } else if (category is string) {
      for (var i in range(itemCount)) {
        final item = Equipment(category: category, rank: rank)
        entityAcquire(this.merchant, item)
      }
    }

    world.objects[this.id] = this
  }
}

struct ObjectEnemy {
  constructor ({
    id,
    name,
    hoverContent,
    useCustomLogic = false,
    level,
    rank,
    isElite = false,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.name = name ?? engine.locale('dungeonGuard')
    
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryEnemy
    this.isDiscovered = true
    this.useCustomLogic = useCustomLogic

    this.battleEntity = BattleEntity(
      id: this.id,
      name: this.name,
      level: level,
      rank: rank,
    )
    Game.characterAllocateSkills(this.battleEntity)
    generateDeck(this.battleEntity, maxOutLevel: isElite)

    world.objects[this.id] = this
  }
}

struct ObjectBed {
  constructor ({
    id,
    name,
    hoverContent,
    useCustomLogic = false,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.name = name ?? engine.locale('bed')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryBed
    this.isDiscovered = true
    this.useCustomLogic = useCustomLogic
    
    world.objects[this.id] = this
  }
}

/// 创建一个宝箱对象，打开后可以获得物品
/// [items] 是物品信息列表，包含了用于生成实际物品的信息
/// items: [
///   {
///     type: 'material',
///     kind: 'money',
///     amount: 100,
///   },
///   {
///     type: 'prototype',
///     kind: 'shard',
///   },
///   {
///     type: 'equipment',
///     kind: 'sword',
///     rarity: 'basic',
///     rank: 0,
///     level: 0,
///   },
///   {
///     type: 'cardpack',
///     kind: 'punch',
///     genre: null,
///     rank: 0,
///   },
/// ]
struct ObjectTreasureBox {
  constructor ({
    id,
    name,
    hoverContent,
    isDiscovered = true,
    useCustomLogic = false,
    items: List,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.name = name ?? engine.locale('treasureBox')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryTreasureBox
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic
    this.items = items

    world.objects[this.id] = this
  }
}

struct ObjectSpiritWell {
  constructor ({
    id,
    name,
    hoverContent,
    isDiscovered = true,
    useCustomLogic = false,
    rank,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.name = name ?? engine.locale('oldWell')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategorySpiritWell
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic
    this.rank = rank

    world.objects[this.id] = this
  }
}

struct ObjectCultivation {
  constructor ({
    id,
    name,
    hoverContent,
    isDiscovered = true,
    useCustomLogic = false,
    collectableLight,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.name = name ?? engine.locale('enterCultivation')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCultivation
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic
    this.collectableLight = collectableLight ?? 0

    world.objects[this.id] = this
  }
}

struct ObjectCardLibrary {
  constructor ({
    id,
    name,
    hoverContent,
    isDiscovered = true,
    useCustomLogic = false,
    enableCardCraft = false,
    enableScrollCraft = false,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.name = name ?? engine.locale('enterLibrary')
    this.hoverContent = hoverContent ?? this.name
    this.entityType = kEntityTypeObject
    this.category = kObjectCategoryCardLibrary
    this.isDiscovered = isDiscovered
    this.useCustomLogic = useCustomLogic
    this.enableCardCraft = enableCardCraft
    this.enableScrollCraft = enableScrollCraft

    world.objects[this.id] = this
  }
}
