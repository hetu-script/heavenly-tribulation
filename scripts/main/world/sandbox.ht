import 'tile/common.ht'
import 'generation_algorithm.ht'
import 'zone.ht'

const _kWorldSizePerWorldScale = {
  '1': 24,
  '2': 40,
  '3': 64,
  '4': 96,
}

const _kForestThreshold = 0.6
const _kMountainThreshold = 0.4
const _kIslandThreshold = 0.1

const _kFarmFieldThreshold = 0.08
const _kFisheryThreshold = 0.04
const _kTimberLandThreshold = 0.04
const _kMineThreshold = 0.04
const _kHuntingGroundThreshold = 0.02

const _kDungeonOnTerritoryProbability = 0.6

const _kAdultAge = 15
const _kPregnancyAgeMax = 50
const _kChildrenMax = 3

const _kLocationInitialDevelopmentMax = 4

const _kOrganizationRecruitOtherLocationProbability = 0.2
const _kOrganizationRecruitSuccessProbability = 0.4

const _kSandboxInitialHeadRank = 2

const _kTerrainResourceBase = 5;
const _kTerrainResourceVariation = 5;
const _kTerrainKindsWithNoResources = ['void', 'city', 'road']

/// 生成世界地图的算法
/// 生成的世界 ID 固定为 `sandboxWorld`
///
/// spritesheet上不同地形对应的编号：
/// 0：虚空
/// 1：浅海
/// 2：深海
/// 3：陆地（草原）
///
/// 算法思路：
///
/// 用噪声算法生成陆地和海洋
///
/// 为陆地所属的整个大地块命名，然后找到尚未命名的地块，将所有相连的地块作为一个整体命名，直到所有的地块都有名字，根据地块大小有不同命名方式
///
/// 根据城市密度，生成城市，并根据城市位于陆地、海边还是海中，对其进行特殊命名
///
/// 对于每个城市，链接最近的另外两个城市，使用 A* 寻路算法，标记经过的地块
///
/// 对于没有道路经过的地块，随机填充山脉和树林

function createSandboxWorld({
    name,
    seedString,
    style = 'coast',
    terrainSpriteSheet = 'tilemap/fantasyhextiles_v3_borderless.png',
    worldScale,
    nationNumber,
    locationNumber,
    characterNumber,
    // landProportion = 0.55,
  }) {
  
  assert(seedString is string && seedString.isNotEmpty)
  assert(worldScale != null)
  assert(nationNumber != null)
  assert(locationNumber != null)
  assert(characterNumber != null)
  assert(locationNumber > nationNumber)
  // assert(cultivationOrganizationNumber < locationNumber)
  // assert(cultivationOrganizationNumber < characterNumber)
  // assert(tradinghouseOrganizationNumber < locationNumber)
  // assert(tradinghouseOrganizationNumber < characterNumber)

  const seed = crypto.crcInt(seedString)
  engine.debug('开始生成世界，设置随机数种子为：${seedString}(${seed})')
  setRandomSeed(seed)

  let width
  let height

  let size = _kWorldSizePerWorldScale[worldScale]
  width = size
  height = size ~/ 2
  assert(width != null && height != null, 'wrong worldScale: ${worldScale}')

  // 生成过程中，引入了一些别的文件中的函数
  // 他们可能会通过game.world访问, 因此这里直接使用全局变量
  const newWorld = TileMap(
    id: 'sandboxWorld',
    terrainSpriteSheet: terrainSpriteSheet,
    width: width,
    height: height,
  )

  newWorld.isMain = true
  newWorld.name = name ?? generateZoneName(category: 'world')
  
  addWorld(newWorld)

  engine.debug('生成地块')
  for (const y in range(height)) {
    for (const x in range(width)) {
      let spriteIndex
      if (y > 0 && y < height - 1 && x > 0 && x < width - 1) {
        // 边界地块为 void
        spriteIndex = kSpriteWater
      }
      world.terrains.add(
        TileMapTerrain(
          left: x + 1,
          top: y + 1,
          mapWidth: width,
          spriteIndex: spriteIndex,
        )
      )
    }
  }

  // 没有区域，也是一个区域
  // const voidZone = Zone(category: kZoneEmpty)

  // 生成地域
  engine.debug('生成大陆')
  generateContinent2(newWorld, seed: seed, style: style)
  engine.debug('生成地域')
  generateZone(newWorld)
  
  const plainIndexes = Set()
  const mountainIndexes = Set()
  const forestIndexes = Set()

  const lands = world.landIndexes.map((index) => world.terrains[index])
  
  // 地形装饰贴图
  // 将大陆和海洋接触的地方填充为大陆架，将大陆上没有道路的方格，随机填充为平原、森林、山地
  // 这些修改不影响该地块的 kind
  engine.debug('填充地形装饰贴图：大陆架、平原、森林、山地')
  for (const tile in lands) {
    if (tile.spriteIndex != kSpriteLand) continue
    const r = random.nextDouble()
    if (r < _kMountainThreshold) {
      tile.sprite = 'object/mountain.png'
      tile.kind = 'mountain'
      mountainIndexes.add(tile.index)
    } else if (r < _kForestThreshold) {
      tile.sprite = 'object/forest.png'
      tile.kind = 'forest'
      forestIndexes.add(tile.index)
    } else {
      tile.kind = 'plain'
      plainIndexes.add(tile.index)
    }
  }
  for (const tile in world.waterIndexes.map((index) => world.terrains[index])) {
    if (tile.spriteIndex != kSpriteWater) continue
    let isShelf = false
    const neighbors = getMapTileNeighbors(tile.left, tile.top, world)
    for (const neighbor in neighbors) {
      if (neighbor.spriteIndex == kSpriteLand) {
        neighbor.sprite = 'object/shore.png'
        neighbor.kind = 'shore'
        isShelf = true
      }
    }
    if (isShelf) {
      tile.sprite = 'object/shelf.png'
      tile.kind = 'shelf'
      world.fisheryIndexes.add(tile.index)
    } else {
      tile.kind = 'sea'
    }
  }

  // zone 的名字和其大小有关
  nameZones(newWorld)

  // 命名区域后，才会得到海洋地块，因为某些水体会被命名为湖泊和河流
  const seas = world.seaIndexes.map((index) => world.terrains[index])

  // 生成据点
  engine.debug('生成大陆上的据点')
  final locations = []
  final locationNeighbors = {}
  const fisheryKinds = ['lake', 'shelf', 'sea']
  while (locations.length < locationNumber) {
    let island = random.nextDouble() < _kIslandThreshold
    let terrain
    let location
    if (island) {
      let availableWater = seas.where((tile) => tile.locationId == null)
      if (availableWater.isEmpty) {
        // 没有可用的地块了，继续尝试生成非海岛据点
        continue
      }
      terrain = random.nextIterable(availableWater)
      // terrain.kind = 'city'
      location = Location(
        category: 'city',
        kind: 'island',
        atTerrain: terrain,
        updateWorldMap: false,
        isHidden: true,
        // 随机生成的据点，初始发展度是0-3之间随机。
        development: random.nextInt(_kLocationInitialDevelopmentMax),
      )
    } else {
      let availableLands = lands.where((tile) => tile.locationId == null)
      if (availableLands.isEmpty) {
        // 没有可用的地块了，跳出循环
        break
      }
      terrain = random.nextIterable(availableLands)
      // city kind 有四种：城市、港口、山地（洞天）和岛屿（福地），后两者为隐藏据点
      let kind
      if (terrain.kind == 'shore') {
        kind = 'harbor'
      } else if (terrain.kind == 'mountain') {
        kind = 'mountain'
      } else {
        kind = 'inland'
      }
      // terrain.kind = 'city'
      location = Location(
        category: 'city',
        kind: kind,
        atTerrain: terrain,
        updateWorldMap: false,
        isHidden: kind == 'mountain',
        // 随机生成的据点，初始发展度是0-3之间随机。
        development: random.nextInt(_kLocationInitialDevelopmentMax),
      )
    }

    locations.add(location)
    final neighbors = getMapTileNeighbors(
      location.worldPosition.left,
      location.worldPosition.top,
      world,
    )
    // 生成据点后，据点周围的水体会被添加到可捕鱼范围
    for (final neighbor in neighbors) {
      if (neighbor.kind in fisheryKinds) {
        world.fisheryIndexes.add(neighbor.index)
      }
    }
    locationNeighbors[location.terrainIndex] = neighbors
  }
  world.fisheryIndexes = world.fisheryIndexes.toSet().toList()
  
  engine.debug('生成自然资源')
  for (final terrain in world.terrains) {
    if (terrain.kind in _kTerrainKindsWithNoResources) continue
    final resourceMultiplierData = Constants.terrainKindToNaturalResources[terrain.kind]
    assert(resourceMultiplierData != null, 'missing resourceMultiplierData for terrain kind: ${terrain.kind}')
    final resources = {}
    for (final resourceType in Constants.naturalResourceKinds) {
      assert(resourceMultiplierData.containsKey(resourceType), 'missing resourceMultiplier for resource type: ${resourceType} in terrain: ${terrain.index}')
      final resourceMultiplier = resourceMultiplierData[resourceType]
      resources[resourceType] = (random.nextInt(_kTerrainResourceVariation) + _kTerrainResourceBase) * resourceMultiplier
    }
    terrain.resources = resources
  }

  engine.debug('生成生产类建筑')
  // 生成农田
  final cities = game.locations.values.where((location) =>
    location.category == 'city' && location.isHidden == false
  ).toList()
  for (final city in cities) {
    final neighbors = locationNeighbors[city.terrainIndex]
    assert(neighbors != null)
    for (final terrain in neighbors) {
      if (terrain.locationId != null) continue
      if (terrain.kind != 'plain') continue
      final r = random.nextDouble()
      if (r < _kFarmFieldThreshold) {
        terrain.overlaySprite = {
          sprite: 'object/farmfield.png',
        }
        
        const location = Location(
          category: 'site',
          kind: 'farmland',
          atTerrain: terrain,
          updateWorldMap: false,
          createNpc: true,
          // 随机生成的场所，初始发展度是0-3之间随机。
          development: random.nextInt(_kLocationInitialDevelopmentMax),
        )
        terrain.locationId = location.id
      }
    }
  }

  // 生成渔场
  for (final index in world.fisheryIndexes) {
    const terrain = world.terrains[index]
    if (terrain.locationId != null) continue
    final r = random.nextDouble()
    if (r < _kFisheryThreshold) {
      terrain.overlaySprite = {
        sprite: 'object/fishery.png',
      }
      
      const location = Location(
        category: 'site',
        kind: 'fishery',
        atTerrain: terrain,
        updateWorldMap: false,
        createNpc: true,
        // 随机生成的场所，初始发展度是0-3之间随机。
        development: random.nextInt(_kLocationInitialDevelopmentMax),
      )
      terrain.locationId = location.id
    }
  }

  // 生成猎场和伐木场
  for (final index in forestIndexes) {
    const terrain = world.terrains[index]
    if (terrain.locationId != null) continue
    final r = random.nextDouble()
    if (r < _kHuntingGroundThreshold) {
      terrain.overlaySprite = {
        sprite: 'object/huntingground.png',
      }
      
      const location = Location(
        category: 'site',
        kind: 'huntingground',
        atTerrain: terrain,
        updateWorldMap: false,
        createNpc: true,
        // 随机生成的场所，初始发展度是0-3之间随机。
        development: random.nextInt(_kLocationInitialDevelopmentMax),
      )
      terrain.locationId = location.id
    } else if (r < _kTimberLandThreshold) {
      terrain.overlaySprite = {
        sprite: 'object/timberland.png',
      }
      
      const location = Location(
        category: 'site',
        kind: 'timberland',
        atTerrain: terrain,
        updateWorldMap: false,
        createNpc: true,
        // 随机生成的场所，初始发展度是0-3之间随机。
        development: random.nextInt(_kLocationInitialDevelopmentMax),
      )
      terrain.locationId = location.id
    }
  }
  // 生成猎场和矿场
  for (final index in mountainIndexes) {
    const terrain = world.terrains[index]
    if (terrain.locationId != null) continue
    final r = random.nextDouble()
    if (r < _kHuntingGroundThreshold) {
      terrain.overlaySprite = {
        sprite: 'object/huntingground.png',
      }
      
      const location = Location(
        category: 'site',
        kind: 'huntingground',
        atTerrain: terrain,
        updateWorldMap: false,
        createNpc: true,
        // 随机生成的场所，初始发展度是0-3之间随机。
        development: random.nextInt(_kLocationInitialDevelopmentMax),
      )
      terrain.locationId = location.id
    } else if (r < _kMineThreshold) {
      terrain.overlaySprite = {
        sprite: 'object/mine.png',
      }
      
      const location = Location(
        category: 'site',
        kind: 'mine',
        atTerrain: terrain,
        updateWorldMap: false,
        createNpc: true,
        // 随机生成的场所，初始发展度是0-3之间随机。
        development: random.nextInt(_kLocationInitialDevelopmentMax),
      )
      terrain.locationId = location.id
    }
  }

  // function find2NearestLocation(origin, {restricted2Zone: bool = true}) {
  //   assert(game.locations.length > 0)
  //   let nearest
  //   let nearestDistance
  //   let secondNearest
  //   let secondNearestDistance
  //   for (const location of game.locations) {
  //     if (location.category != 'city') continue
  //     if (location.terrainIndex == origin.terrainIndex) continue
  //     const start = world.terrains[origin.terrainIndex]
  //     const end = world.terrains[location.terrainIndex]
  //     const distance = getTileDistance(start, end)
  //     if (!restricted2Zone || location.zoneId == origin.zoneId) {
  //       if (nearestDistance == null || distance < nearestDistance) {
  //         nearestDistance = distance
  //         nearest = location
  //       } else if (secondNearestDistance == null || distance < secondNearestDistance) {
  //         secondNearestDistance = distance
  //         secondNearest = location
  //       } else {
  //         continue
  //       }
  //     }
  //   }
  //   return { nearest, secondNearest }
  // }

  // function resetRouteTerrainSprite(route) {
  //   final sub = route.sublist(1, route.length - 1)
  //   if (sub.isEmpty) return
  //   for (const index in sub) {
  //     const terrain = world.terrains[index]
  //     terrain.isRoute = true
  //     if (terrain.kind == 'mountain') {
  //       terrain.kind = 'plain'
  //       terrain.spriteIndex = kSpriteLand
  //       delete terrain.sprite
  //     }
  //   }
  // }

  // engine.debug('确保陆地上的每个城市至少可以链接到另外两个城市')
  // for (const location of game.locations) {
  //   if (location.category != 'city') continue
  //   const start = world.terrains[location.terrainIndex]
  //   // 确保陆地上的每个城市至少可以链接到另外两个城市
  //   const searchResult = find2NearestLocation(location, restricted2Zone: true)
  //   if (searchResult.nearest) {
  //     const end = world.terrains[searchResult.nearest.terrainIndex]
  //     const route = calculateRoute(start, end, world, terrainKinds: Constants.terrainKindsLand)
  //     if (route) {
  //       resetRouteTerrainSprite(route)
  //     }
  //   }
  //   if (searchResult.secondNearest) {
  //     const end = world.terrains[searchResult.secondNearest.terrainIndex]
  //     const route = calculateRoute(start, end, world, terrainKinds: Constants.terrainKindsLand)
  //     if (route) {
  //       resetRouteTerrainSprite(route)
  //     }
  //   }
  // }

  const nations = []
  // 随机挑选几个城市，作为各个国家的都城，生成地图上的不同国家
  engine.debug('随机挑选几个城市，作为各个国家的都城，生成地图上的不同国家')
  while (nations.length < nationNumber) {
    let availableLocations = game.locations.values.where((data) => data.category == 'city' && data.organizationId == null).toList()
    assert(availableLocations.isNotEmpty)
    const location = random.nextIterable(availableLocations)
    const head = Character(
      birthTimestamp: createBirthTimestamp(min: 40, max: 70),
      rank: _kSandboxInitialHeadRank,
    )
    head.locationId = location.id
    assert(location.worldPosition != null)
    head.worldPosition = Object.create(location.worldPosition)
    const organization = Organization(
      headquarters: location,
      headId: head.id,
    )
    nations.add(organization)
    location.development += 1

    final siteKinds = Constants.siteKindsBuildable.toList()
    final organizationCategoryKind = Constants.organizationCategoryToSiteKind[organization.category]
    siteKinds.remove(organizationCategoryKind)
    Location(
      id: organization.id + '_${organizationCategoryKind}',
      name: engine.locale(organizationCategoryKind),
      category: 'site',
      kind: organizationCategoryKind,
      atLocation: location,
      organizationId: organization.id,
      development: random.nextInt(location.development + 1),
      createNpc: true,
    )
    
    final organizationGenreKinds = Constants.organizationGenreToSiteKinds[organization.genre]
    final secondaryClassSiteKind = random.nextIterable(organizationGenreKinds)
    siteKinds.remove(secondaryClassSiteKind)
    Location(
      id: organization.id + '_${secondaryClassSiteKind}',
      name: engine.locale(secondaryClassSiteKind),
      category: 'site',
      kind: secondaryClassSiteKind,
      atLocation: location,
      organizationId: organization.id,
      development: random.nextInt(location.development + 1),
      createNpc: true,
    )

    if (location.development >= 2) {
      for (var i in range(2, location.development + 1)) {
        final kind = random.nextIterable(siteKinds)
        siteKinds.remove(kind)
        Location(
          id: organization.id + '_${kind}',
          name: engine.locale(kind),
          category: 'site',
          kind: kind,
          atLocation: location,
          organizationId: organization.id,
          development: random.nextInt(location.development + 1),
          createNpc: true,
        )
      }
    }
  }

  // 模拟世界演化，按照时间推进并生成人物、组织，并且为期分配人物关系
  // 在此种演化算法中，人物不会死亡，组织不会被消灭，因此只判断人数是否达到要求
  // 因为是模拟运行，每个tick接跳过一个月
  engine.debug('快速模拟一段时间的演化，生成人物、组织、国家等信息')
  // const islands = Set() // 用来保存在这一步骤才生成的隐居岛屿的门派据点
  let tick = 0 // 最长5年时间的演化
  while (tick < 60) {
    ++tick

    // 婴儿出生
    handleBabies()

    // 产生新的在野角色
    if (game.characters.length < characterNumber) {
      // 因为struct不能按照固定顺序排序，因此这里按照keys来随机。
      const location = random.nextIterable(game.locations.values.where((loc) {
        return loc.category == 'city'
      }))
      const character = Character(
        locationId: location.id,
        birthTimestamp: createBirthTimestamp(min: 15, max: 50),
      )
    }

    // 国家和组织扩张
    for (const organization of game.organizations) {
      engine.debug('组织 ${organization.id} 尝试扩张新领土')
      if (organization.borderIndexes.isNotEmpty) {
        let terrain
        const shuffle = random.shuffle(organization.borderIndexes).toList()
        for (const index in shuffle) {
          let tile = world.terrains[index]
          if (tile.kind != 'void'
              && !Constants.terrainKindsWater.contains(tile.kind)
              && tile.nationId == null) {
            terrain = tile
            break
          }
        }
        if (terrain != null) {
          addTerrainToOrganization(terrain, organization, updateWorldMap: false)
        }
      }

      engine.debug('组织 ${organization.id} 尝试招募新成员')
    
      let location = game.locations[organization.headquartersId]
      let residingCharacters = getResidingCharacters(location)

      if (residingCharacters.isEmpty) {
        // 组织据点本身没有可用的人才（一般是因为是隐士据点）
        if (random.nextDouble() < _kOrganizationRecruitOtherLocationProbability) {
          for (const otherLocation of game.locations) {
            if (location.category != 'city') continue
            if (otherLocation.id == organization.headquartersId) continue
            residingCharacters = getResidingCharacters(otherLocation)
            if (residingCharacters.isNotEmpty) {
              break
            }
          }
        }
      }

      // 有可能循环到最后所有的据点都没有人，所以这里的判断没有和上一条合并
      if (residingCharacters.isNotEmpty) {
        if (random.nextDouble() < _kOrganizationRecruitSuccessProbability) {
          for (let character in random.shuffle(residingCharacters)) {
            if (character.organizationId == null) {
              addCharacterToOrganization(character, organization)
              break
            }
          }
        }
      }

      // 从最低等级开始，尝试提升成员等级
      // for (const rank in range(kOrganizationRankMax)) {
      //   const membersOfThisRank = getOrganizationMemberIdsOfRank(organization, rank)
      //   const membersOfHigherRank = getOrganizationMemberIdsOfRank(organization, rank + 1)
      //   if (membersOfThisRank.length >= maxMemberOfRank(rank)) {
      //     if (membersOfHigherRank.length < maxMemberOfRank(rank + 1)) {
      //       const memberId = random.nextIterable(membersOfThisRank)
      //       const member = game.characters[memberId]
      //       addOrganizationTitleForCharacter(member, organization, rank + 1)
      //       break
      //     }
      //   }
      // }
    }
    
    engine.debug('通过婚姻和生育产生新的角色以及其人物关系')
    for (const char of game.characters) {
      if (!char.isFemale) continue
      const age = getCharacterAge(char)
      if (age < _kAdultAge || age > _kPregnancyAgeMax) continue
      if (char.isPregnant) continue
      if (char.motivations.contains('dink')) continue
      let spouseId = getSpouses(char).first?.characterId
      if (spouseId != null) {
        const spouse = game.characters[spouseId]
        if (spouse.motivations.contains('dink')) continue
        final childrenCount = hasChild(char)
        if (childrenCount >= _kChildrenMax) continue
        Baby(father: spouse, mother: char)
      } else {
        if (char.motivations.contains('celibate')) continue
        
        for (const otherChar of game.characters) {
          if (char.id == otherChar.id) continue
          if (otherChar.isFemale) continue
          if (getCharacterAge(otherChar) < _kAdultAge) continue
          if (hasSpouse(otherChar)) continue

          characterMet(char, otherChar)
          createSpouse(otherChar, char)
          break
        }
      }
    }
  }


  // 生成地牢
  engine.debug('在各个门派的领地上添加秘境')
  for (final nation in nations) {
    final r = random.nextDouble()
    if (r > _kDungeonOnTerritoryProbability) continue

    let availableTiles = nation.territoryIndexes.map((index) => world.terrains[index]).where((tile) => !tile.isWater && tile.locationId == null)
    if (availableTiles.isEmpty) continue
    final dungeionTile = random.nextIterable(availableTiles)
    dungeionTile.overlaySprite = {
      sprite: 'object/dungeon.png',
    }

    const location = Location(
      category: 'site',
      kind: 'dungeon',
      atTerrain: dungeionTile,
      updateWorldMap: false,
      // isHidden: true,
      organizationId: nation.id,
    )
    location.dungeonId = 'dungeon_1'
    dungeionTile.locationId = location.id
  }

  engine.debug('为角色添加次要动机')
  for (const char of game.characters) {
    const age = getCharacterAge(char)
    if (char.motivations.isNotEmpty) continue
    
    if (char.relationships.sect.isEmpty) {
      if (!char.motivations.contains('shifu')) {
        char.motivations.add('shifu')
        continue
      }
    }
    
    if (char.relationships.friendship.isEmpty) {
      if (!char.motivations.contains('friendship')) {
        char.motivations.add('friendship')
        continue
      }
    }
    
    if (char.relationships.romance.isEmpty) {
      if (!char.motivations.contains('romance')) {
        char.motivations.add('romance')
        continue
      }
    }
    
    if (!hasSpouse(char)) {
      if (age >= _kAdultAge && !char.motivations.contains('spouse')) {
        char.motivations.add('spouse')
        continue
      }
    }
    
    if (!hasChild(char)) {
      if (age >= _kAdultAge && !char.motivations.contains('child')) {
        char.motivations.add('child')
      }
    }
  }

  // 此时时间应为1日下午，以避免重复触发月初事件
  Game.updateGame(forceUpdate: true)

  // engine.debug('世界生成完毕。重置随机数生成器。')
  // setRandomSeed()

  return newWorld
}
