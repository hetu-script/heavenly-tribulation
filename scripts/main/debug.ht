// import 'game/data.ht'
// import 'entity/character/character.ht'
// import 'entity/item/item.ht'
// import 'game/dialog.ht'
// import 'world/tile/hexagonal_tile.ht'
// import 'random.ht'

const _kCraftMaterials = [
  'craftmaterial_addAffix',
  'craftmaterial_replaceAffix',
  'craftmaterial_rerollAffix',
  'craftmaterial_upgradeRank1',
  'craftmaterial_upgradeRank2',
  'craftmaterial_upgradeRank3',
  'craftmaterial_upgradeRank4',
  'craftmaterial_upgradeRank5',
]

namespace Debug {

  external function reloadGameData()

  external function reloadModules()

  function generateHero({rank = 0, level = 0}) {
    final hero = Character(
      id: 'hero',
      level: level,
      rank: rank,
      skillPoints: level,
    )
    // Game.characterAllocateSkills(hero)

    // hero.materials.money = 5000
    // hero.materials.shard = 100
    // hero.karma = 50

    setHeroId('hero')

    final randomEquipmentKind = Constants.equipmentCategoryKinds['weapon'].random
    final item = Equipment(kind: randomEquipmentKind, rank: hero.rank)
    Player.acquire(item)

    final pack = Cardpack(
      kind: randomEquipmentKind,
      rank: hero.rank,
      isBasic: true,
    )
    Player.acquire(pack)
    final pack2 = Cardpack(
      rank: hero.rank,
      isBasic: true,
    )
    Player.acquire(pack2)

    // testItem(hero)
    // testQuest()
  }

  function testItem() {

    for (final affixId in game.battleCards.keys) {
      final card = BattleCard(
        affixId: affixId,
        rank: hero.rank,
      )
      Player.acquireCard(card)
    }
    
    final items = []
    for (var kind in Constants.equipmentKinds) {
      final item = Equipment(kind: kind, rank: hero.rank)
      items.add(item)
      Player.acquire(item)
    }

    for (var genre in [null, ...Constants.cultivationGenres]) {
      final pack = Cardpack(
        genre: genre,
        rank: hero.rank,
      )
      items.add(pack)
      Player.acquire(pack)
    }

    for (var i in range(5)) {
      final item = Potion(rank: hero.rank)
      items.add(item)
      Player.acquire(item)
    }

    final shardPack = Materialpack(kind: 'shard', amount: 50)
    Player.acquire(shardPack)
    items.add(shardPack)

    final moneyPack = Materialpack(kind: 'money', amount: 5000)
    Player.acquire(moneyPack)
    items.add(moneyPack)

    for (var i in range(3)) {
      final scroll = createItemByPrototype('identify_scroll')
      Player.acquire(scroll)
      items.add(scroll)
    }

    for (var i in range(1, kCultivationRankMax + 1)) {
      final paper = createItemByPrototype('scroll_paper_rank${i}')
      paper.stackSize = 5
      Player.acquire(paper)
      items.add(paper)
    }

    for (var i in range(3)) {
      final spirit = StatusSpirit(rank: hero.rank + 1)
      Player.acquire(spirit)
      items.add(spirit)
    }

    for (var materialId in _kCraftMaterials) {
      final material = createItemByPrototype(materialId)
      material.stackSize = 10
      Player.acquire(material)
      items.add(material)
    }

    for (var i in range(1, kCultivationRankMax + 1)) {
      final ticket = createItemByPrototype('dungeon_ticket_rank${i}')
      ticket.stackSize = 3
      Player.acquire(ticket)
      items.add(ticket)
    }

    Game.promptItems(items)
  }

  function testJournal() {
    final journal = hero.journals.mysticGirl
    if (!journal) {
      journal = Player.acquireJournalById('mysticGirl')
      Player.progressJournalById(journal.id, stage: 1)
      Player.progressJournalById(journal.id, stage: 3)
    }
    Game.promptJournal(journal)
  }

  function updateAllCaptions() {
    for (const tile in world.terrains) {
      if (tile.locationId) {
        assert(game.locations.containsKey(tile.locationId))
        const location = game.locations[tile.locationId]
        World.setTerrainCaption(tile.left, tile.top, location.name)
      } else if (tile.objectId) {
        World.setTerrainCaption(tile.left, tile.top, tile.objectId)
      }
    }
  }

  function debugDialog() {
    Dialog.pushDialog(
      'debugDialog_content1',
      name: '凌初雪',
      icon: 'story/illustration/ling_chuxue_head.png',
      image: 'story/illustration/ling_chuxue.png'
    )
    Dialog.pushDialog(
      'debugDialog_content2',
      name: '萧墨',
      icon: 'story/illustration/xiao_mo_head.png',
      image: 'story/illustration/xiao_mo.png'
    )
    Dialog.execute()
  }
  
}