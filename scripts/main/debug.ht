// import 'game/data.ht'
// import 'entity/character/character.ht'
// import 'entity/item/item.ht'
// import 'game/dialog.ht'
// import 'world/tile/hexagonal_tile.ht'
// import 'random.ht'

namespace Debug {

  external function reloadGameData()

  external function reloadModules()

  function generateHero({rank = 0, level = 0}) {
    final hero = Character(
      id: 'hero',
      isFemale: false,
      level: level,
      rank: rank,
      skillPoints: level,
    )
    // Game.characterAllocateSkills(hero)

    // hero.unconvertedExp = 2000
    // hero.materials.money = 5000
    // hero.materials.shard = 100
    // hero.karma = 50

    setHeroId('hero')

    // testItem(hero)
    // testQuest()
  }

  function testItem([character]) {
    character ??= hero

    if (character == null) {
      for (final affixId in game.battleCards.keys) {
        final card = BattleCard(
          affixId: affixId,
          rank: character.rank,
        )
        Player.acquireCard(card)
      }
    }
    
    final items = []
    for (var kind in kEquipmentKinds) {
      final item = Equipment(kind: kind, rank: character.rank)
      items.add(item)
      entityAcquire(character, item)
    }

    for (var genre in kCardGenres) {
      final pack = Cardpack(
        genre: genre,
        rank: character.rank,
      )
      items.add(pack)
      entityAcquire(character, pack)
    }

    final shardPack = Materialpack(kind: 'shard', amount: 200)
    entityAcquire(character, shardPack)
    items.add(shardPack)

    final moneyPack = Materialpack(kind: 'money', amount: 5000)
    entityAcquire(character, moneyPack)
    items.add(moneyPack)

    for (var i in range(1, kCultivationRankMax + 1)) {
      final paper = createItemByPrototype('scroll_paper_rank_${i}')
      entityAcquire(character, paper)
      items.add(paper)
    }

    for (var i in range(3)) {
      final scroll = createItemByPrototype('identify_scroll')
      entityAcquire(character, scroll)
      items.add(scroll)
    }

    for (var i in range(3)) {
      final spirit = StatusSpirit(rank: character.rank + 1)
      entityAcquire(character, spirit)
      items.add(spirit)
    }

    if (character == hero) {
      Game.promptNewItems([...items])
    }
  }

  function testQuest() {
    final quest = hero.quests.mysticGirl
    if (!quest) {
      quest = Player.acquireQuestById('mysticGirl')
      Player.progressQuestById(quest.id, stage: 1)
      Player.progressQuestById(quest.id, stage: 3)
    }
    Game.promptNewQuest(quest)
  }
 
  function getCurrentTerrain() {
    if (world == null) return
    if (hero == null) return
    const position = hero.worldPosition
    const terrainIndex = tilePos2Index(position.left, position.top, world.width)
    let terrain = world.terrains[terrainIndex]
    return terrain
  }

  function getCurrentLocation() {
    if (world == null) return
    if (hero == null) return
    const position = getHeroPosition()
    const terrainIndex = tilePos2Index(position.left, position.top, world.width)
    const terrain = world.terrains[terrainIndex]
    if (terrain.locationId) {
      const location = game.locations[terrain.locationId]
      return location
    }
  }

  function updateAllCaptions() {
    for (const tile in world.terrains) {
      if (tile.locationId) {
        assert(game.locations.containsKey(tile.locationId))
        const location = game.locations[tile.locationId]
        World.setTerrainCaption(tile.left, tile.top, location.name)
      } else if (tile.objectId) {
        World.setTerrainCaption(tile.left, tile.top, tile.objectId)
      }
    }
  }

  function debugDialog() {
    Dialog.pushLocales(
      'debugDialog_content1',
      displayName: '凌初雪',
      icon: 'story/illustration/ling_chuxue_head.png',
      image: 'story/illustration/ling_chuxue.png'
    )
    Dialog.pushLocales(
      'debugDialog_content2',
      displayName: '萧墨',
      icon: 'story/illustration/xiaomo_head.png',
      image: 'story/illustration/xiaomo.png'
    )
    Dialog.execute()
  }
  
}