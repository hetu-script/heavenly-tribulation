
/// 历史事件记录
struct Incident {
  constructor ({
    message: string,
    isGlobal: bool = false, // 为真则全世界的人都知道
    timestamp,
    subjectId,
    targetId,
    item, // 只有物品数据是直接传输，而不是传 id
    sectId,
    locationId: string,
    terrainIndex: integer,
    idealistic = 0,
    orderly = 0,
    goodwill = 0,
  }) {
    // assert(subjectId != null)
    this.message = message
    this.isGlobal = isGlobal
    this.timestamp = timestamp ?? game.timestamp
    this.subjectId = subjectId
    if (targetId) this.targetId = targetId
    // if (withItem) this.withItemId = withItem.id
    if (item) this.itemId = item.id
    if (sectId) this.sectId = sectId
    if (locationId) this.locationId = locationId
    if (terrainIndex) this.terrainIndex = terrainIndex
    this.idealistic = idealistic
    this.orderly = orderly
    this.goodwill = goodwill

    this.id = crypto.randomUUID()
    history[this.id] = this

    let chars = Set()
    
    let subject
    if (subjectId) {
      chars.add(subjectId)
      subject = game.characters[subjectId]
      if(subject != null) {
        entityExperienceIncident(subject, this)
      } else {
        engine.error('无法找到事件的主体角色，id 为：${subjectId}')
      }
    }

    if (targetId) {
      if (targetId == subjectId) {
        engine.error('事件的主体和目标不能是同一个角色，id 为：${targetId}')
      } else {
        chars.add(targetId)
        const target = game.characters[targetId]
        if(target != null) {
          entityExperienceIncident(target, this)
        } else {
          engine.error('无法找到事件的目标角色，id 为：${targetId}')
        }
      }
    }

    if (item) {
      entityExperienceIncident(item, this)
    }

    let sect
    if (sectId) {
      sect = game.sects[sectId]
      assert(sect != null, '无法找到事件所属的组织，id 为：${sectId}')
      entityExperienceIncident(sect, this)
    }

    let location
    if (locationId) {
      location = game.locations[locationId]
      assert(location != null, '无法找到事件所属的地点，id 为：${locationId}')
      entityExperienceIncident(location, this)
    }
    
    let terrain
    if (terrainIndex) {
      terrain = world.terrains[terrainIndex]
      assert(terrain != null, '无法找到事件所属的地块，index 为：${terrainIndex}')
      entityExperienceIncident(terrain, this)
    }

    if (isGlobal) {
      for (const char of game.characters) {
        if (chars.contains(char.id)) continue
        chars.add(char.id)
        characterKnowIncident(char, this)
      }
    } else {
      if (sect) {
        for (const id in sect.membersData.keys) {
          if (chars.contains(id)) continue
          chars.add(id)
          const member = game.characters[id]
          assert(member != null, '无法找到组织成员，id 为：${id}')
          characterKnowIncident(member, this, witnessed: true)
        }
      }
      if (location) {
        for (const char in getCharactersAtLocation(location)) {
          if (chars.contains(char.id)) continue
          chars.add(char.id)
          characterKnowIncident(char, this)
        }
      }
      if (terrain) {
        for (const char in getCharactersAtWorldMapPosition(terrain.left, terrain.top)) {
          if (chars.contains(char.id)) continue
          chars.add(char.id)
          characterKnowIncident(char, this)
        }
      }
    }
  
    Game.updateHistory()

    if (chars.contains(hero?.id) || isGlobal) {
      engine.debug(this.message)
    } else if (sect) {
      engine.info(this.message)
    }
  }
}

function getIncidentByIndex(index: integer) {
  return history[index]
}

function characterCalculateScoreOfIncident(character, incident) {
  return (character.personality.idealistic * incident.idealistic +
                 character.personality.orderly * incident.orderly +
                 character.personality.goodwill  * incident.goodwill) / 10
}

/// 角色听说某个之前其他角色经历的事件
/// witnessed 代表当面见证一个自己没有参与的事件
function characterKnowIncident(character, incident, { witnessed }) {
  assert(character.entityType == 'character', 'incorrect entity type for [characterKnowIncident]: ${character.entityType}')

  // 为了兼容性，如果没有事件数组，就创建一个
  if (character.known == null) {
    character.known = []
  }

  if (character.known.contains(incident.id)) {
    engine.warn('${entity.name} 已经知道了事件：[${incident.message}]，不能再次添加。')
    return
  }

  // engine.debug('${character.name} 知道了 「${incident.message}」')
  character.known.add(incident.id)

  if (incident.subjectId != null) {
    let score = characterCalculateScoreOfIncident(character, incident)
    if (witnessed) {
      // 亲身经历者会放大原本的评价
      score = (score * 1.5).toInt()
    }
    const subject = game.characters[incident.subjectId]
    updateBond(character, subject, score: score)
  }
  
  // if (!character.bonds.containsKey(id)) {
  //   const object = game.characters[id]
  //   // 名声增加
  //   // ++object.knownByPopulation
  //   Bond(character: character, target: object, score: score)
  //   engine.debug('${character.id} 对 ${object.id} 的好感度改变了 [${score}]')
  // }
}

/// 某个对象经历某个发生在它所处环境的事件
function entityExperienceIncident(entity, incident) {
  // 为了兼容性，如果没有事件数组，就创建一个
  if (entity.experienced == null) {
    entity.experienced = []
  }

  if (entity.experienced.contains(incident.id)) {
    engine.warn('${entity.id} 已经经历了事件：[${incident.message}]')
    return
  }

  entity.experienced.add(incident.id)
  
  if (entity.entityType != kEntityTypeCharacter) return

  // 只有人物会有世界观和评价的计算
  if (entity.id == incident.subjectId) {
    // let idealChange = entity.personality.idealistic * incident.idealistic / 100
    // if (idealChange != 0) {
    //   entity.personality.idealistic += idealChange
    //   // engine.debug('角色 ${entity.id} 的 idealistic 改变了 [${idealChange}] 到 [${entity.personality.idealistic}]。')
    // }
    // let orderChange = entity.personality.orderly * incident.orderly / 100
    // if (orderChange != 0) {
    //   entity.personality.orderly += orderChange
    //   // engine.debug('角色 ${entity.id} 的 orderly 改变了 [${orderChange}] 到 [${entity.personality.orderly}]。')
    // }
    // let goodChange = entity.personality.goodwill * incident.goodwill / 100
    // if (goodChange != 0) {
    //   entity.personality.goodwill += goodChange
    //   // engine.debug('角色 ${entity.id} 的 goodwill 改变了 [${goodChange}] 到 [${entity.personality.goodwill}]。')
    // }
  } else if (entity.id == incident.targetId) {
    const subject = game.characters[incident.subjectId]
    if (!entity.bonds.contains(subject.id)) {
      // 如果还不认识行动者
      characterMet(entity, subject)
    }
    // 作为事情的受事方会放大评价
    const score = (characterCalculateScoreOfIncident(entity, incident) * 1.5).toInt()
    if (score != 0) {
      let bond = entity.bonds[incident.subjectId]
      bond.score += score
      // engine.debug('${entity.id} 对 ${subject.id} 的好感度改变了 [${bond.score}]')
    }
  }
}
