/// battle entity 指一个可以参与战斗的对象。
/// 此对象拥有一个牌库和一个卡组。
/// 卡组是战斗中使用的。而牌库可以用来交换卡牌收藏（偷取、学习或者交换）。

import '../entity.ht'
import '../item/material.ht'
import '../../cardgame/card.ht'
import '../../common.ht'

/// 容貌等数值计算时的最大值: 100.0
const kAttributeValueMax = 100.0
const kAttributeValueAverage = 50.0
const kAttributeValueDeviation = 25.0

// number of the male avatar images
const _kMaleAvatarCount = 37
 // number of the female avatar images
const _kFemaleAvatarCount = 75

const _kAttributesBase = 50

const kBaseStaminaCostForMoveOnWater = 2
const kBaseStaminaCostForMoveOnHill = 2

const kBaseLife = 10
const kBaseMana = 1
const kBaseLightedRadius = 2

const kBaseidentifyCardsCountMonthly = 12
const kBaseexpCollectEfficiency = 10

const kBaseTribulationMax = 2
const kTribulationPerRank = 2

const kNonBattleAttributes = [
  'charisma',
  'wisdom',
  'luck',
]

// 战斗属性决定了角色战斗流派
const kBattleAttributes = [
  'spirituality',
  'dexterity',
  'strength',
  'willpower',
  'perception',
]

const kRaceNames = [
  'xianzu',
  'fanzu',
  'yaozu'
]

// 某些时候，只需要生成一个用于战斗的实体，此时不需要年龄、魅力等属性
struct BattleEntity {
  constructor ({
    id,
    isFemale,
    race,
    icon,
    illustration,
    characterSkin,
    surName,
    generationName,
    shortName,
    familyName,
    name,
    generateName = true,
    description,
    level,
    rank,
    attributes,
    baseAttribute,
    majorAttribute,
    stats,
    cardLibrary,
    battleDecks,
  }) {
    this.entityType = kEntityTypeBattleEntity
    this.isFemale = isFemale ?? random.nextBool()
    if (this.isFemale) {
      const index = random.nextInt(_kFemaleAvatarCount)
      this.icon = icon ?? 'illustration/female/${index}.jpg'
      this.illustration = illustration
      this.characterSkin = characterSkin ?? 'characterWoman1'
    } else {
      const index = random.nextInt(_kMaleAvatarCount)
      this.icon = icon ?? 'illustration/male/${index}.jpg'
      this.illustration = illustration
      this.characterSkin = characterSkin ?? 'characterMan1'
    }

    if (race != null) {
      assert(kRaceNames.contains(race))
      this.race = race
    } else {
      this.race = random.nextIterable(kRaceNames)
    }
    this.usedNames = []

    if (generateName) {
      let randomName

      let conflict = false
      do {
        randomName = generateCharacterName(
          isFemale: this.isFemale,
          surName: surName,
          middleName: generationName,
        )
        conflict = game.characters.values.where((element) =>
          element.name == randomName.name).isNotEmpty
      } while (conflict)

      this.name = randomName.fullName
      this.surName = randomName.surName
      this.generationName = randomName.middleName
      this.shortName = randomName.shortName
    } else {
      this.name = name ?? engine.locale('noname')
      this.surName = surName
      this.generationName = middleName
      this.shortName = shortName ?? name
    }
    this.id = id ?? this.name
    
    // 非主角色不参与 update, interact 等逻辑交互，也不会自动显示在地图或场景中。
    // this.isMain = isMain ?? false

    this.description = description ?? ''

    // 修真境界，凝气期是1
    // 境界决定了升级时能获得卡牌的最高稀有度，但具体获得的卡牌是随机的
    // 在所有流派中，只有修为等级最高的那个流派决定了境界
    this.rank = rank ?? 0
    this.levelMax = maxLevelForRank(this.rank)
    // 修为等级，每次提升修为等级可以获得1点天赋点
    this.level = level ?? 0

    this.tribulationCount = 0

    // 身上携带的材料，材料本身没有特殊属性，多个材料只是堆叠数字增加
    // 材料单独显示在物品栏上方，没有携带的材料不会显示
    // 金钱也是一种材料，其他材料包括可以用来建筑的木材、石料等
    this.materials = MaterialStorage()

    // 身上携带的普通物品，每一个都是单独生成，无法堆叠
    this.inventory = {}

    // 装备栏的位置是固定的 7 个
    // 装备栏只能装备法宝，获得其佩戴效果
    // key 是 0-7 的数字，代表第几栏，
    // value 是 物品的 id，物品的具体数据在角色的 inventory 中
    this.equipments = {
      '0': null,
      '1': null,
      '2': null,
      '3': null,
      '4': null,
      '5': null,
      '6': null,
      // '7': null,
    }

    // 随角色移动的其他角色，这里只保存id
    this.companions = []

    // 角色当前卡牌库，关于战斗卡牌的具体信息另行参阅文档
    // 卡牌库是一个 map，key 是卡牌的 id，value 是卡牌数据
    this.cardLibrary = cardLibrary ?? {}
    // 战斗卡组的数组，数组的值是一个结构体，包含卡组的命名（可修改）和卡组内容
    // [
    //   {
    //     title: 'deck name',
    //     isBattleDeck: false, // 是否是当前使用的战斗卡组
    //     cards: [
    //       'card id 1', // 卡组中只保存卡牌id，实际数据在角色的library中
    //       'card id 2',
    //     ]
    //   }
    // ]
    this.battleDecks = battleDecks ?? []
    // 当前使用的战斗卡组，记录的是战斗卡组数组的index
    this.battleDeckIndex = this.battleDecks.isNotEmpty ? 0 : -1

    // 角色的属性
    // 包括：灵力、身法、体魄、念力、神识
    let generated = generateCharacterAttributes(base: baseAttribute, major: majorAttribute)
    Object.assign(this, generated)

    // 天赋，天赋本身的数据另外保存，这里只保存了天赋的id和天赋等级
    this.talents = {}

    // 从装备或者天赋树中获得的被动加成，key是词条id
    this.passives = {}
    
    // 已解锁的天赋技能节点， key 是 nodeId ，代表天赋盘上某个位置的坐标。
    // 如果存在某个 key 意味着该位置已经被解锁
    // 对于属性类节点，值是该属性的名字
    // 对于其他节点，值是 true
    this.unlockedPassiveTreeNodes = {}

    // 角色的数值
    // 包括经过物品、天赋和状态加成的基本属性值
    // 通过属性还会计算出：攻击、防御、体力、生命、灵气
    this.stats = stats ?? {}
    
    characterCalculateStats(this)

    // 主流派：御剑、道术、锻体、炼魂、法身
    // 副流派：炼丹、炼器、阵法、符法、灵植、灵兽、幻术、卜术、通灵、通神
    // this.cultivationGenre = cultivationGenre
  }
}

function generateCharacterAttributes({base, major}) {
  base ??= _kAttributesBase
  let attributes = {}
  for (final id in kNonBattleAttributes) {
    attributes[id] = Math.gaussianNoise(
      kAttributeValueAverage,
      kAttributeValueDeviation,
      min: 1,
      max: kAttributeValueMax,
      randomGenerator: random,
    ).toInt()
  }
  for (final id in kBattleAttributes) {
    if (id == major) {
      attributes[id] = random.nearInt(base)
    } else {
      attributes[id] = random.distantInt(base)
    }
  }
  return attributes
}

/// 当前状态数值，由特性、属性、物品、天赋、技能、增益减损等计算得来
/// 状态包括：生命、伤害、防御等。
function characterCalculateStats(character, { reset = true }) {

  character.lightRadius = kBaseLightedRadius + character.perception ~/ 10
  character.identifyCardsCountMonthly = kBaseidentifyCardsCountMonthly + character.perception ~/ 10
  character.expCollectEfficiency = kBaseexpCollectEfficiency
  character.tribulationMax = kBaseTribulationMax + kTribulationPerRank * character.rank
  
  final baseLife = kBaseLife + character.level * 5
  character.lifeMax = baseLife + character.strength ~/ 2
  character.manaMax = kBaseMana + character.spirituality ~/ 10

  character.stats.lightRadius = character.lightRadius + character.passives.lightRadius?.value
  character.stats.identifyCardsCountMonthly = character.identifyCardsCountMonthly + character.passives.identifyCardsCountMonthly?.value
  character.stats.expCollectEfficiency = character.expCollectEfficiency + character.passives.expCollectEfficiency?.value
  character.stats.tribulationMax = character.tribulationMax + character.passives.tribulationMax?.value

  // 基础属性，在此基础上还要加上物品和状态的加成
  character.stats.charisma = character.charisma + character.passives.charisma?.value
  character.stats.wisdom = character.wisdom + character.passives.wisdom?.value
  character.stats.luck = character.luck + character.passives.luck?.value

  character.stats.dexterity = character.dexterity + character.passives.dexterity?.value
  character.stats.spirituality = character.spirituality + character.passives.spirituality?.value
  character.stats.strength = character.strength + character.passives.strength?.value
  character.stats.perception = character.perception + character.passives.perception?.value
  character.stats.willpower = character.willpower + character.passives.willpower?.value

  character.stats.lifeMax = baseLife + character.stats.strength ~/ 2 + character.passives.lifeMax?.value
  character.stats.manaMax = kBaseMana + character.stats.spirituality ~/ 10 + character.passives.manaMax?.value
  
  character.stats.unarmedEnhance = character.passives.unarmedEnhance?.value ?? 0
  character.stats.weaponEnhance = character.passives.weaponEnhance?.value ?? 0
  character.stats.spellEnhance = character.passives.spellEnhance?.value ?? 0
  character.stats.curseEnhance = character.passives.curseEnhance?.value ?? 0
  character.stats.chaosEnhance = character.passives.chaosEnhance?.value ?? 0
  
  character.stats.physicalResist = character.passives.physicalResist?.value ?? 0
  character.stats.chiResist = character.passives.chiResist?.value ?? 0
  character.stats.elementalResist = character.passives.elementalResist?.value ?? 0
  character.stats.spiritualResist = character.passives.spiritualResist?.value ?? 0

  character.stats.quickThreshold = kQuickThreshold + character.passives.quickThresholdModifier?.value
  character.stats.slowThreshold = kQuickThreshold + character.passives.slowThresholdModifier?.value
  character.stats.nimbleThreshold = kQuickThreshold + character.passives.nimbleThresholdModifier?.value
  character.stats.clumsyThreshold = kClumsyThreshold + character.passives.clumsyThresholdModifier?.value
  
  if (reset) {
    characterRejuvenate(character)
  }
}

/// 恢复指定角色指定数量的生命，返回实际恢复的数值
function characterRestoreLife(character, count) {
  assert(count > 0)
  let original = character.stats.life
  character.stats.life += count
  if (character.stats.life > character.stats.lifeMax) {
    character.stats.life = character.stats.lifeMax
  }
  return character.stats.life - original
}

function characterRejuvenate(character) {
  character.stats.life = character.stats.lifeMax
}

function getCharacterStats(character) {
  const stats = character.stats.clone()
  return stats
}

function getCharacterMovableTerrainKinds(character) {
  let kinds = kPlainTerrains.toList()
  let movableOnWater = getCharacterMoveCostOnWater(character)
  if (movableOnWater) kinds.addAll(kWaterTerrains)
  let movableOnHill = getCharacterMoveCostOnHill(character)
  if (movableOnHill) kinds.addAll(kMountainTerrains)
  return kinds
}

/// 获取角色水上移动体力消耗，如果返回null表示不可水上移动
/// 消耗以tick为单位，在角色进入该地块之后扣减相应数值
function getCharacterMoveCostOnWater(character) {
  // TODO: 结丹境可以直接飞行，因此无需船只
  for (let i = 1; i < kEquipmentMax; ++i) {
    let itemId = character.equipments[i]
    let item = character.inventory[itemId]
    if (item != null && item.kind == kItemKindShip) {
      return kBaseStaminaCostForMoveOnWater
    }
  }
  return null
}

/// 获取角色山地移动体力消耗，如果返回null表示不可山上移动
/// 消耗以tick为单位，在角色进入该地块之后扣减相应数值
function getCharacterMoveCostOnHill(character) {
  for (let i = 1; i < kEquipmentMax; ++i) {
    let itemId = character.equipments[i]
    let item = character.inventory[itemId]
    if (item != null && item.kind == kItemKindBoots) {
      return kBaseStaminaCostForMoveOnHill
    }
  }
  return null
}

function generateDeck(character, { deckInfo }) {
  let deck = []
  if (deckInfo is List) {
    for (final info in deckInfo) {
      final card = BattleCard(
        category: info.category,
        mainAffixId: info.mainAffixId,
        kind: info.kind,
        genre: info.genre,
        level: info.level ?? character.level,
        rank: info.rank ?? character.rank,
        maxRank: info.maxRank,
        isIdentified: info.isIdentified ?? true,
      )
      deck.add(card)
    }
  } else {
    final deckLimit = getDeckLimitForRank(character.rank)
    for (var i in range(deckLimit.limit)) {
      final card = BattleCard(
        category: i == 0 ? 'attack' : null,
        level: character.level,
        rank: character.rank,
        isIdentified: false,
      )
      deck.add(card)
    }
  }
  for (final card in deck) {
    entityAcquireBattleCard(character, card)
  }
  character.battleDecks.add({
    title: 'battleDeck',
    isBattleDeck: true,
    cards: deck.map((card) => card.id).toList(),
  })
  character.battleDeckIndex = character.battleDecks.length - 1
  
  engine.info('generated deck: [${deck.map((card) => card.name).join(', ')}]')
}

/// 提升天赋技能等级
/// 注意此函数调用时并不会检测天赋树节点位置和链接情况
/// 也不会检查角色是否有足够的技能点
/// 升级天赋时，并不会立刻影响角色数据，
/// 只有在执行 characterCalculateStats() 之后，人物数据才会最终计算出来
function characterGainPassive(character, dataId, {level = 1}) {
  assert(level > 0)
  if (character.passives[dataId] == null) {
    final passiveRawData = game.passives[dataId]
    assert(passiveRawData != null)
    final passiveData = PassiveData(
      id: dataId,
      priority: passiveRawData.priority ?? 0,
      level: level,
      description: passiveRawData.description,
    )
    if (passiveRawData.increment != null) {
      passiveData.increment = passiveRawData.increment
      passiveData.value = (passiveData.increment * level).round()
    }
    character.passives[dataId] = passiveData
  } else {
    final passiveData = character.passives[dataId]
    passiveData.level += level
    let passiveLevel = passiveData.level
    if (passiveData.maxLevel && passiveData.level > passiveData.maxLevel) {
      passiveLevel = passiveData.maxLevel
    }
    passiveData.value = (passiveData.increment * passiveLevel).round()
  }
}

/// 降低天赋技能等级
function characterRefundPassive(character, dataId, {level = 1}) {
  if (character.passives[dataId] == null) {
    engine.warn('dataId [${dataId}] not found on character passives data for refund!')
    return
  }
  final passiveData = character.passives[dataId]
  passiveData.level -= level
  if (passiveData.level <= 0) {
    delete character.passives[dataId]
  } else if (passiveData.value != null) {
    let passiveLevel = passiveData.level
    if (passiveData.maxLevel && passiveData.level > passiveData.maxLevel) {
      passiveLevel = passiveData.maxLevel
    }
    passiveData.value = (passiveData.increment * passiveLevel).round()
  }
}

/// 检查角色是否拥有某个天赋技能，并将其数据返回
function characterHasPassive(character, dataId) {
  return character.passives[dataId]
}
