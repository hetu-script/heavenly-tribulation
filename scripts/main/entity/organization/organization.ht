import '../achievements.ht'

const kDiplomacyTypes = ['neutral', 'ally', 'enemy']

/// 门派外交关系数据
/// 外交关系必然会在双方的数据中同时创建
struct Diplomacy {
  constructor ({
    organizationId,
    type = 'neutral', // neutral | ally | enemy,
    score = 0,
  }) {
    assert(['neutral', 'ally', 'enemy'].contains(type))

    this.organizationId = organizationId
    this.timestamp = game.timestamp
    this.type = type
    this.score = score,
  }
}

/// 门派成员数据，包含了职级、头衔和贡献值
struct MemberData {
  constructor ({
    id,
    rank = 0,
    title = 'taskman',
    contribution = 0,
  }) {
    assert(this.rank >= 0)

    this.id = id
    this.rank = rank
    this.title = title
    this.contribution = contribution
  }
}

/// 创建一个门派
/// [category] 决定了经营类型
/// category 包含: 'cultivation' | 'religion' | 'business'
/// [genre] 决定了修炼类型，对应于角色的 cultivationFavor
/// genre 包含: 'spellcraft' | 'swordcraft' | 'bodyforge' | 'avatar' | 'vitality'
struct Organization {
  constructor ({
    id,
    name,
    category,
    genre,
    headquarters,
    headId,
    incurIncident = true,
  }) {
    assert(headquarters != null && headId != null)
    assert(game.locations.containsKey(headquarters.id))
    assert(game.characters.containsKey(headId))

    this.entityType = kEntityTypeOrganization

    this.createdTimestamp = game.timestamp
    // 该组织的事件触发选项
    this.flags = {}
    // 该组织解锁的科技
    this.techs = {}

    // 该组织每年刷新时间的时间，一般都为 X 月 1 日
    // 例如招募大比时间等等，都发生在这个日期
    const randomMonth = random.nextInt(kMonthsPerYear)
    this.yearlyUpdateTime = randomMonth * kTicksPerMonth + random.nextInt(kTicksPerMonth)
    this.recruitMonth = randomMonth + 1

    this.headquartersId = headquarters.id
    this.headId = headId
    this.category = category ?? random.nextIterable(Constants.organizationCategories)
    this.genre = genre ?? random.nextIterable(Constants.cultivationGenres)
    assert(Constants.organizationCategories.contains(this.category))
    assert(Constants.cultivationGenres.contains(this.genre))

    this.index = game.organizations.length
    if (name) {
      this.name = name
    } else {
      let conflict = false
      do {
        this.name = generateOrganizationName(category: this.category).name
        conflict = game.organizations.values.where((element) =>
          element.name == this.name).isNotEmpty
      } while (conflict)
    }
    // this.id = '${this.entityType}.${this.index}.${this.id}'
    this.id = id ?? this.name
    
    if (game.organizations.containsKey(this.id)) {
      engine.warn('已经存在 id 为 ${this.id} 的组织。旧数据将会被覆盖。')
    }
    game.organizations[this.id] = this
    
    // 本门派统治的据点 id 列表
    this.locationIds = []
    // 本门派成员，key 是 角色的 id，value 是角色的 MemberRankData
    this.members = {}

    // 门派的历史
    this.experienced = []
    
    // 门派外交信息
    // key 是另一个门派的 id, 值是一个结构体数组
    this.diplomacies = {}

    const head = game.characters[headId]
    const incidentContent = engine.locale('organizationCreate', interpolations: [
      head.name,
      headquarters.name,
      this.name,
    ])
    if (incurIncident) {
      // 触发创派事件，创派事件和成为掌门是两个事件
      Incident(
        subjectId: head.id,
        organizationId: this.id,
        message: incidentContent,
        orderly: 15,
        isGlobal: true,
      )
    } else {
      engine.debug(incidentContent)
    }
    addCharacterToOrganization(head, this, title: 'head', incurIncident: incurIncident)

    // 国家区块颜色
    this.color = random.nextBrightColorHex()
    // 本国统治的区块
    this.territoryIndexes = []
    // 与本国国界线相邻的外国区块
    this.borderIndexes = []

    const terrain = world.terrains[headquarters.terrainIndex]
    addTerrainToOrganization(terrain, this)
    headquarters.organizationId = this.id
    stationOrganization(this, headquarters, members: [headId])

    // 和人物类似，也具有物品栏
    this.inventory = {}
    this.materials = {}

    // 敌对名单，遇到后将会直接开始战斗
    this.enemyLists = {
      characterIds: [],
      organizationIds: [],
      // nationIds: [],
    }
  }
}

// TODO: 添加incident
function stationOrganization(organization, location, { incurIncident: bool }) {
  assert(location.organizationId == organization.id)
  
  organization.headquartersId = location.id

  const headquarters = Location(
    id: organization.id + '_headquarters',
    name: organization.name,
    category: 'site',
    kind: kLocationKindHeadquarters,
    atLocation: location,
    image: 'location/card/${organization.genre}.png'
    background: 'location/site/${organization.genre}.png'
    organizationId: organization.id,
    createNpc: true,
  )

  organization.headquartersSiteId = headquarters.id
  organization.locationIds.add(headquarters.id)

  for (const id in organization.members.keys) {
    const character = game.characters[id]
    setCharacterHome(character, location)
  }
}

function removeCharacterFromOrganization(character) {
  if (character.organizationId == null) return

  const organization = game.organizations[character.organizationId]
  organization.members.remove(character.id)
  character.organizationId = null
}

function getOrganizationMemberIdsOfRank(organization, rank) {
  assert(rank >= 0 && rank <= organization.jobRankMax)
  const ids = []
  for (const id in organization.members.keys) {
    const memberData = organization.members[id]
    if (memberData.rank == rank) {
      ids.add(id)
    }
  }
  return ids
}

/// 角色加入组织
/// 注意，这里并不处理师徒关系，可以理解为这里处理的是雇佣性质的工作岗位
/// 师徒关系需要另外调用 createShitu api来创建
function addCharacterToOrganization(character, organization, {title = 'taskman', incurIncident = true }) {
  assert(!organization.members.contains(character.id))
  // 组织人数上限由发展度决定
  // if (organizationMemberReachMax(organization)) {
  //   engine.warn('组织 ${organization.id} 的成员数量达到上限，在提升发展度之前无法再添加新成员。')
  //   return false
  // }
  // if (getOrganizationMemberIdsOfRank(organization, 0).length >= maxMemberOfJobRank(0, organization.jobRankMax)) {
  //   engine.warn('组织 ${organization.id} 的低阶成员数量达到上限，在提升成员级别之前无法再添加新成员。')
  //   return false
  // }
  if (character.organizationId != null) {
    assert(character.organizationId != organization.id)
    removeCharacterFromOrganization(character)
  }
  assert(title != null)
  setCharacterTitle(character, title)
  // 职位数据
  organization.members[character.id] = MemberData(
    id: character.id,
    rank: 0,
    title: title,
    contribution: 0,
  )
  // 角色可以加入多个门派，但当前所属门派只有一个，即最后一个加入的门派
  character.organizationId = organization.id

  if (incurIncident) {
    const incidentContent = engine.locale('organizationEnlist', interpolations: [
      character.name,
      organization.name,
    ])
    Incident(
      subjectId: character.id,
      organizationId: organization.id,
      message: incidentContent,
      orderly: 10,
      isPrivate: false,
    )
  }

  const location = game.locations[organization.headquartersId]
  setCharacterHome(character, location)
  
  return true
}

function addOrganizations(orgs: List) {
  for (const org in orgs) {
    addOrganization(arg)
  }
}

function addOrganization(org) {
  assert(org.id != null)
  game.organizations[org.id] = org
}

function getOrganizationById(id: string) {
  return game.organizations[id]
}

function getOrganizations([ids]) {
  if (ids != null) {
    assert(ids.isNotEmpty)
    return game.organizations.values.where( (value) => value.id in ids )
  } else {
    return game.organizations.values
  }
}

function removeTerrainFromOrganization(terrain, { incurIncident = true }) {
  if (terrain.nationId == null) return

  const organization = game.organizations[terrain.nationId]
  organization.territoryIndexes.remove(terrain.index)
  organization.borderIndexes.remove(terrain.index)

  final neighbors = getMapTileNeighbors(terrain.left, terrain.top, world)
  for (final neighbor in neighbors) {
    if (neighbor.nationId = organization.id &&
        !organization.borderIndexes.contains(neighbor.index)) {
      organization.borderIndexes.add(neighbor.index)
    }
  }

  if (terrain.locationId != null) {
    const location = game.locations[terrain.locationId]
    delete location.organizationId
    engine.info('${oldOrg.id} 失去了据点：${location.id}')
    organization.locationIds.remove(location.id)
    
    let toBeRemoved
    for (let siteId in location.sites) {
      const site = game.locations[siteId]
      if (site.name == organization.name) {
        engine.info('${organization.id} 失去了总堂所在地块！')
        toBeRemoved = site.id
        break
      }
    }
    delete game.locations[toBeRemoved]
  }
}

// TODO: 添加incident
/// 将某个地块划归到某个组织，这里不检查地块是否已经属于另一个组织
function addTerrainToOrganization(terrain, organization, { updateWorldMap = false, incurIncident = true }) {
  if (terrain.nationId != null) {
    engine.error('地块 [${terrain.left}, ${terrain.top}] 已经被组织 [${terrain.nationId}] 占领，无法添加到组织 [${organization.id}]')
    return
  }
  if (organization.territoryIndexes.contains(terrain.index)) {
    engine.error('组织 [${organization.id}] 已经拥有地块 [${terrain.left}, ${terrain.top}]')
    return
  }
  if (terrain.nationId == organization.id) {
    engine.error('组织 [${organization.id}] 已经拥有地块 [${terrain.left}, ${terrain.top}]')
    return
  }
  organization.territoryIndexes.add(terrain.index)
  // if (terrain.nationId != null) {
  //   removeTerrainFromOrganization(terrain)
  // }
  terrain.nationId = organization.id
  if (organization.borderIndexes.contains(terrain.index)) {
    organization.borderIndexes.remove(terrain.index)
  }
  const neighbors = getMapTileNeighbors(terrain.left, terrain.top, world)
  for (const neighbor in neighbors) {
    if (neighbor.nationId != organization.id) {
      organization.borderIndexes.add(neighbor.index)
    }
  }
  if (terrain.locationId) {
    const location = game.locations[terrain.locationId]
    // 应该已经从原本的门派中移除
    assert(location.organizationId == null)
    location.organizationId = organization.id
    if (!organization.locationIds.contains(location.id)) {
      organization.locationIds.add(location.id)
    }
    for (final siteId in location.sites) {
      final site = game.locations[siteId]
      assert(site != null, 'location site not found, siteId: ${siteId}, locationId: ${location.id}')
      site.organizationId = organization.id
      if (!organization.locationIds.contains(site.id)) {
        organization.locationIds.add(site.id)
      }
    }

    if (location.isHidden) {
      if (organization.id == hero.organizationId) {
        discoverLocation(location, updateWorldMap: updateWorldMap)
      }
    }
  }
  engine.debug('门派 ${organization.id} 将其领土扩展到 [${terrain.left},${terrain.top}]')
}

function createDiplomacy(organization1, organization2, { type = 'neutral', score = 0 }) {
  organization1.diplomacies[organization2.id] = Diplomacy(
    organizationId: organization2.id,
    type: type,
    score: score,
  )
  organization2.diplomacies[organization1.id] = Diplomacy(
    organizationId: organization1.id,
    type: type,
    score: score,
  )
}
