// import '../random.ht'
// import '../game/dialog.ht'
import '../name/skill/skill.json5' as skillData

const kRaceNames = [
  'xianzu',
  'fanzu',
  'yaozu'
]

const kCultivationRankMax = 5

final kBattleCardKind = skillData.keys.toList()

const kRarityCommon = 'common' // 凡品：生成数量没有限制
const kRarityRare = 'rare' // 良品：每18世界大小
const kRarityEpic = 'epic' // 极品：每36世界大小
const kRarityLegendary = 'legendary' // 神品：每72世界大小
const kRarityMythic = 'mythic' // 灵宝：每144世界大小
const kRarityArcane = 'arcane' // 古宝：每288世界大小

const kRarity = {
  /// 未分类 黑
  common: {
    rank: 0,
    rarity: 0.55,
    name: 'common',
    color: '#B4B4B4',
  },
  /// 凡品 灰
  rare: {
    rank: 1,
    rarity: 0.23,
    name: 'rare',
    color: '#D4FFFF',
  },
  /// 良品 蓝
  epic:{
    rank: 2,
    rarity: 0.12,
    name: 'uncommon',
    color: '#9D9DFF',
  },
  /// 上品 紫
  legendary:{
    rank: 3,
    rarity: 0.06,
    name: 'rare',
    color: '#693DA8',
  },
  /// 极品 金
  mythic: {
    rank: 4,
    rarity: 0.03,
    name: 'epic',
    color: '#E7E7AC',
  },
  /// 神品 金
  arcane: {
    rank: 5,
    rarity: 0.01,
    name: 'arcane',
    color: '#C65043',
  },
}

function getRarity({ name }) {
  if (name) {
    assert(kRarity.containsKey(name))
    return kRarity[name]
  } else {
    const r = random.nextDouble()
    if (r < kRarity.common.rarity) {
      return kRarity.common
    } else if (r < kRarity.rare.rarity) {
      return kRarity.rare
    } else if (r < kRarity.epic.rarity) {
      return kRarity.epic
    } else if (r < kRarity.legendary.rarity) {
      return kRarity.legendary
    } else if (r < kRarity.mythic.rarity) {
      return kRarity.mythic
    } else {
      return kRarity.arcane
    }
  }
}

// 从一个稀有度和值的对应表中，按照稀有度的概率取出值
// function getMappedRarityValue(valueMap) {
//   const r = getRarity()
//   const v = valueMap[r.rarity]
//   return (v is Iterable) ? v.random : v
// }

// entityType决定了该对象的数据结构和保存位置
const kEntityTypeBattleEntity = 'battle_entity'
const kEntityTypeCharacter = 'character' //game.characters
const kEntityTypeNpc = 'npc'  //game.npcs
const kEntityTypeLocationObject = 'object' //game.characters
const kEntityTypeBaby = 'baby' // game.babies
const kEntityTypeItem = 'item' //character.inventory
const kEntityTypeOrganization = 'organization' //game.organizations
const kEntityTypeLocation = 'location' // game.locations
const kEntityTypeBattleCard = 'battle_card' // character.cardLibrary

const kRankRarity = {
  '0': 'common',
  '1': 'rare',
  '2': 'epic',
  '3': 'legendary',
  '4': 'mythic',
  '5': 'arcane',
}

function getRandomLevel(min, max) {
  if (min >= max) return max
  return  min + random.nextInt(max - min + 1)
}

/// 获取额外词条数量，卡牌和装备共用一个算法
function getMinMaxExtraAffixCount(rank) {
  assert(rank >= 0 && rank <= kCultivationRankMax)
  let minExtra = 0
  let maxExtra = 0
  let minGreater = 0
  let maxGreater = 0
  if (rank > 0) {
    minExtra = rank - 1
    maxExtra = rank + 1
  }
  if (rank > 2) {
    minGreater = rank - 3
    maxGreater = rank - 2
  }
  return { minExtra, maxExtra, minGreater, maxGreater }
}

function getCultivationRankName(character) {
  return engine.locale('cultivationRank_${character.rank}')
}

function setEntityWorldPosition(entity, left, top, [ worldId ]) {
  entity.worldPosition = { left, top }
  if (worldId != null) {
    entity.worldId = worldId
  }
}

function tryChangeStats(entity, statName, change, { overflow = false }) {
  let data = entity.stats
  assert(data != null && data[statName] != null)
  let value = data[statName]
  value += change
  let residue = 0
  if (!overflow) {
    const max = data['${statName}Max']
    if (value < 0) {
      residue = value
      value = 0
    }
    if (value >= max) {
      residue = max - value
      value = max
    }
  }
  data[statName] = value
  return residue
}

const kThresholdOfExtraAffix = 0.65
