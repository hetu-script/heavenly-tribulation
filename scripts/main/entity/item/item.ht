// import '../entity.ht'
// import '../../game/data.ht'
// import '../../random.ht'
// import '../../incident.ht'
// import '../../name/talisman.ht'
// import 'material.ht'

// category 的作用：
// weapon, armor, helmet, boots, vehicle 每种只能装备一个，amulet 和 talisman 无限制
// weapon 和 talisman 决定了战斗中可以使用的功法卡牌类型


const kItemCategoryCardpack = 'cardpack';
const kItemCategoryIdentifyScroll = 'identify_scroll';
const kItemCategoryScroll = 'scroll';
const kItemCategoryScrollPaper = 'scroll_paper';
const kItemCategoryDungeonTicket = 'dungeon_ticket';
const kItemCategoryExppack = 'exp_pack';
const kItemCategoryMaterialPack = 'material_pack';
const kItemCategoryStatusSpirit = 'status_spirit';
const kItemCategoryEquipmentAffix = 'equipment_affix';
const kItemCategoryPotion = 'potion';
const kItemCategoryCraftMaterial = 'craftmaterial';

const kItemExtraAffixMinLevel = 6

// kind 决定了物品名字的生成方式
// weapon具体分为：sabre, sword, spear, staff, bow, dart, music
// talisman具体分为：buff, ongoing, consume
// 其他情况下 kind == type

const kEquipmentMax = 6

const kConsumableCategoryKinds = [
  kItemCategoryCardpack,
  kItemCategoryPotion,
]

const kEquipmentCategoryKinds = {
    // 所有武器的category都是weapon
  weapon: [
    'sword',
    'sabre',
    'spear',
    'staff',
    'bow',
    'dart',
  ],
  shield: [
    'shield',
  ],
  armor: [
    'armor',
  ],
  gloves: [
    'gloves',
  ]
  helmet: [
    'helmet',
  ],
  boots: [
    'boots',
  ],
  ship: [
    'ship',
  ],
  // aircraft: [
  //   'aircraft',
  // ],
  // 所有首饰的 category 都是 jewelry
  jewelry: [
    'ring',
    'amulet',
    // 'belt',
  ],
  talisman: [
    'pearl',
  ],
}

const kEquipmentKinds = [
  ...kEquipmentCategoryKinds.weapon,
  ...kEquipmentCategoryKinds.shield,
  ...kEquipmentCategoryKinds.armor,
  ...kEquipmentCategoryKinds.gloves,
  ...kEquipmentCategoryKinds.helmet,
  ...kEquipmentCategoryKinds.boots,
  ...kEquipmentCategoryKinds.ship,
  // ...kEquipmentCategoryKinds.aircraft,
  ...kEquipmentCategoryKinds.jewelry,
  ...kEquipmentCategoryKinds.talisman, // 非以上四种的物品都算作法器 talisman
]

const kItemCategoryBoots = 'boots'
const kItemCategoryShip = 'ship'
const kItemCategoryAircraft = 'aircraft'

function calculatePrice(item) {
  item.price = (item.rank + 1) * (item.level + 1) *
    (item.affixes?.length ?? 0 + 1) * (Constants.basePriceByCategory[item.category] ?? 1)
}

const kTalismanEnergyTypes = [
  'start_battle_with_energy_positive_spell',
  'start_battle_with_energy_positive_weapon',
  'start_battle_with_energy_positive_unarmed',
  'start_battle_with_energy_positive_ultimate',
]

const kArmorResistPassives = [
  'physicalResist',
  'elementalResist',
]

const kStatusSpiritPassives = [
  'physicalResist',
  'elementalResist',
  'chiResist',
  'psychicResist',
  'unarmedAttack',
  'weaponAttack',
  'spellAttack',
  'curseAttack',
  'lifeMax',
  'manaMax',
  'chakraMax',
  'karmaMax',
]

struct Equipment {
  constructor ({
    id,
    name,
    icon,
    flavortext,
    category,
    kind,
    rarity,
    rank,
    level,
    isIdentified = true,
  }) {
    this.id = id ?? crypto.randomUID(withTime: true)
    this.entityType = kEntityTypeItem
    this.createdTimestamp = game.timestamp
    this.isIdentified = isIdentified
    this.isEquippable = true

    this.kind = kind
    this.category = category
    if (category == null) {
      if (this.kind != null) {
        final categories = [...kEquipmentCategoryKinds.keys]
        this.category = categories.firstWhere((key) {
          return kEquipmentCategoryKinds[key].contains(this.kind)
        })
      } else {
        this.category = kEquipmentCategoryKinds.keys.random
        this.kind = kEquipmentCategoryKinds[this.category].random
      }
    }
    assert(kEquipmentCategoryKinds.containsKey(this.category))
    if (this.kind == null) {
      this.kind = kEquipmentCategoryKinds[this.category].random
    }
    assert(kEquipmentKinds.contains(this.kind))
    this.name = name ?? generateTalismanName(kind: this.kind)

    if (rarity != null) {
      assert(kRarity.containsKey(rarity))
      this.rarity = rarity
      this.rank = kRarity[rarity].rank
    } else if (rank != null) {
      assert(rank >= 0 && rank <= kCultivationRankMax)
      this.rank = rank
      this.rarity = kRankRarity[rank]
    } else {
      this.rank = 0
      this.rarity = kRarityCommon
    }
    this.icon = icon ?? 'item/${this.kind}.png'

    final minLevel = minLevelForRank(this.rank)
    final maxLevel = maxLevelForRank(this.rank)
    level ??= getRandomLevel(minLevel, maxLevel)
    // 这里要再判断一次，因为可能是从外部传入的 level
    this.level = level.clamp(Math.max(1, minLevel), maxLevel)

    let mainAffix
    let passiveRawData
    this.affixes = []
    this.affixUniqueIds = Set()
    // category 决定了能装备的数量
    // weapon, armor, helmet, boots, vehicle，talisman
    switch(this.category) {
      'weapon', 'boots', 'ship': {
        // 武器的固定词条是允许使用该类卡牌
        passiveRawData = game.passives['equipment_${this.kind}']
        assert(passiveRawData != null, 'kind: ${this.kind}')
      }
      'shield', 'armor', 'gloves', 'helmet': {
        // 护甲的固定词条获得元素或物理抗性
        final resistType = kArmorResistPassives.random
        passiveRawData = game.passives[resistType]
        assert(passiveRawData != null, 'resistType: ${resistType}')
      }
      'jewelry': {
        // 饰品的固定词条是获得主属性
        final attributeType = Constants.battleAttributes.random
        passiveRawData = game.passives[attributeType]
        assert(passiveRawData != null, 'attributeType: ${attributeType}')
      }
      else: {
        // 法器的固定词条是获得资源
        final energytype = kTalismanEnergyTypes.random
        passiveRawData = game.passives[energytype]
        assert(passiveRawData != null, 'energytype: ${energytype}')
      }
    }
    mainAffix = Object.create(passiveRawData)
    mainAffix.level = this.level
    if (mainAffix.increment != null) {
      if (mainAffix.increment < 1) {
        final minAffixLevel = (1 / mainAffix.increment).ceil()
        if (this.level < minAffixLevel) {
          this.level = minAffixLevel
        }
      }
      mainAffix.value = (mainAffix.increment * this.level).round()
    }
    this.affixes.add(mainAffix)
    this.affixUniqueIds.add(mainAffix.uniqueId ?? mainAffix.id)
    
    // 在 category 赋值之后才能获取风味文本
    this.flavortext = flavortext ?? engine.locale('${this.category}_flavortext')

    // 根据境界，生成额外词条
    final affixCountInfo = getMinMaxExtraAffixCount(this.rank)
    let affixCount = affixCountInfo.minExtra
    if (affixCountInfo.maxExtra > 0) {
      if (affixCount < affixCountInfo.maxExtra) {
        affixCount += random.nextInt(affixCountInfo.maxExtra - affixCount + 1)
      }
    }
    if (affixCount > 0) {
      for (var i in range(affixCount)) {
        final supportAffixes = game.passives.values.where((affix) {
          if (!affix.isItemAffix) return false
          if (this.affixUniqueIds.contains(affix.id) ||
            (affix.uniqueId != null && this.affixUniqueIds.contains(affix.uniqueId))) return false
          if (affix.kind is List && !affix.kind.contains(this.kind)) return false
          if (affix.rank > this.rank) return false
          return true
        })
        if (supportAffixes.isEmpty) {
          throw('Found no support affix for item: category: ${this.category}, kind: ${this.kind}, rank: ${this.rank}')
        }
        
        final affix = Object.create(random.nextIterable(supportAffixes))
        if (affix.increment != null) {
          affix.level = getRandomLevel(kItemExtraAffixMinLevel, this.level)
          affix.value = (affix.increment * affix.level).round()
        }
        this.affixes.add(affix)
        this.affixUniqueIds.add(affix.uniqueId ?? affix.id)
      }
    }

    calculatePrice(this)

    this.experienced = []
  }
}

struct EquipmentAffix {
  constructor ({
    kind,
    affix,
  }) {
    assert(kind != null, 'EquipmentAffix constructor error: kind: ${kind}')
    assert(affix != null, 'EquipmentAffix constructor error: affix: ${affix}')
    this.kind = kind
    this.affixes = [Object.create(affix)]
    
    this.id = crypto.randomUID(withTime: true)
    this.name = engine.locale('equipment_affix')
    this.icon = 'item/affix.png'
    this.category = kItemCategoryEquipmentAffix
  }
}

// 地牢中获得的临时性buff，占据一个法宝栏位，并且无法取下
struct StatusSpirit {
  constructor({
    id,
    icon,
    rank,
  }) {
    assert(rank != null, 'StatusSpirit constructor error: rank: ${rank}')

    this.id = id ?? crypto.randomUID(withTime: true)
    this.name = generateMaterialName(category: 'spectre', rarity: 'legendary')
    this.entityType = kEntityTypeItem
    this.isIdentified = true
    this.isEquippable = true
    this.isCursed = true
    this.isUntradable = true
    this.category = kItemCategoryStatusSpirit
    // 这里的rank是生成此buff的地牢的境界
    this.rank = rank.clamp(1, kCultivationRankMax)
    this.rarity = kRankRarity[rank]
    this.icon = icon ?? 'item/status_spirit.png'

    final minLevel = minLevelForRank(rank)
    final maxLevel = maxLevelForRank(rank)
    this.level = getRandomLevel(minLevel, maxLevel)

    let mainAffix
    this.affixes = []
    this.affixUniqueIds = Set()

    final statusType = kStatusSpiritPassives.random
    final passiveRawData = game.passives[statusType]
    assert(passiveRawData != null, statusType)
    mainAffix = Object.create(passiveRawData)

    assert(mainAffix.increment != null)
    if (mainAffix.increment < 1) {
      final minAffixLevel = (1 / mainAffix.increment).ceil()
      if (this.level < minAffixLevel) {
        this.level = minAffixLevel
      }
    }
    mainAffix.level = this.level

    final isAfflicted = Random().nextBool()
    if (isAfflicted) {
      mainAffix.level = -mainAffix.level
    }

    mainAffix.value = (mainAffix.increment * mainAffix.level).round()

    this.affixes.add(mainAffix)
    this.affixUniqueIds.add(mainAffix.uniqueId ?? mainAffix.id)
    
    // 在 category 赋值之后才能获取风味文本
    this.flavortext = engine.locale('status_spirit_flavortext')

    // 根据境界，生成额外词条
    final affixCountInfo = getMinMaxExtraAffixCount(this.rank)
    let affixCount = affixCountInfo.maxExtra
    assert(affixCount > 0)
    for (var i in range(affixCount)) {
      final supportAffixes = game.passives.values.where((affix) {
        if (!affix.isItemAffix) return false
        if (this.affixUniqueIds.contains(affix.id) ||
          (affix.uniqueId != null && this.affixUniqueIds.contains(affix.uniqueId))) return false
        if (affix.kind is List && !affix.kind.contains(this.kind)) return false
        if (affix.rank > this.rank) return false
        return true
      })
      if (supportAffixes.isEmpty) {
        throw('Found no support affix for item: category: ${this.category}, kind: ${this.kind}, rank: ${this.rank}')
      }
      
      final affix = Object.create(random.nextIterable(supportAffixes))
      if (affix.increment != null) {
        affix.level = getRandomLevel(kItemExtraAffixMinLevel, this.level)
        affix.value = (affix.increment * affix.level).round()
      }
      this.affixes.add(affix)
      this.affixUniqueIds.add(affix.uniqueId ?? affix.id)
    }
  }
}

function createItemByPrototype(prototypeId, {amount, level, itemId}) {
  amount ??= 1
  assert(amount > 0)
  // TODO: 如果id不存在，则获得一个「未知物品」
  final prototype = game.prototypes[prototypeId]
  assert(prototype != null, 'prototypeId: ${prototypeId}')
  let item = Object.create(prototype)
  // TODO: 根据稀有度和地图大小决定物品允许存在的数量
  // if (item.isUnique) {
  //   if (item.isCreated) {
  //     engine.debug('唯一物品${item.id}已经被创造过一次，无法再次获得。')
  //     return
  //   } else {
  //     item.isCreated = true
  //   }
  // }
  item.id = itemId ?? (item.isUnique ? crypto.randomUID(withTime: true) : item.prototypeId)
  item.entityType = kEntityTypeItem
  item.kind ??= item.prototypeId
  item.name = engine.locale(item.name)
  if (item.flavortext != null) {
    item.flavortext = engine.locale(item.flavortext)
  }
  // item.name = generateTalismanName(kind: item.kind)
  if (item.rarity != null) {
    assert(kRarity.containsKey(item.rarity))
    item.rank = kRarity[item.rarity].rank
  } else if (item.rank != null) {
    assert(item.rank >= 0 && item.rank <= kCultivationRankMax)
    item.rarity = kRankRarity[item.rank]
  } else {
    item.rank = 0
    item.rarity = kRarityCommon
  }
  item.color ??= kRarity[item.rarity].color
  item.level ??= level
  item.stackSize = amount
  item.experienced = []

  // game.items[item.id] = item

  if (item.affixes != null) {
    let affixes = item.affixes?.toList()
    item.affixes = []
    for (final id in affixes) {
      final affixRawData = game.passives[id]
      assert(affixRawData != null)
      final affix = Object.create(affixRawData)
      if (affix.increment != null) {
        affix.level = level ?? 1
        affix.value = (affix.increment * affix.level).round()
      }
      item.affixes.add(affix)
    }
  }

  item.isIdentified ??= true
  
  if (!item.isUntradable) {
    item.price ??= calculatePrice(item)
  }

  return item
}

function entityHasItem(entity, itemId) {
  assert(entity.inventory != null && itemId != null)
  return entity.inventory[itemId]
}

/// 返回某个对象所拥有的该 category 的物品的数量
function entityHasItemCategory(entity, category) {
  assert(entity.inventory != null && category != null)
  let amount = 0
  for (let item of entity.inventory) {
    if (item.category == category) {
      ++amount
    }
  }
  return amount
}

/// 返回某个对象所拥有的该 category 的物品的数量
function entityHasItemKind(entity, kind) {
  assert(entity.inventory != null && kind != null)
  let amount = 0
  for (let item of entity.inventory) {
    if (item.kind == kind) {
      amount += item.stackSize ?? 1
    }
  }
  return amount
}

/// 在背包中查找并返回该 kind 的物品
function firstItemKindInCategory(entity, category) {
  assert(entity.inventory != null && category != null)
  for (let item of entity.inventory) {
    if (item.category == category) {
      return item
    }
  }
  return null
}

/// 在背包中查找并返回该 kind 的物品
function firstItemKindInInventory(entity, kind) {
  assert(entity.inventory != null && kind != null)
  for (let item of entity.inventory) {
    if (item.kind == kind) {
      return item
    }
  }
  return null
}

/// 直接获得资源
function entityCollect(entity, materialId: string, { amount = 1, incurIncident = true }) {
  if (amount <= 0) {
    engine.warn('entity [${entity.id}] collect [${materialId}] amount <=0')
    return
  }
  assert(kMaterialKinds.contains(materialId))
  entity.materials[materialId] += amount

  let incidentContent = engine.locale('characterAcquireMultiple', interpolations: [
    entity.name,
    amount,
    engine.locale(materialId),
  ])
  if (incurIncident && entity.entityType == 'character') {
    Incident(
      message: incidentContent,
      subjectId: entity.id,
      isPrivate: true,
    )
  } else {
    engine.debug(incidentContent)
  }
}

function entityAcquireById(entity, itemId, { amount = 1, incurIncident = true }) {
  assert(amount > 0)

  final item = createItemByPrototype(itemId)

  entity.inventory[item.id] = item
  item.ownerId = entity.id
  item.ownerType = entity.entityType
  item.stackSize = amount ?? 1

  let incidentContent
  incidentContent = engine.locale('characterAcquire', interpolations: [
    entity.name,
    item.name,
  ])
  if (incurIncident && entity.entityType == 'character') {
    Incident(
      message: incidentContent,
      subjectId: entity.id,
      item: item,
      isPrivate: true,
    )
  } else {
    engine.debug(incidentContent)
  }

  return item
}

/// 消费资源，返回是否成功消费了指定的数量
function entityExhaust(entity, materialId: string, { amount = 1 }) -> bool {
  assert(kMaterialKinds.contains(materialId))
  if (amount <= 0) {
    engine.warn('entity [${entity.id}] exhaust [${materialId}] amount <=0')
    return true
  }
  let success = false
  final existed = entity.materials[materialId]
  let rest = existed - amount
  if (rest >= 0) {
    success = true
    entity.materials[materialId] = rest
    
    let incidentContent = engine.locale('characterLoseMultiple', interpolations: [
      entity.name,
      amount,
      engine.locale(materialId),
    ])
    engine.debug(incidentContent)
    // if (incurIncident && entity.entityType == 'character') {
    //   Incident(
    //     message: incidentContent,
    //     subjectId: entity.id,
    //     isPrivate: true,
    //   )
    // } else {
    //   engine.debug(incidentContent)
    // }
  }

  return success
}

/// 对象（人物、据点等）获得一个已经存在与世界上的物品
function entityAcquire(entity, item, { incurIncident = true }) {
  assert(item.entityType == kEntityTypeItem, '${item.entityType}')

  let amount = item.stackSize ?? 1
  let acquiredItem

  if (entity.inventory.containsKey(item.id)) {
    acquiredItem = entity.inventory[item.id]
    acquiredItem.stackSize += amount
  } else {
    acquiredItem = entity.inventory[item.id] = item
    acquiredItem.ownerId = entity.id
    acquiredItem.ownerType = entity.entityType
  }

  if (entity.achievements) {
    acquiredItem.acquiredSequence = entity.achievements.acquiredItems
    ++entity.achievements.acquiredItems
  }

  let incidentContent
  if (amount > 1) {
    incidentContent = engine.locale('entityAcquireMultiple', interpolations: [
      entity.name,
      amount,
      item.name,
    ])
  } else {
    incidentContent = engine.locale('entityAcquire', interpolations: [
      entity.name,
      item.name,
    ])
  }
  if (incurIncident && entity.entityType == 'character') {
    Incident(
      message: incidentContent,
      subjectId: entity.id,
      item: acquiredItem,
      isPrivate: true,
    )
  } else {
    engine.debug(incidentContent)
  }
}

/// 失去指定数量的某个物品，返回实际失去的数量
function entityLose(entity, item, { amount = 1, incurIncident = true }) {
  assert(entity.inventory.containsKey(item.id))
  final count = Math.min(amount, item.stackSize ?? 1)
  assert(count > 0)
  if (item.stackSize > amount) {
    item.stackSize -= count
    if (item.stackSize <= 0) {
      delete entity.inventory[item.id]
    }
  } else if (item.stackSize <= amount) {
    delete entity.inventory[item.id]
  }

  let incidentContent
  if (count > 1) {
    incidentContent = engine.locale('entityLoseMultiple', interpolations: [
      entity.name,
      count,
      item.name,
    ])
  } else {
    incidentContent = engine.locale('entityLose', interpolations: [
      entity.name,
      item.name,
    ])
  }
  engine.debug(incidentContent)

  // let incidentContent
  // incidentContent = engine.locale('entityLose', interpolations: [
  //   entity.name,
  //   item.name,
  // ])
  // if (incurIncident && entity.entityType == 'character') {
  //   Incident(
  //     message: incidentContent,
  //     subjectId: entity.id,
  //     item: item,
  //     isPrivate: true,
  //   )
  // } else {
  //   engine.debug(incidentContent)
  // }

  return count
}

/// 失去指定数量的某个物品种类，返回实际失去的数量
function entityLoseItemKind(entity, kind, amount, { incurIncident = true }) {
  assert(entity.inventory != null)
  let rest = amount
  for (let item of entity.inventory) {
    if (item.kind == kind) {
      final count = entityLose(entity, item, { amount: rest, incurIncident: incurIncident })
      rest -= count
      if (rest <= 0) break
    }
  }
  return amount - rest
}

function characterAcquireBattleCard(character, card, { incurIncident = true }) {
  assert(!character.cardLibrary.containsKey(card.id))
  assert(card.entityType == kEntityTypeBattleCard, '${card.entityType}')

  character.cardLibrary[card.id] = card
  card.acquiredSequence = character.achievements.acquiredBattleCards
  ++character.achievements.acquiredBattleCards

  let incidentContent
  incidentContent = engine.locale('characterLearn', interpolations: [
    character.name,
    card.name,
  ])
  if (incurIncident && character.entityType == 'character') {
    Incident(
      message: incidentContent,
      subjectId: character.id,
      card: card,
      isPrivate: true,
    )
  } else {
    engine.debug(incidentContent)
  }
}

/// 按配置获取宝箱内的物品
/// 分为四种：材料，预定义物品，装备，卡包
/// category: ['material', 'prototype', 'equipment', 'cardpack']
/// items = [
///   {
///     type: 'material',
///     kind: 'money',
///     amount: 100,
///   },
///   {
///     type: 'prototype',
///     prototypeId: 'exp_pack',
///   },
///   {
///     type: 'equipment',
///     kind: 'sword',
///     rarity: 'common',
///     rank: 0,
///     level: 0,
///   },
///   {
///     type: 'cardpack',
///     kind: 'punch',
///     genre: null,
///     rank: 0,
///   },
/// ]
function getItemsFromLootbox(box) {
  final items = []
  for (final itemInfo in box.items) {
    final amount = itemInfo.amount ?? 1
    switch (itemInfo.type) {
      // 'exp': {
      //   final pack = Exp(amount: amount)
      //   items.add(pack)
      // }
      'material': {
        assert(kMaterialKinds.contains(itemInfo.kind))
        final pack = Materialpack(kind: itemInfo.kind, amount: amount)
        items.add(pack)
      }
      'prototype': {
        assert(game.items.contains(itemInfo.kind))
        for (var i in range(amount)) {
          final created = createItemByPrototype(itemInfo.prototypeId)
          items.add(created)
        }
      }
      'equipment': {
        assert(kEquipmentKinds.contains(itemInfo.kind))
        for (var i in range(amount)) {
          final equipment = Equipment(
            kind: itemInfo.kind,
            rarity: itemInfo.rarity,
            rank: itemInfo.rank,
            level: itemInfo.level,
          )
          items.add(equipment)
        }
      }
      'cardpack': {
        for (var i in range(amount)) {
          final cardpack = Cardpack(
            category: itemInfo.category,
            kind: itemInfo.kind,
            genre: itemInfo.genre,
            rank: itemInfo.rank,
            isBasic: itemInfo.isBasic,
          )
          items.add(cardpack)
        }
      }
    }
  }
  return items
}

// 如果成功支付返回 0，否则返回 欠缺的数量
// 支付身上的材料作为货币
// function pay(target, materialId, amount, entity, { isForced = false, incurIncident = true }) {
//   if (value < 0) {
//     engine.error('函数 giveMoney 调用时的金额参数无效（小于 0）。')
//     return
//   }
//   if (value == 0) return

  // const goldValue = value ~/ kGoldExchange
  // let rest = value - goldValue
  // const restAfterGold = give(entity, target, 'item.goldCoin', amount: goldValue)
  // rest += restAfterGold

  // const silverValue = rest ~/ kSilverExchange
  // let rest = value - silverValue
  // const restAfterSilver = give(entity, target, 'item.silverCoint', amount: silverValue)
  // rest += restAfterSilver

  // const money = entity.materialId
  // if (money != null && money.stackSize >= value) {
  //   give(entity, target, money.id, amount: value, isForced: isForced, incurIncident: incurIncident)
  //   return true
  // }
  // return false
// }

// 某个对象将其拥有的物品交给另一个对象
// isForced 如果为 true，表示 target 强行夺取了 entity 的物品
// 将会立刻移除该物品，不要在物品栏循环中使用这个函数
// 此函数即便数量不够也会尽量支付
// 如果成功提供足够数量的指定物品，返回 0，否则返回 欠缺的数量
// function give(entity, target, itemId, { amount, removeItem = true, isForced = false, incurIncident = true}) {
//   if (amount <= 0) return 0
//   let rest = amount ?? 1
//   if (!entity.inventory.containsKey(itemId)) {
//     engine.warn('${entity.id} 没有 ${item.id} ，无法支付。')
//     return rest
//   }
//   const item = entity.inventory[itemId]
//   amount ??= item.stackSize ?? 1
//   if (item.equippedPosition) unequip(entity, item)
//   let incidentContent

//   let actualNumber = amount
//   if (item.stackSize > amount) {
//     item.stackSize -= amount
//   } else if (item.stackSize < amount) {
//     // 身上的数量不够支付
//     actualNumber = item.stackSize
//     engine.warn('${entity.id} 身上的 ${item.id} 不够 ${amount} 个，实际数量：${actualNumber}。')
//     delete entity.inventory[item.id]
//   } else {
//     // 数量刚好
//     delete entity.inventory[item.id]
//   }
//   rest = amount - actualNumber
//   if (target.inventory.containsKey(item.id)) {
//     target.inventory[item.id].stackSize += actualNumber
//   } else {
//     const itemCopy = item.clone()
//     itemCopy.stackSize = actualNumber
//     target.inventory[itemCopy.id] = itemCopy
//   }
//   if (amount > 1) {
//     incidentContent = isForced ?
//       engine.locale('characterGiveMultipleItemForced', interpolations: [
//         target.name,
//         entity.name,
//         amount,
//         item.name,
//       ]) :
//       engine.locale('characterGiveMultipleItem', interpolations: [
//         entity.name,
//         amount,
//         item.name,
//         target.name,
//       ])
//   } else {
//     incidentContent = isForced ?
//       engine.locale('characterGiveItemForced', interpolations: [
//         target.name,
//         entity.name,
//         amount,
//         item.name,
//       ]) :
//       engine.locale('characterGiveItem', interpolations: [
//         entity.name,
//         amount,
//         item.name,
//         target.name,
//       ])
//   }

//   if (incurIncident) {
//     let subjectIds
//     let objectIds
//     if (isForced) {
//       subjectIds = entity.isMain ? [entity.id] : null
//       objectIds = target.isMain ? [target.id] : null
//     } else {
//       subjectIds = target.isMain ? [target.id] : null
//       objectIds = entity.isMain ? [entity.id] : null
//     }
//     Incident(
//       message: incidentContent,
//       subjectIds: subjectIds,
//       objectIds: objectIds,
//       isPrivate: true,
//     )
//   }

//   return rest
// }


// 战斗胜利后，根据情况获得战利品
// 如果对方逃跑，则随机获得对方一部分物品
// 否则，如果对方活着，则根据我们对其投降的处理方案（杀死活着放走）
// function characterLoot(character, target, { takeAll = false, incurIncident = true }) {
//   if (takeAll) {
//     // 为了避免在循环中修改 iterable，先提取出 id 列表
//     const itemIds = target.inventory.keys.toList()
//     for (const itemId in itemIds) {
//       give(target, character, itemId, isForced: true, incurIncident: incurIncident)
//     }
//     if (target.money) {
//       giveMoney(target, character, target.money, isForced: true, incurIncident: incurIncident)
//     }
//   } else {
//     // 为了避免在循环中修改 iterable，先提取出 id 列表
//     const itemIds = target.inventory.keys.toList()
//     for (const itemId in itemIds) {
//       const stackSize = target.inventory[itemId].stackSize
//       if (random.nextDouble() < kEscapedLootProbability) {
//         let amount = stackSize > 1 ? random.nextInt(stackSize) + 1 : 1
//         give(target, character, itemId, amount: amount, isForced: true, incurIncident: incurIncident)
//       }
//     }
//     if (target.money && random.nextDouble() < kEscapedLootProbability) {
//       giveMoney(target, character, random.nextInt(target.money) + 1, isForced: true, incurIncident: incurIncident)
//     }
//   }
// }
