import '../entity.ht'
import '../../game/data.ht'
import '../../random.ht'
import '../../incident.ht'
import '../../name/talisman.ht'
import 'material.ht'

// category 的作用：
// weapon, armor, helmet, boots, vehicle 每种只能装备一个，amulet 和 talisman 无限制
// weapon 和 talisman 决定了战斗中可以使用的功法卡牌类型

const kItemCategoryCardpack = 'cardpack'
const kItemCategoryScroll = 'scroll'

// kind 决定了物品名字的生成方式
// weapon具体分为：sabre, sword, spear, staff, bow, dart, music
// talisman具体分为：buff, ongoing, consume
// 其他情况下 kind == type

const kEquipmentMax = 6

// 所有武器的category都是weapon
const kWeaponKinds = [
  'sword',
  'sabre',
  'staff',
  'spear',
  'bow',
  'dart',
  'pipa',
  'flute',
]

// 每种护甲是一个单独的category
const kArmorKinds = [
  'armor',
  'gloves',
  'boots',
  'helmet',
  'shield',
]

// 所有载具的category都是vehicle
const kVehicleKinds = [
  'ship',
  'aircraft',
]

// 所有首饰的category都是jewelry
const kJewelryKinds = [
  'amulet',
  'ring',
  'belt',
]

const kEquipmentKinds = [
  ...kWeaponKinds,
  ...kArmorKinds,
  ...kVehicleKinds,
  ...kJewelryKinds,
  'talisman', // 非以上四种的物品都算作法宝 talisman
]

// 实际上进攻类装备也可能具有防御效果，因此这里的类型仅用于显示而已
const kItemKindShip = 'ship'
const kItemKindBoots = 'boots'
const kItemKindAircraft = 'aircraft'

function getItemExtraAffixes(item) {
  assert(game.passives != null)

  final itemExtraAffixes = game.passives.values.where((affix) {
    if (!affix.isItemExtraAffix) return false
    if (affix.kind is List && !affix.kind.contains(item.kind)) return false
    if (affix.rank > item.rank) return false
    if (item.affixUniqueIds.contains(affix.id)) return false
    return true
  })
  if (itemExtraAffixes.isEmpty) {
    throw('Found no support affix for item: category: ${item.category}, kind: ${item.kind}, rank: ${item.rank}')
  }
  return itemExtraAffixes
}

/// 材料包类物品在获得后，可以自动转化为材料数值
struct Materialpack {
  constructor ({
    id,
    kind,
    amount,
    rarity,
    price,
  }) {
    assert(kind != null)

    this.id = id ?? crypto.randomUID(withTime: true)

    this.entityType = kEntityTypeItem
    this.rarity = kRare
    this.color = kRarity[this.rarity].color
    this.name = engine.locale('${kind}_package')
    this.icon = 'item/material/${kind}.png'

    this.category = kEntityCategoryMaterial
    this.kind = kind
    this.description = engine.locale('${kind}_description')
    this.flavortext = engine.locale('materialpack_flavortext')
    this.stackSize = amount ?? 1
    this.showStack = true
    
    this.isIdentified = true
    this.isUsable = true
  }
}

struct Equipment {
  constructor({
    id,
    name,
    icon,
    flavortext,
    kind,
    rarity,
    rank,
    level,
    isIdentified = true,
  }) {
    this.entityType = kEntityTypeItem
    this.createdTimestamp = game.timestamp
    this.isIdentified = isIdentified
    this.isEquippable = true

    assert(kind != null)
    this.kind = kind;

    this.id = id ?? crypto.randomUID(withTime: true)
    this.name = name ?? generateTalismanName(kind: this.kind)
    this.flavortext = flavortext ?? engine.locale('${this.kind}_flavortext')

    if (rarity != null) {
      assert(kRarity.containsKey(rarity))
      this.rarity = rarity
      this.rank = kRarity[rarity].rank
    } else if (rank != null) {
      assert(rank >= 0 && rank <= kCultivationRankMax)
      this.rank = rank
      this.rarity = kRankRarity[rank]
    }
    this.icon = icon ?? 'item/${this.kind}.png'
    
    this.minLevel = minLevelForRank(this.rank)
    this.maxLevel = maxLevelForRank(this.rank)

    level ??= getRandomLevel(this.minLevel, this.maxLevel)
    assert(level >= this.minLevel && level <= this.maxLevel)
    this.level = level
    this.experienced = []

    this.affixes = []

    // category 决定了能装备的数量
    // weapon, armor, helmet, boots, vehicle，talisman
    if (kWeaponKinds.contains(this.kind)) {
      this.category = 'weapon'
      // 武器的固定词条是允许使用该类卡牌
      final passiveRawData = game.passives['equipment_${this.kind}']
      assert(passiveRawData != null)
      this.affixes.add(Object.create(passiveRawData))
    } else if (kArmorKinds.contains(this.kind)) {
      this.category = this.kind
    } else if (kVehicleKinds.contains(this.kind)) {
      this.category = 'vehicle'
    } else if (kJewelryKinds.contains(this.kind)) {
      this.category = 'jewelry'
    } else {
      this.category = 'talisman'
    }

    // 根据境界，生成额外词条
    final affixCountInfo = getMinMaxExtraAffixCount(this.rank)
    let affixCount = affixCountInfo.minExtra
    if (affixCountInfo.maxExtra > 0) {
      if (affixCount < affixCountInfo.maxExtra) {
        let r = random.nextDouble()
        if (r >= 0.15) {
          ++affixCount
        }
      }
    }
    this.affixUniqueIds = Set()
    if (affixCount > 0) {
      for (var i in range(affixCount)) {
        final supportAffixes = getItemExtraAffixes(this)
        final affixRawData = random.nextIterable(supportAffixes)
        final affix = Object.create(affixRawData)
        if (affix.increment != null) {
          affix.level = getRandomLevel(this.minLevel, this.level)
          affix.value = (affix.increment * affix.level).round()
        }
        this.affixes.add(affix)
        this.affixUniqueIds.add(affix.id)
      }
    }

    // 该对象知道的事情
    // 保存的是incident的index
    this.known = []

    calculatePrice(this)
  }
}

function createItemByPrototype(prototypeId, {level, itemId}) {
  // print('acquiring: ${itemId}')
  // TODO: 如果id不存在，则获得一个「未知物品」
  final prototype = game.itemPrototypes[prototypeId]
  assert(prototype != null)
  let item = Object.create(prototype)
  // TODO: 根据稀有度和地图大小决定物品允许存在的数量
  // if (item.isUnique) {
  //   if (item.isCreated) {
  //     engine.debug('唯一物品${item.id}已经被创造过一次，无法再次获得。')
  //     return
  //   } else {
  //     item.isCreated = true
  //   }
  // }
  item.id = item.isUnique ? item.prototypeId : (itemId ?? crypto.randomUID(withTime: true))
  item.entityType = kEntityTypeItem
  item.name = engine.locale(item.name)
  item.flavortext = engine.locale('${prototypeId}_flavortext')
  // item.name = generateTalismanName(kind: item.kind)
  item.rarity ??= 'basic'
  item.color ??= kRarity[item.rarity].color
  item.level = level
  item.experienced = []

  // game.items[item.id] = item

  if (item.affixes != null) {
    let affixes = item.affixes?.toList()
    item.affixes = []
    for (final id in affixes) {
      final affixRawData = game.passives[id]
      assert(affixRawData != null)
      final affix = Object.create(affixRawData)
      if (affix.increment != null) {
        affix.level = level ?? 1
        affix.value = (affix.increment * affix.level).round()
      }
      item.affixes.add(affix)
    }
  }

  item.isIdentified ??= true
  
  if (!item.isUntradable) {
    item.price ??= calculatePrice(item)
  }

  return item
}

function entityHasItem(entity, itemId) {
  assert(entity.inventory != null && itemId != null)
  return entity.inventory.containsKey(itemId)
}

/// 返回某个对象所拥有的该 category 的物品的数量
function entityHasItemCategory(entity, category) {
  assert(entity.inventory != null && category != null)
  let amount = 0
  for (let item of entity.inventory) {
    if (item.category == category) {
      ++amount
    }
  }
  return amount
}

/// 返回某个对象所拥有的该 kind 的物品的数量
function entityHasItemKind(entity, kind) {
  assert(entity.inventory != null && kind != null)
  let amount = 0
  for (let item of entity.inventory) {
    if (item.kind == kind) {
      ++amount
    }
  }
  return amount
}

function entityHasEquippedItemKind(entity, itemKind) {
  assert(entity.inventory != null && itemKind != null) 
  for (let itemId in entity.equipments) {
    final item = entity.inventory[itemId]
    if (item.kind == itemKind) {
      return true
    }
  }
  return false
}

/// 直接获得资源
function entityCollect(entity, materialId: string, { amount = 1, incurIncident = true }) {
  assert(amount > 0)
  assert(kMaterialKinds.contains(materialId))
  entity.materials[materialId] += amount

  let incidentContent = engine.locale('characterAcquireMultiple', interpolations: [
    entity.name,
    amount,
    engine.locale(materialId),
  ])
  if (incurIncident) {
    Incident(
      message: incidentContent,
      subjectId: entity.id,
      isPrivate: true,
    )
  }
  engine.debug(incidentContent)
}

function entityAcquireById(entity, itemId, { amount = 1, incurIncident = true }) {
  assert(amount > 0)

  for  (const i in range(amount)) {
    final item = createItemByPrototype(itemId)

    entity.inventory[item.id] = item
    item.ownerId = entity.id
    item.ownerType = entity.entityType

    let incidentContent
    incidentContent = engine.locale('characterAcquire', interpolations: [
      entity.name,
      item.name,
    ])
    if (incurIncident) {
      Incident(
        message: incidentContent,
        subjectId: entity.id,
        item: item,
        isPrivate: true,
      )
    } else {
      engine.debug(incidentContent)
    }
  }
}

/// 消费资源，返回是否成功消费了指定的数量
function entityExhaust(entity, materialId: string, { amount = 1, incurIncident = true }) -> bool {
  assert(kMaterialKinds.contains(materialId))
  assert(amount > 0)
  let success = false
  final existed = entity.materials[materialId]
  let rest = existed - amount
  if (rest >= 0) {
    success = true
    entity.materials[materialId] = rest
    
    let incidentContent = engine.locale('characterLoseMultipleItem', interpolations: [
      entity.name,
      amount,
      engine.locale(materialId),
    ])
    if (incurIncident) {
      Incident(
        message: incidentContent,
        subjectId: entity.id,
        isPrivate: true,
      )
    } else {
      engine.debug(incidentContent)
    }
  }

  return success
}

/// TODO: 丢下物品
function entityDiscard(entity, item) {

}

/// TODO: 摧毁物品
function entityDestroy(entity, item, { incurIncident = true }) {

  entityLose(entity, item)

  // let incidentContent
  // incidentContent = engine.locale('characterDestroy', interpolations: [
  //   character.name,
  //   item.name,
  // ])
  // if (incurIncident) {
  //   Incident(
  //     message: incidentContent,
  //     subjectId: character.id,
  //     // itemId: item.id, // 物品已经销毁了，无需再在物品上面记录历史
  //     isPrivate: true,
  //   )
  // } else {
  //   engine.debug(incidentContent)
  // }
}

/// 对象（人物、据点等）获得一个已经存在与世界上的物品
function entityAcquire(entity, item, { incurIncident = true }) {
  assert(!entity.inventory.containsKey(item.id))

  // item.isNew = true
  item.ownerId = entity.id
  item.ownerType = entity.entityType

  entity.inventory[item.id] = item
  item.acquiredSequence = entity.achievements.acquiredItems
  ++entity.achievements.acquiredBattleCards

  let incidentContent
  incidentContent = engine.locale('entityAcquire', interpolations: [
    entity.name,
    item.name,
  ])
  if (incurIncident) {
    Incident(
      message: incidentContent,
      subjectId: entity.id,
      item: item,
      isPrivate: true,
    )
  } else {
    engine.debug(incidentContent)
  }
}

/// 失去物品
function entityLose(entity, item, { incurIncident = true }) {
  assert(entity.inventory.containsKey(item.id))
  delete entity.inventory[item.id]
  delete item.ownerId
  delete item.ownerType

  let incidentContent
  incidentContent = engine.locale('entityLose', interpolations: [
    entity.name,
    item.name,
  ])
  if (incurIncident) {
    Incident(
      message: incidentContent,
      subjectId: entity.id,
      item: item,
      isPrivate: true,
    )
  } else {
    engine.debug(incidentContent)
  }
}

function entityAcquireBattleCard(entity, card, { incurIncident = true }) {
  assert(!entity.cardLibrary.containsKey(card.id))

  entity.cardLibrary[card.id] = card
  if (entity.entityType == 'character') {
    card.acquiredSequence = entity.achievements.acquiredBattleCards
    ++entity.achievements.acquiredBattleCards
  }

  let incidentContent
  incidentContent = engine.locale('entityAcquire', interpolations: [
    entity.name,
    card.name,
  ])
  if (incurIncident) {
    Incident(
      message: incidentContent,
      subjectId: entity.id,
      card: card,
      isPrivate: true,
    )
  } else {
    engine.debug(incidentContent)
  }
}

// 如果成功支付返回 0，否则返回 欠缺的数量
// 支付身上的材料作为货币
// function pay(target, materialId, amount, entity, { isForced = false, incurIncident = true }) {
//   if (value < 0) {
//     engine.error('函数 giveMoney 调用时的金额参数无效（小于 0）。')
//     return
//   }
//   if (value == 0) return

  // const goldValue = value ~/ kGoldExchange
  // let rest = value - goldValue
  // const restAfterGold = give(entity, target, 'item.goldCoin', amount: goldValue)
  // rest += restAfterGold

  // const silverValue = rest ~/ kSilverExchange
  // let rest = value - silverValue
  // const restAfterSilver = give(entity, target, 'item.silverCoint', amount: silverValue)
  // rest += restAfterSilver

  // const money = entity.materialId
  // if (money != null && money.stackSize >= value) {
  //   give(entity, target, money.id, amount: value, isForced: isForced, incurIncident: incurIncident)
  //   return true
  // }
  // return false
// }

// 某个对象将其拥有的物品交给另一个对象
// isForced 如果为 true，表示 target 强行夺取了 entity 的物品
// 将会立刻移除该物品，不要在物品栏循环中使用这个函数
// 此函数即便数量不够也会尽量支付
// 如果成功提供足够数量的指定物品，返回 0，否则返回 欠缺的数量
// function give(entity, target, itemId, { amount, removeItem = true, isForced = false, incurIncident = true}) {
//   if (amount <= 0) return 0
//   let rest = amount ?? 1
//   if (!entity.inventory.containsKey(itemId)) {
//     engine.warn('${entity.id} 没有 ${item.id} ，无法支付。')
//     return rest
//   }
//   const item = entity.inventory[itemId]
//   amount ??= item.stackSize ?? 1
//   if (item.equippedPosition) unequip(entity, item)
//   let incidentContent

//   let actualNumber = amount
//   if (item.stackSize > amount) {
//     item.stackSize -= amount
//   } else if (item.stackSize < amount) {
//     // char1身上的数量不够支付n
//     actualNumber = item.stackSize
//     engine.warn('${entity.id} 身上的 ${item.id} 不够 ${amount} 个，实际数量：${actualNumber}。')
//     delete entity.inventory[item.id]
//   } else {
//     // 数量刚好
//     delete entity.inventory[item.id]
//   }
//   rest = amount - actualNumber
//   if (target.inventory.containsKey(item.id)) {
//     target.inventory[item.id].stackSize += actualNumber
//   } else {
//     const itemCopy = item.clone()
//     itemCopy.stackSize = actualNumber
//     target.inventory[itemCopy.id] = itemCopy
//   }
//   if (amount > 1) {
//     incidentContent = isForced ?
//       engine.locale('characterGiveMultipleItemForced', interpolations: [
//         target.name,
//         entity.name,
//         amount,
//         item.name,
//       ]) :
//       engine.locale('characterGiveMultipleItem', interpolations: [
//         entity.name,
//         amount,
//         item.name,
//         target.name,
//       ])
//   } else {
//     incidentContent = isForced ?
//       engine.locale('characterGiveItemForced', interpolations: [
//         target.name,
//         entity.name,
//         amount,
//         item.name,
//       ]) :
//       engine.locale('characterGiveItem', interpolations: [
//         entity.name,
//         amount,
//         item.name,
//         target.name,
//       ])
//   }

//   if (incurIncident) {
//     let subjectIds
//     let objectIds
//     if (isForced) {
//       subjectIds = entity.isMain ? [entity.id] : null
//       objectIds = target.isMain ? [target.id] : null
//     } else {
//       subjectIds = target.isMain ? [target.id] : null
//       objectIds = entity.isMain ? [entity.id] : null
//     }
//     Incident(
//       message: incidentContent,
//       subjectIds: subjectIds,
//       objectIds: objectIds,
//       isPrivate: true,
//     )
//   }

//   return rest
// }


// 战斗胜利后，根据情况获得战利品
// 如果对方逃跑，则随机获得对方一部分物品
// 否则，如果对方活着，则根据我们对其投降的处理方案（杀死活着放走）
// function characterLoot(character, target, { takeAll = false, incurIncident = true }) {
//   if (takeAll) {
//     // 为了避免在循环中修改 iterable，先提取出 id 列表
//     const itemIds = target.inventory.keys.toList()
//     for (const itemId in itemIds) {
//       give(target, character, itemId, isForced: true, incurIncident: incurIncident)
//     }
//     if (target.money) {
//       giveMoney(target, character, target.money, isForced: true, incurIncident: incurIncident)
//     }
//   } else {
//     // 为了避免在循环中修改 iterable，先提取出 id 列表
//     const itemIds = target.inventory.keys.toList()
//     for (const itemId in itemIds) {
//       const stackSize = target.inventory[itemId].stackSize
//       if (random.nextDouble() < kEscapedLootProbability) {
//         let amount = stackSize > 1 ? random.nextInt(stackSize) + 1 : 1
//         give(target, character, itemId, amount: amount, isForced: true, incurIncident: incurIncident)
//       }
//     }
//     if (target.money && random.nextDouble() < kEscapedLootProbability) {
//       giveMoney(target, character, random.nextInt(target.money) + 1, isForced: true, incurIncident: incurIncident)
//     }
//   }
// }
