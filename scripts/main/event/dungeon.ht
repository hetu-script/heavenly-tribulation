
const _kBasicRooms = {
  '0': 'chest',
  '1': 'enemy',
  '2': '2portal',
  '3': 'elite',
  '4': 'encampment',
  '5': 'boss',
  '6': 'exit',
}

const _kNormalRooms = {
  '0': 'chest',
  '1': 'enemy',
  '2': '2portal',
  '3': 'enemy',
  '4': '2portal',
  '5': 'enemy',
  '6': 'encampment',
  '7': 'elite',
  '8': '2portal',
  '9': 'enemy',
  '10': '2portal',
  '11': 'enemy',
  '12': 'encampment',
  '13': 'boss',
  '14': '3exit',
}

const _kStartTile = {
  left: 8,
  top: 9,
}
const _kReturnTile = {
  left: 8,
  top: 10,
}
const _kCenterTile = {
  left: 8,
  top: 7,
}
const _kPortal1Tile = {
  left: 8,
  top: 4,
}
const _kPortal2Tile = {
  left: 4,
  top: 6,
}
const _kPortal3Tile = {
  left: 12,
  top: 6,
}
const _kPortal4Tile = {
  left: 6,
  top: 5,
}
const _kPortal5Tile = {
  left: 10,
  top: 5,
}
const _kFunction1 = {
  left: 6,
  top: 6,
}
const _kFunction2 = {
  left: 10,
  top: 6,
}
const _kFunction3 = {
  left: 6,
  top: 8,
}
const _kFunction4 = {
  left: 10,
  top: 8,
}

const _2Portal = [
  _kPortal4Tile,
  _kPortal5Tile,
]

const _3Choices = [
  'merchant',
  'enemy',
  'encounter',
]

const _kDungeonEnemyLevelBonus = {
  tutorial: {
    '2': 1,
    '3': 2,
    '5': 3,
  }
  normal: {
    '2': 1,
    '3': 2,
    '4': 3,
    '5': 4,
    '7': 5,
    '8': 6,
    '9': 7,
    '10': 8,
    '13': 10,
  },
}

const _kEncampmentKinds = [
  'exparray',
  'cardlibrary',
  // 'workbench',
  // 'alchemy_furnace',
]

const _kBasicMerchantKinds = [
  'smith',
  'enchanter',
  'pharmacist',
  'bookdealer',
]

const _kMerchantKinds = [
  'smith',
  'enchanter',
  'pharmacist',
  'bookDealer',
  'alchemist',
  'runeMaster',
  'mysteriousMerchant',
]

const _kEncounterKinds = [
  'spiritWell'
]

function _addEncampment() {
  final collectableLight = (expForLevel(hero.level) ~/ 4) ~/ hero.stats.expGainPerLight
  addExpArray(
    _kFunction1,
    collectableLight: collectableLight,
  )
  addCardLibraryStele(
    _kFunction2,
  )
  addRestBed(_kFunction3)
  _addGeneralMerchant(_kFunction4)
}

function _addGeneralMerchant(tilePosition) {
  addMerchant(
    tilePosition,
    objectId: 'merchant_general',
    name: engine.locale('merchant'),
    sprite: 'object/characterMan31.png',
    rank: game.flags.dungeon.rank,
    money: 500000,
    shard: 5000,
    itemCategories: [
      'weapon',
      'armor',
      'jewelry',
      'talisman',
      'potion',
      'cardpack',
      'identify_scroll',
      'scroll_paper',
      'craftmaterial_addAffix',
      'craftmaterial_replaceAffix',
      'craftmaterial_rerollAffix',
      'craftmaterial_upgrade',
    ],
    itemCount: 12 + game.flags.dungeon.rank,
    useShard: game.flags.dungeon.rank > 0,
  )
}

function _addRandomMerchant() {
  final merchantKind = random.nextIterable(game.flags.dungeon.isBasic ? _kBasicMerchantKinds : _kMerchantKinds)
  switch (merchantKind) {
    'smith': {
      addMerchant(
        _kCenterTile,
        objectId: 'merchant_smith',
        name: engine.locale('smith'),
        sprite: 'object/characterMan31.png',
        rank: game.flags.dungeon.rank,
        money: 500000,
        shard: 5000,
        itemCategories: ['weapon', 'armor'],
        itemCount: 5 + game.flags.dungeon.rank,
        useShard: game.flags.dungeon.rank > 0,
      )
    }
    'enchanter': {
      addMerchant(
        _kCenterTile,
        objectId: 'merchant_enchanter',
        name: engine.locale('enchanter'),
        sprite: 'object/characterMan31.png',
        rank: game.flags.dungeon.rank,
        money: 500000,
        shard: 5000,
        itemCategories: ['jewelry', 'talisman'],
        itemCount: 5 + game.flags.dungeon.rank,
        useShard: game.flags.dungeon.rank > 0,
      )
    }
    'pharmacist': {
      addMerchant(
        _kCenterTile,
        objectId: 'merchant_pharmacist',
        name: engine.locale('pharmacist'),
        sprite: 'object/characterMan31.png',
        rank: game.flags.dungeon.rank,
        money: 500000,
        shard: 5000,
        itemCategories: ['potion'],
        itemCount: 5 + game.flags.dungeon.rank,
        useShard: game.flags.dungeon.rank > 0,
      )
    }
    'bookDealer': {
      addMerchant(
        _kCenterTile,
        objectId: 'merchant_bookdealer',
        name: engine.locale('bookDealer'),
        sprite: 'object/characterMan31.png',
        rank: game.flags.dungeon.rank,
        money: 500000,
        shard: 5000,
        itemCategories: ['cardpack'],
        itemCount: 5 + game.flags.dungeon.rank,
        useShard: game.flags.dungeon.rank > 0,
      )
    }
    'runeMaster': {
      addMerchant(
        _kCenterTile,
        objectId: 'merchant_runemaster',
        name: engine.locale('runeMaster'),
        sprite: 'object/characterMan31.png',
        rank: game.flags.dungeon.rank,
        money: 500000,
        shard: 5000,
        itemCategories: ['scroll_paper', 'identify_scroll'],
        itemCount: 5 + game.flags.dungeon.rank,
        useShard: game.flags.dungeon.rank > 0,
      )
    }
    'alchemist': {
      addMerchant(
        _kCenterTile,
        objectId: 'merchant_alchemist',
        name: engine.locale('alchemist'),
        sprite: 'object/characterMan31.png',
        rank: game.flags.dungeon.rank,
        money: 500000,
        shard: 5000,
        itemCategories: [
          'craftmaterial_addAffix',
          'craftmaterial_replaceAffix',
          'craftmaterial_rerollAffix',
          'craftmaterial_upgrade',
        ],
        itemCount: 5 + game.flags.dungeon.rank,
        useShard: game.flags.dungeon.rank > 0,
      )
    }
    'mysteriousMerchant': {
      addMerchant(
        _kFunction4,
        objectId: 'merchant_mysterious',
        name: engine.locale('mysteriousMerchant'),
        sprite: 'object/characterMan31.png',
        rank: game.flags.dungeon.rank,
        money: 500000,
        shard: 5000,
        itemCategories: [
          'weapon',
          'armor',
          'jewelry',
          'talisman',
          'potion',
        ],
        itemCount: 8 + game.flags.dungeon.rank,
        useShard: game.flags.dungeon.rank > 0,
        isMysterious: true,
        priceFactor: {
          'estimatePriceRange': 'cheap',
        },
      )
    }
  }
}

function _addPortalByKind(id, kind, tilePosition) {
  let hoverContent
  engine.info('添加传送门，类别：${kind} 位置：(${tilePosition.left}, ${tilePosition.top})')
  hoverContent = engine.locale('dungeon_${kind}_description')
  addPortal(
    tilePosition,
    objectId: id,
    kind: kind,
    useCustomLogic: true,
    hoverContent: hoverContent,
  )
}

function _addDebris() {
  addOverlaySprite(_kPortal2Tile, {
    sprite: "object/stoneDebris.png",
  })
  addOverlaySprite(_kPortal3Tile, {
    sprite: "object/stoneDebris.png",
  })
}

function _addPortalByNextRoomType(nextRoomType) {
  switch (nextRoomType) {
    '2portal': {
      final tilePositions = _2Portal.toList()
      final choices = _3Choices.toList()
      let p = random.nextIterable(tilePositions)
      tilePositions.remove(p)
      let c = random.nextIterable(choices)
      choices.remove(c)
      _addPortalByKind('portal1', c, p)
      p = random.nextIterable(tilePositions)
      c = random.nextIterable(choices)
      _addPortalByKind('portal2', c, p)
    }
    '3exit': {
      _addPortalByKind('portal1', 'exit', _kPortal1Tile)
      _addPortalByKind('portal2', 'replay', _kPortal2Tile)
      _addPortalByKind('portal3', 'nextLevel', _kPortal3Tile)
    }
    else: {
      _addPortalByKind('portal1', nextRoomType, _kPortal1Tile)
    }
  }
}

function _prepareMap() {
  engine.info('生成地牢：当前难度：${game.flags.dungeon.level} 房间编号：${game.flags.dungeon.room}')
  game.flags.dungeon.buildCompleted = true
  game.flags.dungeon.isElite = false
  game.flags.dungeon.isBoss = false
  
  resetMapTerrains()

  let roomInfo = game.flags.dungeon.isBasic ? _kBasicRooms : _kNormalRooms

  assert(game.flags.dungeon.room <= game.flags.dungeon.roomMax &&
        roomInfo.contains(game.flags.dungeon.room.toString()) &&
        roomInfo.contains((game.flags.dungeon.room + 1).toString()), 
    '房间编号超出范围：${game.flags.dungeon.room}')

  final nextRoomType = roomInfo[game.flags.dungeon.room + 1]
  /// 用随机遭遇填充地图
  if (game.flags.dungeon.isBasic) {
    switch (game.flags.dungeon.room + 1) {
      1: {
        _addPortalByNextRoomType(nextRoomType)
        _addDebris()
        _addGeneralMerchant(_kCenterTile)
      }
      2: {
        addEnemy(
          _kCenterTile,
          name: engine.locale('dungeonGuard'),
          objectId: 'enemy',
          useCustomLogic: true,
          level: game.flags.dungeon.minEnemyLevel + game.flags.dungeon.level + _kDungeonEnemyLevelBonus.tutorial[game.flags.dungeon.room],
          rank: game.flags.dungeon.rank,
        )
      }
      3: {
        switch (game.flags.dungeon.selectedPortalKind) {
          'enemy': {
            addEnemy(
              _kCenterTile,
              name: engine.locale('dungeonGuard'),
              objectId: 'enemy',
              useCustomLogic: true,
              level: game.flags.dungeon.minEnemyLevel + game.flags.dungeon.level + _kDungeonEnemyLevelBonus.tutorial[game.flags.dungeon.room],
              rank: game.flags.dungeon.rank,
            )
          }
          'merchant': {
            _addPortalByNextRoomType(nextRoomType)
            _addRandomMerchant()
          }
          'encounter': {
            _addPortalByNextRoomType(nextRoomType)
            final encounterKind = random.nextIterable(_kEncounterKinds)
            switch (encounterKind) {
              'spiritWell': {
                addSpiritWell(
                  _kCenterTile,
                  objectId: 'spiritWell',
                  rank: game.flags.dungeon.rank + 1,
                )
              }
            }
          }
        }
      }
      4: {
        game.flags.dungeon.isElite = true
        addEnemy(
          _kCenterTile,
          name: engine.locale('dungeonElite'),
          objectId: 'enemy',
          useCustomLogic: true,
          level: game.flags.dungeon.minEnemyLevel + game.flags.dungeon.level + _kDungeonEnemyLevelBonus.tutorial[game.flags.dungeon.room],
          rank: game.flags.dungeon.rank,
          isElite: true,
        )
      }
      5: {
        _addPortalByNextRoomType(nextRoomType)
        _addDebris()
        _addEncampment()
      }
      6: {
        game.flags.dungeon.isBoss = true
        addEnemy(
          _kCenterTile,
          name: engine.locale('dungeonBoss'),
          objectId: 'enemy',
          useCustomLogic: true,
          level: game.flags.dungeon.minEnemyLevel + game.flags.dungeon.level + _kDungeonEnemyLevelBonus.tutorial[game.flags.dungeon.room],
          rank: game.flags.dungeon.rank + 1,
          isElite: true,
        )
      }
    }
  } else {
    switch (game.flags.dungeon.room + 1) {
      1: {
        _addPortalByNextRoomType(nextRoomType)
        _addDebris()
        _addGeneralMerchant(_kCenterTile)
      }
      2, 4, 6, 10, 12: {
        addEnemy(
          _kCenterTile,
          name: engine.locale('dungeonGuard'),
          objectId: 'enemy',
          useCustomLogic: true,
          level: game.flags.dungeon.minEnemyLevel + game.flags.dungeon.level + _kDungeonEnemyLevelBonus.normal[game.flags.dungeon.room],
          rank: game.flags.dungeon.rank,
        )
      }
      3, 5, 9, 11: {
        switch (game.flags.dungeon.selectedPortal) {
          'portal1': {
            addEnemy(
              _kCenterTile,
              name: engine.locale('dungeonGuard'),
              objectId: 'enemy',
              useCustomLogic: true,
              level: game.flags.dungeon.minEnemyLevel + game.flags.dungeon.level + _kDungeonEnemyLevelBonus.normal[game.flags.dungeon.room],
              rank: game.flags.dungeon.rank,
            )
          }
          'portal2': {
            _addPortalByNextRoomType(nextRoomType)
            _addRandomMerchant()
          }
          'portal3': {
            _addPortalByNextRoomType(nextRoomType)
            final encounterKind = random.nextIterable(_kEncounterKinds)
            switch (encounterKind) {
              'spiritWell': {
                addSpiritWell(
                  _kCenterTile,
                  objectId: 'spiritWell',
                  rank: game.flags.dungeon.rank + 1,
                )
              }
            }
          }
        }
      }
      7, 13: {
        _addPortalByNextRoomType(nextRoomType)
        _addDebris()
        _addEncampment()
      }
      8: {
        game.flags.dungeon.isElite = true
        addEnemy(
          _kCenterTile,
          name: engine.locale('dungeonElite'),
          objectId: 'enemy',
          useCustomLogic: true,
          level: game.flags.dungeon.minEnemyLevel + game.flags.dungeon.level + _kDungeonEnemyLevelBonus.normal[game.flags.dungeon.room],
          rank: game.flags.dungeon.rank,
          isElite: true,
        )
      }
      14: {
        game.flags.dungeon.isBoss = true
        addEnemy(
          _kCenterTile,
          name: engine.locale('dungeonBoss'),
          objectId: 'enemy',
          useCustomLogic: true,
          level: game.flags.dungeon.minEnemyLevel + game.flags.dungeon.level + _kDungeonEnemyLevelBonus.normal[game.flags.dungeon.room],
          rank: game.flags.dungeon.rank + 1,
          isElite: true,
        )
      }
    }
  }
}

async function onEnterMap() {
  Game.updateDungeon(game.flags.dungeon)
  
  if (!game.flags.dungeon.promptedDungeonTitle) {
    game.flags.dungeon.promptedDungeonTitle = true
    let rankString = engine.locale('cultivationRank_${game.flags.dungeon.rank}') + engine.locale('rank2') + engine.locale('dungeon')
    let sceneId = '${rankString} - ${engine.locale('currentLevel3')} ${game.flags.dungeon.level + 1}'
    World.promptTextBanner(sceneId)
  }

  if (game.flags.dungeon.battleResult == true) {
    final reward = createReward(
      entity: game.flags.dungeon.battleEntity,
      details: {
        exp: {
          chance: kRewardProbabilityExppack,
        },
        money: {
          chance: kRewardProbabilityMoney,
        },
        shard: {
          chance: game.flags.dungeon.isBoss ? 1.0 : 
          (game.flags.dungeon.isElite ? 0.6 : kRewardProbabilityShard),
        },
        equipment: {
          chance: game.flags.dungeon.isBoss ? 0.8 : 
          (game.flags.dungeon.isElite ? 0.5 : kRewardProbabilityEquipment),
        },
        potion: {
          chance: game.flags.dungeon.isBoss ? 0.6 : 
          (game.flags.dungeon.isElite ? 0.3 : kRewardProbabilityPotion),
        },
        cardpack: {
          chance: game.flags.dungeon.isBoss ? 0.6 : 
          (game.flags.dungeon.isElite ? 0.3 : kRewardProbabilityCardpack),
        },
        scrollPaper: {
          chance: game.flags.dungeon.isBoss ? 0.45 : 
          (game.flags.dungeon.isElite ? 0.25 : kRewardProbabilityScrollPaper),
        },
        craftMaterial: {
          chance: game.flags.dungeon.isBoss ? 0.65 : 
          (game.flags.dungeon.isElite ? 0.35 : kRewardProbabilityCraftMaterial),
        },
        dungeonTicket: {
          chance: game.flags.dungeon.isBoss ? 0.95 : 
          (game.flags.dungeon.isElite ? 0.65 : kRewardProbabilityDungeonTicket),
        },
      },
    )
    for (final item in reward) {
      await Player.acquire(item)
    }
    game.flags.dungeon.battleResult = null
    game.flags.dungeon.battleEntity = null
    Game.promptItems(reward)
  } else if (game.flags.dungeon.battleResult == false) {
    await World.promptTextBanner(engine.locale('hint_dungeon_failed'))
    Game.updateDungeon(null)
    Game.onDying()
    game.flags.dungeon.battleResult = null
    game.flags.dungeon.battleEntity = null
  } else if (!game.flags.dungeon.buildCompleted) {
    dialog.pushBackground('black.png')
    dialog.pushTask(() {
      _prepareMap()
      World.lightUpAllTiles()
      Player.setTo(_kStartTile.left, _kStartTile.top, worldId: world.id, direction: 'north')
      Game.showHeroInfo()
    })
    dialog.popBackground(isFadeOut: true)
    await dialog.execute()
  }
}

async function promptExit() {
  dialog.pushDialog('hint_exitDungeon_description')
  dialog.pushSelection(
    'exitDungeon',
    [
      'exitDungeon',
      'forgetIt',
    ]
  )
  await dialog.execute()
  final selected = dialog.checkSelected('exitDungeon')
  if (selected == 'exitDungeon') {
    engine.info('地牢已经完成，准备退出')
    game.flags.dungeon = null
    Game.updateDungeon(null)
    Game.popScene(clearCache: true)
    setCurrentWorld(game.mainWorldId)
  }
}

async function onInteractMapObject(object, terrain) {
  switch (object.id) {
    case 'portal1', 'portal2', 'portal3': {
      await Game.updateGame(updateWorldMap: false)
      if (game.flags.dungeon.room < game.flags.dungeon.roomMax) {
        game.flags.dungeon.selectedPortalKind = object.kind
        game.flags.dungeon.buildCompleted = false
        game.flags.dungeon.room += 1
        onEnterMap()
      } else {
        switch (object.kind) {
          'exit': {
            promptExit()
          }
          'replay': {
            engine.info('重玩当前地牢，当前境界：${game.flags.dungeon.rank}')
            Game.tryEnterDungeon(rank: game.flags.dungeon.rank, pushScene: false)
            onEnterMap()
          }
          'nextLevel': {
            if (game.flags.dungeon.level < game.flags.dungeon.levelMax) {
              dialog.pushDialog('hint_enterNextLevel_description')
              dialog.pushSelection(
                'enterNextDungeonLevel',
                [
                  'enterNextDungeonLevel',
                  'forgetIt',
                ]
              )
              await dialog.execute()
              final selected = dialog.checkSelected('enterNextDungeonLevel')
              if (selected == 'enterNextDungeonLevel') {
                engine.info('将进入下一层地牢，等级：${game.flags.dungeon.level}')
                game.flags.dungeon.buildCompleted = false
                game.flags.dungeon.room = 0
                game.flags.dungeon.level += 1
                onEnterMap()
              }
            } else {
              if (game.flags.dungeon.rank < kCultivationRankMax) {
                dialog.pushDialog('hint_enterNextDungeonRank_description')
                dialog.pushSelection(
                  'enterNextDungeonRank',
                  [
                    'enterNextDungeonRank',
                    'forgetIt',
                  ]
                )
                await dialog.execute()
                final selected = dialog.checkSelected('enterNextDungeonRank')
                if (selected == 'enterNextDungeonRank') {
                  engine.info('即将进入下一个境界的地牢，当前境界：${game.flags.dungeon.rank}')
                  Game.tryEnterDungeon(isCommon: false, pushScene: false)
                  onEnterMap()
                }
              } else {
                promptExit()
              }
            }
          }
        }
      }
    }
    'enemy': {
      Game.showPrebattle(
        object.battleEntity,
        background: 'battle/scene/dungeon_night.png',
        loseOnEscape: false,
        onBattleEnd: async function [onBattleEnd] (battleResult, roundCount) {
          if (battleResult) {
            engine.info('战斗胜利，添加出口')
            game.flags.dungeon.battleResult = true
            game.flags.dungeon.battleEntity = object.battleEntity
            let tile = getTerrainByWorldPosition(_kCenterTile.left, _kCenterTile.top)
            tile.objectId = null
            tile.isNonEnterable = false
            world.objects.remove(object.id)
            World.updateTerrainData(tile.left, tile.top)
            World.removeCharacter(object.battleEntity.id)
            final nextRoomType = game.flags.dungeon.isBasic ?
              _kBasicRooms[game.flags.dungeon.room + 1] :
              _kNormalRooms[game.flags.dungeon.room + 1]
            _addPortalByNextRoomType(nextRoomType)
            if (game.flags.dungeon.isBoss) {
              addRestBed(_kCenterTile)
            }
          } else {
            engine.info('战斗失败，准备退出地牢')
            game.flags.dungeon.battleResult = false
          }
        }
      )
    }
  }
}
