
const _kStartTile = {
  left: 8,
  top: 9,
}
const _kReturnTile = {
  left: 8,
  top: 10,
}
const _kCenterTile = {
  left: 8,
  top: 7,
}
const _kPortal1Tile = {
  left: 8,
  top: 4,
}
const _kPortal2Tile = {
  left: 4,
  top: 6,
}
const _kPortal3Tile = {
  left: 12,
  top: 6,
}
const _kFunction1 = {
  left: 6,
  top: 6,
}
const _kFunction2 = {
  left: 10,
  top: 6,
}
const _kFunction3 = {
  left: 6,
  top: 8,
}
const _kFunction4 = {
  left: 10,
  top: 8,
}

/// 试炼地图事件
/// 一共有4个房间：
/// 1, 初始房间，有三个传送门
/// 2, 包含一个开关
/// 3, 包含一个炼丹炉
/// 4, 包含一个出口，必须先打开开关才能从出口离开
function _prepareMap() {
  game.flags.trial.buildCompleted = true
  /// 清理所有的地块贴图和临时对象，还原到空地图
  world.objects = {}
  for (final tile in world.terrains) {
    tile.isNonEnterable = false
    tile.overlaySprite = {}
    tile.objectId = null
    World.updateTerrainData(tile.left, tile.top, updateOverlaySprite: true)
  }

  /// 根据房间填充地图
  switch (game.flags.trial.room + 1) {
    1: {
      let roomSequence = game.flags.trial.roomSequence
      if (roomSequence == null) {
        roomSequence = game.flags.trial.roomSequence = [1, 2, 3]
        roomSequence.shuffle()
      }
      addPortal(
        _kPortal1Tile,
        objectId: 'portal${roomSequence[0]}',
        useCustomLogic: true,
      )
      addPortal(
        _kPortal2Tile,
        objectId: 'portal${roomSequence[1]}',
        useCustomLogic: true,
      )
      addPortal(
        _kPortal3Tile,
        objectId: 'portal${roomSequence[2]}',
        useCustomLogic: true,
      )
    }
    2: {
      addPortal(
        _kReturnTile,
        objectId: 'portalReturn',
        useCustomLogic: true,
      )
      addPortal(
        _kPortal1Tile,
        objectId: 'portalExit',
        useCustomLogic: true,
      )
    }
    3: {
      addPortal(
        _kReturnTile,
        objectId: 'portalReturn',
        useCustomLogic: true,
      )
      addSwitch(
        _kCenterTile,
        objectId: 'switch1',
        useCustomLogic: true,
        isOn: game.flags.trial.switchOn == true,
      )
    }
    4: {
      addPortal(
        _kReturnTile,
        objectId: 'portalReturn',
        useCustomLogic: true,
      )
      addAlchemyFurnace(
        _kCenterTile,
      )
    }
  }
}

async function onEnterMap() {
  Game.updateDungeon(game.flags.trial)

  if (!game.flags.trial.promptedDungeonTitle) {
    game.flags.trial.promptedDungeonTitle = true
    World.promptTextBanner(engine.locale('cultivation_trial'))
  }

  if (!game.flags.trial.buildCompleted) {
    game.flags.trial.buildCompleted = true
    dialog.pushBackground('black.png')
    dialog.pushTask(() {
      _prepareMap()
      World.lightUpAllTiles()
      Player.setTo(_kStartTile.left, _kStartTile.top, worldId: world.id, direction: 'north')
      Game.showHeroInfo()
    })
    dialog.popBackground(isFadeOut: true)
    if (!game.flags.trial.introCompleted) {
      game.flags.trial.introCompleted = true
      dialog.pushDialog('cultivation_trial_intro_1')
    }
    await dialog.execute()
  }
}

async function onAfterMove(terrain) {
  let failed
  if (hero.life <= 1) {
    failed = true
  }
  final value = game.flags.trial.difficulty + 1
  setCharacterLife(hero, hero.life - value)
  Game.updateHero()
  World.addHintText('${engine.locale('life')} -${value}', terrain.left, terrain.top, Colors.red)
  if (failed) {
    final npc = game.npcs[game.flags.trial.npcId]
    dialog.pushDialog(
      'organization_immortality_trial_fail',
      npc: npc,
    )
    await dialog.execute()
    Game.popScene(clearCache: true)
  }
}

async function onInteractMapObject(object, terrain) {
  switch (object.id) {
    'portalReturn': {
      game.flags.trial.buildCompleted = false
      game.flags.trial.room = 0
      onEnterMap()
    }
    'portal1': {
      game.flags.trial.buildCompleted = false
      game.flags.trial.room = 1
      onEnterMap()
    }
    'portal2': {
      game.flags.trial.buildCompleted = false
      game.flags.trial.room = 2
      onEnterMap()
    }
    'portal3': {
      game.flags.trial.buildCompleted = false
      game.flags.trial.room = 3
      onEnterMap()
    }
    'portalExit': {
      if (game.flags.trial.switchOn == true) {
        Game.updateDungeon(null)
        Game.popScene(clearCache: true)
        await Future.delayed(0.25)
        final npc = game.npcs[game.flags.trial.npcId]
        dialog.pushDialog(
          'organization_immortality_trial_pass',
          npc: npc,
        )
        await dialog.execute()
        final organizationId = game.flags.trial.organizationId
        if (organizationId != null) {
          final organization = game.organizations[organizationId]
          await Player.enroll(organization, npcId: game.flags.trial.npcId);
        }
        setCurrentWorld(game.mainWorldId)
        game.flags.trial = null
      } else {
        dialog.pushDialog('cultivation_trial_exit_hint')
        await dialog.execute()
      }
    }
    'switch1': {
      if (!object.isOn) {
        onInteractSwitch(object, terrain)
        game.flags.trial.switchOn = true
      } else {
        dialog.pushDialog('switch_already_on')
        await dialog.execute()
      }
    }
  }
}
