import 'game.ht'
import 'l10n.ht'
import 'tile/hexagonal_tile.ht'
import 'tile/tilemap.ht'
import 'logic.ht'
import 'datetime.ht'
import 'entity/item/consumable/consumable.ht'
import 'entity/item/material/material.ht'
import 'entity/item/material/jade.ht'
import 'entity/character/battle_entity.ht'
import 'binding/worldmap.ht'
import 'tile/common.ht'
import 'entity/character/npc/bandit.ht'
import 'entity/character/creature/beast.ht'
import 'lootbox.ht'
import 'binding/worldmap.ht'
import 'dialog.ht'
import 'entity/skill/skill.ht'
import 'entity/common.ht'

/// 返回布尔值，如果为真，则玩家控制角色会返回上一格，false 则停在这一格，null 则不影响
fun onHeroMovedOnWorldMap(left, top) {
  engine.info('玩家移动到了: ${left}, ${top}')
  final tile = currentWorld.terrains[tilePos2Index(left, top, currentWorld.width)]
  if (!tile.flags.isDiscovered) {
    
  }
  // if (tile.entityId && !tile.hasSearched) {
  //   // TODO: 感知阈值
  //   showDialogByLocaleKeys(['sensedUndiscovered'], character: hero)
  //   return true
  // }
  if (tile.flags.isInStorm) {
    showDialogByLocaleKeys(['metStorm'], character: hero)
    return true
  }

  return null
}

/// 异步函数，会在显示地点窗口之前执行，执行完毕后才会进入地点
fun onHeroEnteredLocation(location) async {
  engine.info('玩家进入了: ${location.name}')
  if (!location.flags.isDiscovered) {
    if (location.category == kLocationCategoryCity) {
      discoverLocation(location)
      final message = getLocaleString('firstVisitCity', interpolations: [location.name])
      // TODO: 第一次发现据点事件
      return showDialogByStrings([message])
    } else {
      // TODO: 感知阈值
      return showDialogByLocaleKeys(['sensedUndiscovered'], character: hero)
    }
  }

  if (location.flags.recruitingOrganizationIds.isNotEmpty) {
    var names = ''
    for (final id in location.flags.recruitingOrganizationIds) {
      if (names.isEmpty) {
        names = game.organizations[id].name
      } else {
        final linkWord = getLocaleString('and')
        names += linkWord + game.organizations[id].name
      }
    }

    final villager = getLocaleString('villager')

    showDialogByResourceId('cultivatorRecruitMonth').then((_) {
      showSelectionByLocaleKeys([
        'cultivatorRecruitMonth.selection1',
        'cultivatorRecruitMonth.selection2',
        'cultivatorRecruitMonth.selection3',
      ]).then((key) {
        when (key) {
          'cultivatorRecruitMonth.selection1' -> {
            return showDialogByResourceId('cultivatorRecruitMonth.reply1', interpolations: [names])
          }
          'cultivatorRecruitMonth.selection2' -> {
            return showDialogByResourceId('cultivatorRecruitMonth.reply2', interpolations: [names])
          }
          'cultivatorRecruitMonth.selection3' -> {
            return showDialogByResourceId('cultivatorRecruitMonth.reply3', interpolations: [names])
          }
        }
      }).then((_) {
        if (hero.organizationId == null) {
          return showDialogByLocaleKeys(['cultivatorRecruitMonth.hint'], character: hero)
        }
      })
    })

  }
}

/// 异步函数，会在显示建筑窗口之前执行，执行完毕后才会进入建筑
fun onHeroEnteredSite(site) async {
  engine.info('玩家进入了: ${site.name}')

  // 检查是否有任务满足了提交条件
  final future
  for (final quest of hero.quests) {
    if (site.id == quest.destinationSiteId) {
      quest.result = characterTrySubmitQuest(hero, site, quest)
      // modEventId 意味着这是一个 mod 创建的任务，将由 mod 自己的函数处理
      if (quest.modEventId) {
        return onGameEvent(quest.modEventId, null, quest)
      } else {
        return handleQuestEnding(quest)
      }
    }
  }
}

const kSearchSuccessProbability = 0.25

// 打猎会增加遇到野兽的概率200%
// 这个概率将会和地点本身的野兽概率相乘
const kHuntBeastProbability = 2.0

// 山峰上可能遇到强盗和野兽，但产出也较高
const kMountainBeastProbability = 0.15
const kMountainFruitProbability = 0.4
const kMountainWoodProbability = 0.3
const kMountainOreProbability = 0.15
const kMountainJadeProbability = 0.07
const kMountainHerbProbability = 0.2

// 森林中可能遇到强盗和野兽，但产出也较高
const kForestBeastProbability = 0.07
const kForestFruitProbability = 0.8
const kForestWoodProbability = 0.6
const kForestOreProbability = 0.04
const kForestJadeProbability = 0.02
const kForestHerbProbability = 0.4

// 平原上几乎不会遇到强盗和野兽，但产出也较低
const kPlainBeastProbability = 0.02
const kPlainFruitProbability = 0.3
const kPlainWoodProbability = 0.1
const kPlainOreProbability = 0.01
const kPlainJadeProbability = 0.001
const kPlainHerbProbability = 0.1

// 湖泊上没有风暴，但产出也较低
const kLakeFishProbability = 0.25

// 海洋上可能会遇到暴风雨，但产出也较高
const kSeaStormProbability = 0.3
const kSeaFishProbability = 0.45

// 在某个地形块上进行互动操作
// 山峰或树林产出物品更多，平原产出数量较少
// 但前者会有几率碰到野兽或者强盗
fun handleWorldTerrainInteraction(left, top) {
  
  // var isInjured = false
  // for (final status of hero.statusEffects) {
  //   if (status.category == kStatusCategoryInjury)
  //   isInjured = true
  // }
  // if (isInjured) {
  //   showDialogByLocaleKeys(['cannotInteractWhenInjured'], character: hero)
  //   return
  // }

  // 因为探索时地块上的资源每个月会改变，因此每次探索的时间不能跨过一个月
  // 本月剩余的天数
  final currentDayOfMonth = getCurrentDay()
  if (currentDayOfMonth > 29) {
    showDialogByLocaleKeys(['cannotInteractAtEndOfMonth'], character: hero)
    return
  }
  final restDaysOfMonth = kDaysPerMonth - currentDayOfMonth

  // 英雄剩余的体力
  // 采集消耗体力为每天4点（每个tick 1点）。
  final staminaAvailableDays = hero.stats.stamina ~/ kTicksPerDay
  if (staminaAvailableDays < 1) {
    showDialogByLocaleKeys(['notEnoughStamina'], character: hero)
    return
  }

  // 可用的探索天数
  final availableDays = Math.min(restDaysOfMonth, staminaAvailableDays)

  final terrainIndex = tilePos2Index(left, top, currentWorld.width)
  final terrain = currentWorld.terrains[terrainIndex]

  final selections = [
    'search',
  ]

  when (terrain.kind) {
    kTerrainKindMountain, kTerrainKindForest, kTerrainKindPlain -> {
      selections.add('gather')
      selections.add('woodcut')
      selections.add('mine')
      selections.add('hunt')
    }
    kTerrainKindLake, kTerrainKindSea -> {
      selections.add('fish')
    }
  }

  selections.add('cancel')
  
  showSelectionByLocaleKeys(selections).then((key) {
    when (key) {
      'search' -> {
        final entityId = terrain.entityId
        final locationId = terrain.locationId
        final undiscoveredLocation
        if (locationId) {
          final location = game.locations[locationId]
          if (!location.flags.isDiscovered) {
            undiscoveredLocation = location
          }
        }
        if (terrain.hasSearched) {
          if (entityId) {
            handleWorldMapEntityInteraction(entityId)
          } else {
            showDialogByLocaleKeys([alreadyExplored], character: hero)
          }
        } else {
          if (entityId) {
            showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
              var i = 0
              var found = false
              showProgress(getLocaleString('search'), checkProgress: () {
                ++i
                updateGame(ticks: kTicksPerDay)
                changeStamina(hero, -kTicksPerDay)
                // TODO: 角色感知可以提高成功率
                if (random.nextDouble() < kSearchSuccessProbability) {
                  found = true
                  return false
                }
                if (i >= days) return false
                return true
              }).then((_) {
                final incidentContent = getLocaleString('characterExplore', interpolations: [
                  hero.name,
                  '${terrain.left}, ${terrain.top}',
                  i,
                ])
                Incident(
                  subjectIds: [hero.id],
                  content: incidentContent,
                  isPrivate: true,
                )
                if (found) {
                  terrain.hasSearched = true
                  handleWorldMapEntityInteraction(entityId)
                } else {
                  showDialogByLocaleKeys(['sensedUndiscovered'], character: hero)
                }
              })
            })
          } else if (undiscoveredLocation) {
            showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
              var i = 0
              var found = false
              showProgress(getLocaleString('search'), checkProgress: () {
                ++i
                updateGame(ticks: kTicksPerDay)
                changeStamina(hero, -kTicksPerDay)
                // TODO: 角色感知可以提高成功率
                if (random.nextDouble() < kSearchSuccessProbability) {
                  found = true
                  return false
                }
                if (i >= days) return false
                return true
              }).then((_) {
                final incidentContent = getLocaleString('characterExplore', interpolations: [
                  hero.name,
                  '${terrain.left}, ${terrain.top}',
                  i,
                ])
                Incident(
                  subjectIds: [hero.id],
                  content: incidentContent,
                  isPrivate: true,
                )
                if (found) {
                  terrain.hasSearched = true
                  discoverLocation(undiscoveredLocation)
                  // TODO: 第一次发现据点事件
                  final message = getLocaleString('firstVisitCity', interpolations: [undiscoveredLocation.name])
                  showDialogByStrings([message]).then((_) {
                    enterLocation(undiscoveredLocation.id)
                  })
                } else {
                  showDialogByLocaleKeys(['sensedUndiscovered'], character: hero)
                }
              })
            })
          } else {
            terrain.hasSearched = true
            showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
              showProgress(getLocaleString('search'), checkProgress: () {
                updateGame(ticks: kTicksPerDay)
                changeStamina(hero, -kTicksPerDay)
                return false
              }).then((_) {
                final incidentContent = getLocaleString('characterExplore', interpolations: [
                  hero.name,
                  '${terrain.left}, ${terrain.top}',
                  1,
                ])
                Incident(
                  subjectIds: [hero.id],
                  content: incidentContent,
                  isPrivate: true,
                )
                showDialogByLocaleKeys(['exploredEmtpy'], character: hero)
              })
            })
          }
        }
      }
      // 采集，可能会获得：药材（材料）、水果（材料）
      'gather' -> {
        showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
          final lootbox = Lootbox()
          var metBeast = false
          var i = 0
          showProgress(getLocaleString('gather'), () {
            ++i
            updateGame(ticks: kTicksPerDay)
            changeStamina(hero, -kTicksPerDay)
            when (terrain.kind) {
              kTerrainKindMountain -> {
                if (random.nextDouble() < kMountainBeastProbability) {
                  metBeast = true
                  return false
                }
                if (random.nextDouble() < kMountainHerbProbability) {
                  acquire(lootbox, Material.herb(), incidentOccured: false)
                }
                if (random.nextDouble() < kMountainFruitProbability) {
                  acquire(lootbox, Material.fruit(), incidentOccured: false)
                }
              }
              kTerrainKindForest -> {
                if (random.nextDouble() < kForestBeastProbability) {
                  metBeast = true
                  return false
                }
                if (random.nextDouble() < kForestHerbProbability) {
                  acquire(lootbox, Material.herb(), incidentOccured: false)
                }
                if (random.nextDouble() < kForestFruitProbability) {
                  acquire(lootbox, Material.fruit(), incidentOccured: false)
                }
              }
              kTerrainKindPlain -> {
                if (random.nextDouble() < kPlainHerbProbability) {
                  acquire(lootbox, Material.herb(), incidentOccured: false)
                }
                if (random.nextDouble() < kPlainFruitProbability) {
                  acquire(lootbox, Material.fruit(), incidentOccured: false)
                }
              }
            }
            if (i >= days) return false
            return true
          }).then((_) {
            final incidentContent = getLocaleString('characterExplore', interpolations: [
              hero.name,
              '${terrain.left}, ${terrain.top}',
              i,
            ])
            Incident(
              subjectIds: [hero.id],
              content: incidentContent,
              isPrivate: true,
            )
            () async {
              if (lootbox.inventory.isEmpty) {
                return showDialogByLocaleKeys(['interactionGotNothing'], character: hero)
              } else {
                loot(hero, lootbox)
              }
            } ().then((_) {
              if (metBeast) {
                final beast = Beast()
                final message = getLocaleString('metBeast', interpolations: [beast.name])
                showDialogByStrings([message]).then((_) {
                  heroBattle(beast)
                })
              }
            })
          })
        })
      }
      // 伐木，可能会获得：木料
      'woodcut' -> {
        showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
          final lootbox = Lootbox()
          var metBeast = false
          var i = 0
          showProgress(getLocaleString('woodcut'), () {
            ++i
            updateGame(ticks: kTicksPerDay)
            changeStamina(hero, -kTicksPerDay)
            when (terrain.kind) {
              kTerrainKindMountain -> {
                if (random.nextDouble() < kMountainBeastProbability) {
                  metBeast = true
                  return false
                }
                if (random.nextDouble() < kMountainWoodProbability) {
                  acquire(lootbox, Material.wood(), incidentOccured: false)
                }
              }
              kTerrainKindForest -> {
                if (random.nextDouble() < kForestBeastProbability) {
                  metBeast = true
                  return false
                }
                if (random.nextDouble() < kForestWoodProbability) {
                  acquire(lootbox, Material.wood(), incidentOccured: false)
                }
              }
              kTerrainKindPlain -> {
                if (random.nextDouble() < kPlainWoodProbability) {
                  acquire(lootbox, Material.wood(), incidentOccured: false)
                }
              }
            }
            if (i >= days) return false
            return true
          }).then((_) {
            final incidentContent = getLocaleString('characterWoodcutted', interpolations: [
              hero.name,
              '${terrain.left}, ${terrain.top}',
              i,
            ])
            Incident(
              subjectIds: [hero.id],
              content: incidentContent,
              isPrivate: true,
            )
            () async {
              if (lootbox.inventory.isEmpty) {
                return showDialogByLocaleKeys(['interactionGotNothing'], character: hero)
              } else {
                loot(hero, lootbox)
              }
            } ().then((_) {
              if (metBeast) {
                final beast = Beast()
                final message = getLocaleString('metBeast', interpolations: [beast.name])
                showDialogByStrings([message]).then((_) {
                  heroBattle(beast)
                })
              }
            })
          })
        })
      }
      // 挖矿，可能会获得：矿石、灵石
      'mine' -> {
        showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
          final lootbox = Lootbox()
          var metBeast = false
          var i = 0
          showProgress(getLocaleString('mine'), () {
            ++i
            updateGame(ticks: kTicksPerDay)
            changeStamina(hero, -kTicksPerDay)
            when (terrain.kind) {
              kTerrainKindMountain -> {
                if (random.nextDouble() < kMountainBeastProbability) {
                  metBeast = true
                  return false
                }
                if (random.nextDouble() < kMountainOreProbability) {
                  acquire(lootbox, Material.ore(), incidentOccured: false)
                }
                if (random.nextDouble() < kMountainJadeProbability) {
                  acquire(lootbox, Jade(), incidentOccured: false)
                }
              }
              kTerrainKindForest -> {
                if (random.nextDouble() < kForestBeastProbability) {
                  metBeast = true
                  return false
                }
                if (random.nextDouble() < kForestOreProbability) {
                  acquire(lootbox, Material.ore(), incidentOccured: false)
                }
                if (random.nextDouble() < kForestJadeProbability) {
                  acquire(lootbox, Jade(), incidentOccured: false)
                }
              }
              kTerrainKindPlain -> {
                if (random.nextDouble() < kPlainOreProbability) {
                  acquire(lootbox, Material.ore(), incidentOccured: false)
                }
                if (random.nextDouble() < kPlainJadeProbability) {
                  acquire(lootbox, Jade(), incidentOccured: false)
                }
              }
            }
            if (i >= days) return false
            return true
          }).then((_) {
            final incidentContent = getLocaleString('characterMined', interpolations: [
              hero.name,
              '${terrain.left}, ${terrain.top}',
              i,
            ])
            Incident(
              subjectIds: [hero.id],
              content: incidentContent,
              isPrivate: true,
            )
            () async {
              if (lootbox.inventory.isEmpty) {
                return showDialogByLocaleKeys(['interactionGotNothing'], character: hero)
              } else {
                loot(hero, lootbox)
              }
            } ().then((_) {
              if (metBeast) {
                final beast = Beast()
                final message = getLocaleString('metBeast', interpolations: [beast.name])
                showDialogByStrings([message]).then((_) {
                  heroBattle(beast)
                })
              }
            })
          })
        })
      }
      // 捕猎，增加遇到野兽的概率200%
      'hunt' -> {
        showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
          var metBeast = false
          var i = 0
          showProgress(getLocaleString('hunt'), () {
            ++i
            updateGame(ticks: kTicksPerDay)
            changeStamina(hero, -kTicksPerDay)
            when (terrain.kind) {
              kTerrainKindMountain -> {
                if (random.nextDouble() < (kMountainBeastProbability * kHuntBeastProbability)) {
                  metBeast = true
                  return false
                }
              }
              kTerrainKindForest -> {
                if (random.nextDouble() < (kForestBeastProbability * kHuntBeastProbability)) {
                  metBeast = true
                  return false
                }
              }
              kTerrainKindPlain -> {
                if (random.nextDouble() < (kPlainBeastProbability * kHuntBeastProbability)) {
                  metBeast = true
                  return false
                }
              }
            }
            if (i >= days) return false
            return true
          }).then((_) {
            final incidentContent = getLocaleString('characterHunted', interpolations: [
              hero.name,
              '${terrain.left}, ${terrain.top}',
              i,
            ])
            Incident(
              subjectIds: [hero.id],
              content: incidentContent,
              isPrivate: true,
            )
            if (metBeast) {
              final beast = Beast()
              final message = getLocaleString('foundBeast', interpolations: [beast.name])
              showDialogByStrings([message]).then((_) {
                heroBattle(beast)
              })
            } else {
              return showDialogByLocaleKeys(['interactionGotNothing'], character: hero)
            }
          })
        })
      }
      // 捕鱼，可能会获得：河鱼、海鱼、虾、蟹
      'fish' -> {
        // if (game.playerCharacterMonthly.fished.contains(terrainIndex)) {
        //   showDialogByLocaleKeys(['terrainAlreadyFished'], character: hero)
        //   return
        // }
        // game.playerCharacterMonthly.fished.add(terrainIndex)
        
        showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
          final lootbox = Lootbox()
          var i = 0
          showProgress(getLocaleString('fish'), () {
            ++i
            updateGame(ticks: kTicksPerDay)
            changeStamina(hero, -kTicksPerDay)
            when (terrain.kind) {
              kTerrainKindLake -> {
                if (random.nextDouble() < kLakeFishProbability) {
                  acquire(lootbox, Material.fish(), incidentOccured: false)
                }
              }
              kTerrainKindSea -> {
                if (random.nextDouble() < kSeaFishProbability) {
                  acquire(lootbox, Material.fish(), incidentOccured: false)
                }
              }
            }
            if (i >= days) return false
            return true
          }).then((_) {
            final incidentContent = getLocaleString('characterFished', interpolations: [
              hero.name,
              '${terrain.left}, ${terrain.top}',
              i,
            ])
            Incident(
              subjectIds: [hero.id],
              content: incidentContent,
              isPrivate: true,
            )
            if (lootbox.inventory.isEmpty) {
              return showDialogByLocaleKeys(['interactionGotNothing'], character: hero)
            } else {
              loot(hero, lootbox)
            }
          })
        })
      }
    }
  })
}

// 返回布尔值，如果为真，则玩家控制角色会停止移动
fun handleWorldMapEntityInteraction(entityId) -> bool {
  final entity = currentWorld.entities[entityId]
  assert(entity != null)

  when (entity.encounterType) {
    // 隐藏的盗贼营地副本
    'banditCamp' -> {
      showDialogByLocaleKeys(['worldMapEncounterBanditCamp'], character: hero).then((_) {
        showSelectionByLocaleKeys(['exploreMaze', 'cancel']).then((key) {
          when (key) {
            'exploreMaze' -> {
              final maze = game.mazes[entity.id]
              assert(maze != null)
              enterMaze(maze)
              showMaze(maze)
            }
          }
        })
      })
    }
    // 隐藏的洞天福地
    'location' -> {

    }
  }

  return false
}

fun handleSiteInteraction(locationId: str, siteId: str) {
  final location = getLocationById(locationId)
  final site
  if (siteId == 'site.home') {
    site = game.heroHomeSite
  } else {
    site = getLocationSiteById(location, siteId)
  }
  when (site.category) {
    'home' -> _handleHomeInteraction(site)
    'cultivation' -> _handleCultivationInteraction(site)
    'tradinghouse' -> _handleTradingHouseInteraction(site)
    'workshop' -> _handleWorkshopInteraction(site)
    'restaurant' -> _handleRestaurantInteraction(site)
    'nation' -> _handlePalaceInteraction(site)
    'government' -> _handleGovernmentInteraction(site)
    'residence' -> _handleResidenceInteraction(site)
    'library' -> _handleLibraryInteraction(site)
    'academy' -> _handleAcademyInteraction(site)
    'farmland' -> _handleFarmlandInteraction(site)
    'mine' -> _handleMineInteraction(site)
    'timberland' -> _handleTimberInteraction(site)
    'arena' -> _handleArenaInteraction(site)
    'hospital' -> _handleHospitalInteraction(site)
    'nursery' -> _handleNurseryInteraction(site)
    'alchemylab' -> _handleAlchemylabInteraction(site)
    'zoo' -> _handleZooInteraction(site)
    else -> {
      engine.error('未知的建筑类型 (category)：${site.category}。[${site.id}]')
    }
  }
}

fun _handleHomeInteraction(site) {
  showSelectionByLocaleKeys([
    'rest',
    'practice',
    'storage',
    'leave',
  ]).then((key) {
    when (key) {
      'rest' -> {
        
      }
      'practice' -> {
        if (hero.skills.isEmpty) {
          showDialogByLocaleKeys(['skillsEmpty'], character: hero)
        } else {
          showSkillSelection(
            title: getLocaleString('selectSkill'),
            skills: hero.skills,
          ).then((skill) {
            if (skill.exp >= skill.expForNextLevel) {
              showDialogByLocaleKeys(['skillExpReachMax'], character: hero, interpolations: [skill.name])
              return
            }

            final cost = skill.cost?.practice
            
            // 每天会根据技能本身要求的消耗，减少对应的资源
            fun practiceCost {
              if (cost?.stamina) {
                changeStamina(hero, -kTicksPerDay * cost.stamina)
              }
              if (cost?.mana) {
                changeMana(hero, -kTicksPerDay * cost.mana)
              }
              if (cost?.spirit) {
                changeSpirit(hero, -kTicksPerDay * cost.spirit)
              }
            }

            final availableDays
            final staminaAvailableDays
            final manaAvailableDays
            final spiritAvailableDays
            if (cost?.stamina) {
              staminaAvailableDays = hero.stats.stamina ~/ kTicksPerDay
              if (staminaAvailableDays < 1) {
                showDialogByLocaleKeys(['notEnoughStamina'], character: hero)
                return
              }
            }
            if (cost?.mana) {
              manaAvailableDays = hero.stats.mana ~/ kTicksPerDay
              if (manaAvailableDays < 1) {
                showDialogByLocaleKeys(['notEnoughMana'], character: hero)
                return
              }
            }
            if (cost?.spirit) {
              spiritAvailableDays = hero.stats.spirit ~/ kTicksPerDay
              if (spiritAvailableDays < 1) {
                showDialogByLocaleKeys(['notEnoughSpirit'], character: hero)
                return
              }
            }

            // 可用的修炼天数
            if (staminaAvailableDays) availableDays = staminaAvailableDays
            if (manaAvailableDays) availableDays = Math.min(availableDays, manaAvailableDays)
            if (spiritAvailableDays) availableDays = Math.min(availableDays, spiritAvailableDays)
            // 如果修炼本身没有任何消耗，则最多设定为360天
            availableDays ??= 360

            showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
              var i = 0
              var expGained = 0
              showProgress(getLocaleString('practice'), checkProgress: () {
                ++i
                updateGame(ticks: kTicksPerDay)
                practiceCost()
                expGained += kTicksPerDay
                if ((skill.exp + expGained) >= skill.expForNextLevel) return false
                if (i >= days) return false
                return true
              }).then((_) {
                skill.exp += expGained
                final incidentContent = getLocaleString('characterPracticed', interpolations: [
                  hero.name,
                  site.name,
                  skill.name,
                  i,
                  expGained,
                ])
                Incident(
                  subjectIds: [hero.id],
                  content: incidentContent,
                  isPrivate: true,
                )
                if ((skill.exp + expGained) >= skill.expForNextLevel) {
                  showDialogByLocaleKeys(['skillExpReachMax'], character: hero, interpolations: [skill.name])
                }
              })
            })
          })
        }
      }
      'storage' -> {
        
      }
    }
  })
}

fun _handleCultivationInteraction(site) {
  final location = game.locations[site.locationId]
  showSelectionByLocaleKeys([
    'practice',
    'learn',
    'visit',
    'leave',
  ]).then((key) {
    when (key) {
      // 如果选择 leave，直接忽略，什么也不做
      'practice' -> {
        // 非本门派修士,需要花钱才能训练
        showDialogByLocaleKeys(['organizationTrainDeny'])
      }
      'learn' -> {
        // 非本门派修士,需要花钱才能学习,而且只能学习二阶或以下的功法
        showDialogByLocaleKeys(['organizationTrainDeny'])
      }
      'visit' -> {
        // 既然有总部，那就一定有可以拜访的成员
        final ids = location.organizations[site.organizationId].characterIds.toList()
        ids.remove(game.heroId)
        showVisitCharacterSelection(ids).then((key) {
          if (key != null) {
            handleCharacterInteraction(key)
          } else {
            _handleCultivationInteraction(site)
          }
        })
      }
    }
  })
}

fun _handleGangInteraction(site) {

}

fun _handleReligionInteraction(site) {
  
}

fun _handleAcademyInteraction(site) {
  
}

// 商号，可以在这里交易大多数物品
// 打工可以提升本地声望
// 将指定数量的材料运送到另一个城市，但途中可能会遇到劫匪或风暴，风暴会耽误时间。
// 没有提交足够数量的材料或者超过时间都会算作失败。
fun _handleTradingHouseInteraction(site) {
  final location = game.locations[site.locationId]
  showSelectionByLocaleKeys([
    'trade',
    'work',
    'leave',
  ]).then((key) {
    when (key) {
      'trade' -> {
        if (site.organizationId) {
          final organization = getOrganizationById(site.organizationId)
          showMerchant(organization, allowSell: false, sellableCategory: [kEntityCategoryMaterial])
        } else {
          showMerchant(site, allowSell: false, sellableCategory: [kEntityCategoryMaterial])
        }
      }
      'work' -> {
        if (site.workedThisMonth) {
          showDialogByLocaleKeys(['workedThisMonth'])
        } else if (site.quests.isEmpty) {
          showDialogByLocaleKeys(['questEmpty'])
        } else {
          final quest = site.quests.values.first
          assert(quest.category == kQuestCategoryDelivery)
          final displayName = getLocaleString('server')
          final message = getLocaleString('delivery.introDialog')
          final description = '${quest.description}${
            getLocaleString('questRewardMoney', interpolations: [quest.rewardMoney])
          }'
          showDialogByStrings([message,description], displayName: displayName).then((_) {
            showSelectionByLocaleKeys([
              'accept',
              'cancel',
            ]).then((key) {
              if (key == 'accept') {
                site.workedThisMonth = true
                characterAcceptQuest(hero, site, quest)
              }
            })
          })
        }
      }
    }
  })  
}

fun _handleWorkshopInteraction(site) {
}

fun _handleRestaurantInteraction(site) {
}

fun _handleHospitalInteraction(site) {
}

fun _handlePalaceInteraction(site) {
  showDialogByLocaleKeys(['visitPalaceDeny'])

  // final location = game.locations[site.locationId]
  // showSelection({
  //   visit: getLocaleString('visit'),
  //   leave: getLocaleString('leave'),
  // }).then((key) {
  //   when (key) {
  //     // 如果选择 leave，直接忽略，什么也不做
  //     'visit' -> {
  //       showDialogByResourceId('visit_palace_deny_entry')
  //     }
  //   }
  // })
}

fun _handleGovernmentInteraction(site) {
  final fame = getCharacterFame(hero)
  final location = game.locations[site.locationId]
  final selections = [
    'appeal',
    'tribute',
    'noticeBoard',
    'localExam',
  ]
  if (site.isCapital) {
    selections.add('nationalExam')
  }
  selections.add('visitJail')
  selections.add('leave')
  
  showSelectionByLocaleKeys(selections).then((key) {
    when (key) {
      'appeal' -> {
        showSelectionByLocaleKeys([
          'applyOrganization',
          'applySite',
          'complaintSite',
          'complaintCharacter',
          'appealCharacter',
          'setHome',
          'cancel',
        ]).then((key) {
          when (key) {
            'cancel' -> {
              _handleGovernmentInteraction(site)
            }
            'applyOrganization' -> {
              
            }
            'applySite' -> {
              
            }
            'complaintSite' -> {
              
            }
            'complaintCharacter' -> {
              
            }
            'appealCharacter' -> {
              
            }
            'setHome' -> {
              
            }
          }
        })
      }
      'tribute' -> {
        // TODO: 进贡金钱或者宝物，之后可以选择是否发起请求
      }
      'noticeBoard' -> {
        if (game.flags.playerMonthly.worked.contains(site.id)) {
          showDialogByLocaleKeys(['workedThisMonth'])
        } else if (site.quests.isEmpty) {
          showDialogByLocaleKeys(['governmentQuestEmpty'])
        } else {
          showQuests(site)
        }
      }
      'localExam' -> {
        showDialogByLocaleKeys(['localExamIntro'])
      }
      'nationalExam' -> {
        showDialogByLocaleKeys(['nationalExamIntro'])
      }
      'visitJail' -> {
        final entry = false
        () async {
          if (location.jailedCharacterIds.isEmpty) {
            return showDialogByLocaleKeys(['visitJailEmpty'])
          } else {
            if (fame > kFameCheckThreshold) {
              final title = getCharacterTitle(hero) ?? ''
              return showDialogByStrings(
                [
                  getLocaleString('visitJailEntryRespect', interpolations: [title + hero.name]),
                ],
                returnValue: true,
              )
            } else {
              return showDialogByLocaleKeys(['visitJailDeny'])
            }
          }
        }().then((value) {
          if (value) {
            
          }
        })
      }
    }
  })
}

fun _handleResidenceInteraction(site) {
  final location = game.locations[site.locationId]
  showSelectionByLocaleKeys([
    'visit',
    'leave',
  ]).then((key) {
    when (key) {
      // 如果选择 leave，直接忽略，什么也不做
      'visit' -> {
        if (location.residingCharacterIds.isNotEmpty) {
          final ids = location.residingCharacterIds.toList()
          ids.remove(game.heroId)
          showVisitCharacterSelection(ids).then((key) {
            if (key != null) {
              handleCharacterInteraction(key)
            }
          })
        } else {
          showDialogByLocaleKeys(['visitEmptyVillage'], character: hero)
        }
      }
    }
  })
}

fun _handleLibraryInteraction(site) {

}

fun _handleFarmlandInteraction(site) {

}

fun _handleMineInteraction(site) {

}

fun _handleTimberInteraction(site) {

}

fun _handleArenaInteraction(site) {

}

fun _handleNurseryInteraction(site) {

}

fun _handleAlchemylabInteraction(site) {

}

fun _handleZooInteraction(site) {

}
