const kQuestCategoryBanditCamp = 'banditCamp' // 征讨
const kQuestKindKillBanditBoss = 'killBanditBoss'
const kQuestKindWipeBandits = 'wipeBandits'
const kQuestKindReturnHostage = 'returnHostage'
const kQuestKindReturnTreasure = 'returnTreasure'

const kQuestCategoryArrest = 'arrest' // 抓捕
const kQuestCategoryConvoy = 'convoy' // 押镖
const kQuestCategoryEscort = 'escort' // 护送
const kQuestCategoryTraining = 'training' // 演武
const kQuestCategoryRitual = 'ritual' // 法事
const kQuestCategoryMarriage = 'marriage' // 联姻
const kQuestCategoryTrading = 'trading' // 贸易
const kQuestCategoryTeaching = 'teaching' // 教习
const kQuestCategoryCraft = 'craft' // 定制
const kQuestCategoryCatering = 'catering' // 招待

final kQuestDifficultyNormal = 'normal'
final kQuestDifficultyHard = 'hard'
final kQuestDifficultyExpert = 'expert'
final kQuestDifficultyMaster = 'master'
final kQuestDifficultyTorment = 'torment'
final kQuestDifficultyNightmare = 'nightmare'
final kQuestDifficultyPurgatory = 'purgatory'

fun generateQuestReward(difficulty) {
  final reward = {
    money: 0,
    resource: {},
    items: {},
  }
}

fun createQuestStages(stages) {
  final result = {}
  for (final stage of stages) {
    result[stage.id] = stage
  }
  return result
}

fun characterAcceptQuest(character, location, quest) {
  assert(location.quests.containsKey(quest.id))
  delete location.quests[quest.id]
  character.quests[quest.id] = quest
  character.activeQuestId ??= quest.id

  final questName = getLocaleString(quest.kind);
  final incidentContent = getLocaleString(
    'characterAcceptQuest',
    [character.name, location.name, questName],
  )
  Incident(
    content: incidentContent,
    subjectIds: character.isMajorCharacter ? [character.id] : null,
  )
}

fun setCharacterActiveQuest(character, quest) {
  assert(character.quests.containsKey(quest.id))
  character.activeQuestId = quest.id
}

fun getCharacterActiveQuest(character) {
  return character.quests[character.activeQuestId]
}
