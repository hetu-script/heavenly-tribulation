final kQuestDifficultyNormal = 'normal'
final kQuestDifficultyHard = 'hard'
final kQuestDifficultyExpert = 'expert'
final kQuestDifficultyMaster = 'master'
final kQuestDifficultyTorment = 'torment'
final kQuestDifficultyNightmare = 'nightmare'
final kQuestDifficultyPurgatory = 'purgatory'

const kQuestCategoryConquestMaze = 'conquestMaze' // 征讨盗贼营地
const kQuestCategoryArrest = 'arrest' // 抓捕
const kQuestCategoryTraining = 'training' // 演武
const kQuestCategoryRitual = 'ritual' // 法事
const kQuestCategoryCatering = 'catering' // 招待
const kQuestCategoryDelivery = 'delivery' // 运送人员或物品
const kQuestCategoryCraft = 'craft' // 定制

const kQuestDeliveryKindEscort = 'escort'
const kQuestDeliveryKindConvoy = 'convoy'

const kQuestConquestMazeKindKillBanditBoss = 'killBanditBoss'
const kQuestConquestMazeKindWipeBandits = 'wipeBandits'
const kQuestConquestMazeKindReturnHostage = 'returnHostage'
const kQuestConquestMazeKindReturnTreasure = 'returnTreasure'

fun generateQuestReward(difficulty) {
  final reward = {
    money: 0,
    resource: {},
    items: {},
  }
  return reword
}

fun characterAcceptQuest(character, location, quest) {
  assert(location.quests.containsKey(quest.id))
  delete location.quests[quest.id]
  character.quests[quest.id] = quest
  character.activeQuestId ??= quest.id
  
  final entity = quest.questEntityOnAcception
  if (entity) {
    if (entity.entityType == kEntityTypeCharacter || entity.entityType == kEntityTypeNpc) {
      characterGetCompanion(character, entity)
    } else if (entity.entityType == kEntityTypeItem) {
      entityAcquireItem(character, entity)
    } else {
      engine.error('任务物品的对象类型既不是人员也是物品：${entity.entityType}')
    }
  }

  final questName = getLocaleString(quest.kind);
  final incidentContent = getLocaleString(
    'characterAcceptQuest',
    [character.name, location.name, questName],
  )
  Incident(
    content: incidentContent,
    subjectIds: character.isMajorCharacter ? [character.id] : null,
  )
}

fun setCharacterActiveQuest(character, quest) {
  assert(character.quests.containsKey(quest.id))
  character.activeQuestId = quest.id
}

fun getCharacterActiveQuest(character) {
  return character.quests[character.activeQuestId]
}

fun handleQuestComplete(quest) {
  
}