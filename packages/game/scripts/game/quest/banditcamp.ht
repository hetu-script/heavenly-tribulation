import 'common.ht'
import '../l10n.ht'
import { random } from '../game.ht'
import '../maze/mountain.ht'
import '../tile/common.ht'
import '../binding/worldmap.ht'
import '../game.ht'

const _kSearching = 'Searching'
const _kClearing = 'Clearing'
const _kReturning = 'Returning'

const _kBanditCampMaze = 'banditCampMaze'

final kQuestBanditCampKinds = [
  'killBanditBoss',
  'wipeBandits',
  'returnHostage',
  'returnTreasure',
]

// 消灭盗贼
// 盗贼的具体位置是隐藏的，但一定在该据点四周
struct QuestBanditCamp {
  construct ({
    kind,
    difficulty = kQuestDifficultyNormal,
    locationId,
    mazeTerrainIndex,
    nationId,
    publishingMonth = 1,
    expirationMonth = 1,
    reward,
    bossName,
  }) {
    assert(locationId != null)
    assert(mazeTerrainIndex != null)
    assert(nationId != null)
    this.category = kQuestCategoryBanditCamp
    this.kind = kind ?? random.nextIterable(kQuestBanditCampKinds)
    this.id = 'quest_${Hash.uid4(2)}_${locationId}_${this.category}_${this.kind}'

    final location = game.locations[locationId]
    location.quests[this.id] = this
    
    final nation = game.nations[nationId]
    when (this.kind) {
      kQuestKindKillBanditBoss -> {
        assert(bossName != null)
        this.description = getLocaleString(
          '${this.kind}Description',
          [nation.name, bossName],
        )
        this.stages = createQuestStages({
          searching: {
            // 任务开始，目前行动：寻找副本
            id: _kSearching,
            description: '${this.category}${_kClearing}Description',
            success: 'found',
            successedDescription: '${this.category}${_kClearing}SuccessedDescription',
            failedDescription: '${this.category}${_kClearing}FailedDescription',
          },
          clearing: {
            // 找到了副本入口，但尚未消灭boss
            id: _kClearing,
            description: '${this.category}${_kClearing}Description',
            success: 'finished',
            successedDescription: '${this.category}${_kClearing}SuccessedDescription',
            // 找到副本后，中途离开算失败
            failedDescription: '${this.category}${_kClearing}FailedDescription',
          },
          returning: {
            // 完成了目标，可以在原本的据点交还信物领取奖励
            id: _kReturning,
            description: '${this.category}${_kReturning}Description',
            successedDescription: '${this.category}${_kReturning}SuccessedDescription',
            // 没有交还算失败
            failedDescription: '${this.category}${_kReturning}FailedDescription',
          },
        })
      }
      kQuestKindWipeBandits -> {
        this.description = getLocaleString('${this.kind}Description')
      }
      kQuestKindReturnHostage -> {
        this.description = getLocaleString('${this.kind}Description')
      }
      kQuestKindReturnTreasure -> {
        this.description = getLocaleString('${this.kind}Description')
      }
    }
    this.currentStageId = 'searching'

    this.difficulty = difficulty
    // 任务领取有效时间
    this.publishingMonth = publishingMonth
    // 任务完成有效时间
    this.expirationMonth = expirationMonth

    assert(location.nationId != null)
    // 生成的副本悬赏会随机在本国境内
    for (final index in nation.territoryIndexes) {
      final tile = game.world.terrains[index]
      if (tile.locationId) continue
      if (tile.mazeId) continue
      
    }
    
    // 赏金类似一个物品栏，但可能包含银两、物品、资源这三种不同的对象
    this.reward = reward
    if (!this.reward) {
      this.reward = generateQuestReward(difficulty)
    }

    // 是否完成了任务
    this.isFinished = false

    final maze = MountainMaze(
      name: getLocaleString(_kBanditCampMaze),
    )
    game.mazes[maze.id] = maze

    final worldMapEntity = {
      id: maze.id,
      encounterType: 'banditCamp',
    }
    game.world.entities[maze.id] = worldMapEntity

    final mazeTerrain = game.world.terrains[mazeTerrainIndex]
    mazeTerrain.entityId = maze.id
    if (isGameLoaded) {
      setWorldMapEntity(mazeTerrain.left, mazeTerrain.top, maze.id)
    }
  }
}
