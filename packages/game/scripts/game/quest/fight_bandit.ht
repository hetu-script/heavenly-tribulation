import 'common.ht'
import '../l10n.ht'
import { random } from '../game.ht'

final kQuestHuntKinds = [
  'boss', // 消灭头目
  'wipe', // 扫荡窝点
  'hostage', // 解救人质
  'treasure', // 寻回宝物
]

// 消灭盗贼
// 盗贼的具体位置是隐藏的，但一定在该据点四周
struct QuestHunt {
  construct ({
    kind,
    difficulty,
    description,
    locationId,
    publishingMonth = 1,
    expirationMonth = 1,
    reward,
  }) {
    assert(locationId != null)

    this.category = kQuestCategoryHunt
    this.kind = kind ?? random.nextIterable(kQuestHuntKinds)
    this.id = 'quest_${Hash.uid4(2)}_${locationId}_${this.category}_${this.kind}'
    this.difficulty = difficulty
    this.description = description
    // 任务领取有效时间
    this.publishingMonth = publishingMonth
    // 任务完成有效时间
    this.expirationMonth = expirationMonth
    // 生成地点
    final location = game.locations[locationId]
    if (location.nationId) {
      // 对于国家地点，悬赏会随机在本国境内
      final nation = game.nations[nationId]

    } else {
      // 对于非国家地点，悬赏会随机在游戏内非国家所属的所有地块
    }

    this.stages = createStages(
      [
        QuestFightBanditStage.started(),
        QuestFightBanditStage.found(),
        QuestFightBanditStage.cleared(),
        QuestFightBanditStage.defeated(),
      ]
    )

    this.currentStageId = 'started'
    
    // 赏金类似一个物品栏，但可能包含银两、物品、资源这三种不同的对象
    this.reward = reward
    if (!this.reward) {
      this.reward = generateReward()
    }
    
    final nation = game.nations[location.nationId]
    for (final index in nation.territoryIndexes) {
      final tile = game.world.terrains[index]
      if (tile.locationId) continue
      if (tile.mazeId) continue
      
    }
  }
}

fun generateReward {
  final reward = {
    money: 0,
    resource: {},
    items: {},
  }

  
}

fun createStages(stages) {
  final result = {}
  for (final stage in stages) {
    result[id] = stage
  }
  return result
}

struct QuestFightBanditStage {
  construct started () {
    this.id = 'started'
    this.next = 'found'
    this.failed = 'foundFailed'
  }

  construct foundFailed() {

  }

}
