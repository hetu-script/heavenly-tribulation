struct Tile {
  construct (left, top) {
    this.left = left
    this.top = top
    // 切换为 horizontal hexgonal tile map 的坐标系
    // 以 (1, 1) 为原点，该格子相对向右下行的斜线的距离
    this.slashLeft = ((left.isOdd ? (left + 1) / 2 : left / 2) - top).truncate()
    // 以 (1, 1) 为原点，该格子相对向右上行的斜线的距离
    this.slashTop = left - this.slashLeft - 1
  }
}

// 计算 hexagonal tile 的方向
fun getDirection(start: {}, end: {}) {
  assert(start.left != end.left || start.top != end.top)
  if (start.left % 2 != 0) {
    if (end.left == start.left) {
      if (end.top < start.top) {
        return 'north'
      } else {
        return 'south'
      }
    } else if (end.left > start.left) {
      if (end.top == start.top) {
        if (end.left % 2 != 0) {
          return 'east'
        } else {
          return 'southEast'
        }
      } else if (end.top < start.top) {
        return 'northEast'
      } else {
        return 'southEast'
      }
    } else {
      if (end.top == start.top) {
        if (end.left % 2 != 0) {
          return 'west'
        } else {
          return 'southWest'
        }
      } else if (end.top < start.top) {
        return 'northWest'
      } else {
        return 'southWest'
      }
    }
  } else {
    if (end.left == start.left) {
      if (end.top < start.top) {
        return 'north'
      } else {
        return 'south'
      }
    } else if (end.left > start.left) {
      if (end.top == start.top) {
        if (end.left.isEven) {
          return 'east'
        } else {
          return 'northEast'
        }
      } else if (end.top < start.top) {
        return 'northEast'
      } else {
        return 'southEast'
      }
    } else {
      if (end.top == start.top) {
        if (end.left.isEven) {
          return 'west'
        } else {
          return 'northWest'
        }
      } else if (end.top < start.top) {
        return 'northWest'
      } else {
        return 'southWest'
      }
    }
  }
}

// manhattan 距离算法
fun getTileDistance(start, end) {
  var result
  final dx = end.slashLeft - start.slashLeft
  final dy = end.slashTop - start.slashTop
  if ((dx >= 0 && dy >= 0) || (dx <= 0 && dy <= 0)) {
    result = (dx + dy).abs()
  } else {
    result = Math.max(dx.abs(), dy.abs())
  }
  // print('getTileDistance: ${start}, ${end}, result: ${result}')
  return result
}

// 从 hexagonal 坐标得到索引
fun tilePos2Index(left, top, width) {
  return left - 1 + (top - 1) * width
}

// 从索引得到 hexagonal 坐标
fun index2TilePos(index: int, width) {
  final left = index % width + 1
  final top = index ~/ width + 1
  return Tile(left, top)
}

// 坐标是否在地图范围内
fun isPositionWithinMap(left, top, width, height) {
  return (left > 0 && top > 0 && left <= width && top <= height)
}
