import 'common.ht'
import 'game.ht'
import 'generator/random_names/random_names.ht' as randomNames

// number of the male avatar images
const kMaleAvatarCount = 37
 // number of the female avatar images
const kFemaleAvatarCount = 75
const kCharacterInitialAge = 100

struct Character {
  construct ({name, isFemale, age, spiritRank}) {
    this.index = game.characters.length
    if (isFemale != null) {
      this.isFemale = isFemale
    } else {
      this.isFemale = Math.randomInt(2) == 0
    }
    if (isFemale) {
      final index = Math.randomInt(kFemaleAvatarCount)
      this.avatar = 'avatar/male/${index}.jpg';
    } else {
      final index = Math.randomInt(kMaleAvatarCount)
      this.avatar = 'avatar/male/${index}.jpg';
    }
    if (name) {
      this.name = name
    } else {
      final names = randomNames.getName(1, isFemale: this.isFemale)
      this.name = names.first.name
    }
    this.id = 'character_${this.index}_${this.name}'

    this.age = age ?? Math.randomInt(kCharacterInitialAge)

    this.philosophy = Math.randomInt(100) - 50
    this.worldview = Math.randomInt(100) - 50
    this.ethics = Math.randomInt(100) - 50

    // 名声，指有多少人知道此人的名字
    this.fame = 0

    // 知道名字中，对此人好评的人的数量
    this.praised = 0
    // 知道名字中，对此人差评的人的数量
    this.reprimanded = 0

    this.spiritRank = spiritRank ?? 0

    game.characters[this.id] = this
  }
}

fun setHero(id: str) {
  if (game.debug) {
    print('河图: 设置当前玩家人物为 [${id}] ...')
  }
  assert(game.characters.owns(id))
  game.heroId = id;
}

fun getHero() {
  return game.characters[game.heroId]
}

fun addCharacter(char) {
  if (char.nameId) {
    char.name = getLocaleString(char.nameId)
  }
  if (char.artNameId) {
    char.artName = getLocaleString(char.artNameId)
  }
  game.characters[char.id] = char
}

fun addCharacters(chars: List) {
  if (game.debug) {
    print('河图: 载入人物数据 ...')
  }
  for (final char in chars) {
    addCharacter(char)
  }
}

fun getCharacterById(id: str) {
  return game.characters[id]
}

fun getCharacters() {
  return game.characters
}

fun handleCharacterInteraction(char, {isAtHome: bool}) {
  final entity = getEntityById(char.id)
  showGameDialogById('event01')
}

/// 容貌最大值: 100.0
final characterLooksMax = 100.0

/// 获得随机偏好
/// 大多数人的偏好都会接近于标准的100
/// 取值离100越远，随机出的可能性越低
/// 公式: y=\frac{6x-6}{5x-6}
fun createRandomFavoredLooks() {
  final x = Math.random()
  return ((x * 6 - 6) / (5 * x - 6)) * 100
}

/// 容貌评价的计算公式
/// 每个角色自身有一个容貌值，这个数值代表大众眼中的评价
/// 每个角色都会有一个对特定容貌值的偏好
/// 本公式会利用这两个数值，计算某个角色对另一个角色的容貌的评价
/// looks 是对方的容貌，0 <= looks <= 100
/// favors 是该角色的偏好，0 <= favors <= 100
fun getLooksScore(looks: float, {favors: float}) -> float {
  assert(0.0 <= looks && looks <= characterLooksMax)
  if (favors != null) {
    assert(0.0 <= favors && favors <= characterLooksMax)
  }
  if (looks < ((favors + characterLooksMax) / 2)) {
    return (-(looks - favors) * (looks - favors)) / 20 + characterLooksMax
  } else {
    return (-(looks - characterLooksMax) * (looks - characterLooksMax)) / 20 + characterLooksMax
  }
}
