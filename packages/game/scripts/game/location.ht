import 'game.ht'
import 'generator/random_names/random_names.ht' as randomNames

struct Location {
  final sites = {}
  final residentCharacterIds = Set()

  construct ({
    terrainIndex,
    category,
    name,
  }) {
    assert(terrainIndex != null)
    this.terrainIndex = terrainIndex
    this.index = game.locations.length
    if (name) {
      this.name = name
    } else {
      final names = randomNames.getLocation(1, category: category)
      this.name = names.first.name
    }
    this.category = category
    this.id = 'location_${this.index}_${this.name}'
    
    // 据点规模，默认小
    this.development = Math.randomInt(5) + 1

    game.locations[this.id] = this
  }
}

fun removeCharacterResidentLocation(character) {
  if (!character.residentLocationId) return

  final loc = game.locations[character.residentLocationId]
  loc.residentCharacterIds.remove(character.id)
  character.residentCharacterIds = null
}

fun setCharacterResidentLocation(locationId, character) {
  assert(game.locations.owns(locationId))
  if (character.residentLocationId != null) {
    assert(character.residentLocationId != locationId)
    removeCharacterFromOrganization(character)
  }
  final loc = game.locations[locationId]
  loc.residentCharacterIds.add(character.id)
  character.residentLocationId = locationId
}

fun addLocation(loc) {
  game.locations[loc.id] = loc
}

fun addLocations(locs: List) {
  if (game.debug) {
    print('河图: 载入地点数据 ...')
  }
  for (final loc in locs) {
    if (loc.nameId) {
      loc.name = getLocalization(loc.nameId)
    }
    game.locations[loc.id] = loc
  }
}

fun setCurrentLocation(id: str) {
  if (game.debug) {
    print('河图: 设置玩家当前地点为 [${id}] ...')
  }
  game.locations.current = game.locations[id];
}

fun getCurrentLocation() {
  return game.locations.current;
}

fun getLocationById(id: str) {
  return game.locations[id]
}

fun getLocations() {
  return game.locations
}

fun getSceneById(id: str) {
  return game.locations.current.scenes[id]
}

fun onEnteredLocation(id: str) {
  final entity = getEntityById(id)
  if (entity != null) {
    final handler = entity.onEntered
    if (handler is function) {
      handler()
    }
  }
}

fun onEnteredScene(id: str, [extra: str]) {
  final entity = getEntityById(id)
  if (entity != null) {
    final handler = entity.onEntered
    if (handler is function) {
      handler()
    }
  }
}

fun handleSceneInteraction(id: str) {
  final scn = getSceneById(id)
  if (scn != null) {
    when (scn.type) {
      'headquarters' -> _handleHeadquartersInteraction(scn)
      'residence' -> _handleResidencyInteraction(scn)
      'library' -> _handleLibraryInteraction(scn)
      'farmland' -> _handleFarmlandInteraction(scn)
      'mine' -> _handleMineInteraction(scn)
      'market' -> _handleMarketInteraction(scn)
      'shop' -> _handleShopInteraction(scn)
      'restaurant' -> _handleRestaurantInteraction(scn)
      'arena' -> _handleArenaInteraction(scn)
      'nursery' -> _handleNurseryInteraction(scn)
      'workshop' -> _handleWorkshopInteraction(scn)
      'alchemylab' -> _handleAlchemylabInteraction(scn)
      'smithshop' -> _handleSmithshopInteraction(scn)
      'zenyard' -> _handleZenroomInteraction(scn)
      'zoo' -> _handleZooInteraction(scn)
      'maze' -> _handleMazeInteraction(scn)
      else -> {
        print('河图: 错误: 未知的地区类型。')
      }
    }
  }
}

fun searchCharactersAtScene(scnId: str) {
  return game.characters.where((char) {
    char.scene == scnId
  })
}

fun _handleHeadquartersInteraction(scn) {
  // final characters = searchCharactersAtScene(scn.id)
  // if (characters.isNotEmpty) {
  //   handleCharacterInteraction(characters.first)
  // }
}

fun _handleResidencyInteraction(scn) {

}

fun _handleLibraryInteraction(scn) {

}

fun _handleFarmlandInteraction(scn) {

}

fun _handleMineInteraction(scn) {

}

fun _handleMarketInteraction(scn) {

}

fun _handleShopInteraction(scn) {

}

fun _handleRestaurantInteraction(scn) {

}

fun _handleArenaInteraction(scn) {

}

fun _handleNurseryInteraction(scn) {

}

fun _handleWorkshopInteraction(scn) {

}

fun _handleAlchemylabInteraction(scn) {

}

fun _handleSmithshopInteraction(scn) {

}

fun _handleZenroomInteraction(scn) {

}

fun _handleZooInteraction(scn) {

}

fun _handleMazeInteraction(scn) {

}