import 'game.ht'
import 'generator/random_names/random_names.ht' as randomNames

struct Organization {
  // 本门派统治的据点
  final locationIds = Set()
  final characterIds = Set()

  construct ({
    category,
    name,
    nationId,
    locationId,
    development,
  }) {
    this.index = game.organizations.length
    if (name) {
      this.name = name
    } else {
      final names = randomNames.getOrganization(1, category: category)
      this.name = names.first.name
    }
    this.id = 'Clan_${this.index}_${this.name}'
    if (nationId != null) {
      this.nationId = nationId
      final nation = game.nations[nationId]
      nation.organizationIds.add(this.id)
    }
    if (locationId != null) {
      final location = game.locations[locationId]
      addLocation2Organization(org.id, location)
    }

    // 组织规模，组织所能允许的等级数量 = 规模
    this.development = development ?? Math.randomInt(5) + 1

    game.organizations[this.id] = this
  }
}

// 组织中每个等级的人数上限
fun maxDirectInferiorNumberOfClanRank(n: int) {
  return (n + 1) * 3 - 2
}

fun maxMemberNumberOfClanDevelopment(n: int) {
  assert(n > 0)
  var number = 0
  for (var i in range(n + 1, 1)) {
    number += maxDirectInferiorNumberOfClanRank(i)
  }
  return number + 1
}

fun removeCharacterFromOrganization(character) {
  if (!character.organizationId) return

  final org = game.organizations[character.organizationId]
  org.characterIds.remove(character.id)
  character.organizationId = null
}

fun addCharacter2Organization(organizationId, character) {
  assert(game.organizations.owns(organizationId))
  if (character.organizationId != null) {
    assert(character.organizationId != organizationId)
    removeCharacterFromOrganization(character)
  }
  final org = game.organizations[organizationId]
  org.characterIds.add(character.id)
  character.organizationId = organizationId
}

fun removeLocationFromOrganization(location) {
  if (!terrain.organizationId) return

  final org = game.organizations[terrain.organizationId]
  org.locationIds.remove(location.id)
  location.organizationId = null
}

fun addLocation2Organization(organizationId, location) {
  assert(game.organizations.owns(organizationId))
  if (location.organizationId != null) {
    assert(location.organizationId != organizationId)
    removeLocationFromOrganization(location)
  }
  final org = game.organizations[organizationId]
  // 只能向本国的门派分配本国统治的据点
  assert(location.nationId == org.nationId)
  location.organizationId = organizationId
  assert(!org.locationIds.contains(location.id))
  org.locationIds.add(location.id)
}

fun addOrganizations(orgs: List) {
  if (game.debug) {
    print('河图: 载入组织数据 ...')
  }
  for (final org in orgs) {
    game.organizations[org.id] = org
  }
}

fun setCurrentOrganization(id: str) {
  game.hero.clanId = id;
}

fun getCurrentOrganization() {
  return getOrganizationById(game.hero.ClanId)
}

fun addOrganization(char) {
  game.organizations[char.id] = char
}

fun getOrganizationById(id: str) {
  return game.organizations[id]
}

fun getOrganizations() {
  return game.organizations
}
