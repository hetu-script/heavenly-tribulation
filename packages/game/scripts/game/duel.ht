import 'game.ht'

/// 战斗模块
/// 输入战斗相关角色的对象
/// 生成战斗过程的文字描述，以及最终结果
/// 
/// 角色对象结构示例
/// final hero = {
///   id: '玩家',
///   name: '玲',
///   health: 100,
///   life: 100,
///   _attack: 35,
///   defense: 5,
///   speed: 15, 
///   skillName: '绝尘剑',
///   offGuard: false,
/// }

external fun _showDuel(context, data: Map)

fun showDuel(battleLog) -> Future {
  return _showDuel(buildContext, data)
}

var battleLog = []

fun _isReady(timeframe: int, speed) {
  return timeframe % speed == 0
}

// damage = ((1 / (Math.log((victim.defense + 5) / 100) + 5)) * 2 * attacker._attack)

fun _attack(attacker, victim, [skill = false]) {
  var damage
  if (!skill) {
    damage = attacker.weapon.attack - victim.defense * Math.random()
    battleLog.add('「${attacker.name}」使用「${attacker.weapon.name}」攻击「${victim.name}」，造成了 ${damage.truncate()} 点伤害。')
  } else {
    damage = attacker.skill.attack - victim.defense * Math.random()
    battleLog.add('「${attacker.name}」发动了「${attacker.skill.name}」，对「${victim.name}」造成了 ${damage.truncate()} 点伤害。')
  }
  victim.health -= damage
  if (victim.health < 0) {
    victim.health = 0
  }
}

// fun createBattle(hero, enemy) -> str {

fun createBattle(enemyId, { heroInitiative = 100, enemyInitiative = 100}) {
  battleLog.clear()

  var timeframe = 0

  final hero = game.characters[game.heroId]
  final enemy = game.characters[enemyId]

  final initiativeSum = hero.initiative + enemy.initiative
  final initiativeValue = initiativeSum * Math.random()
  if (hero.initiative > initiativeValue) {
    battleLog.add('「${hero.name}」趁对手不备，抢先攻击！')
    _attack(hero, enemy)
  } else {
    battleLog.add('「${enemy.name}」趁对手不备，抢先攻击！')
    _attack(enemy, hero)
  }

  var result = false

  while (true) {
    ++timeframe
    if (timeframe >=1000) {
      battleLog.add('「${enemy.name}」获胜!')
      break
    }

    if (enemy.health <= 0) {
      battleLog.add('「${hero.name}」获胜!')
      result = true
      break
    }
    
    if (hero.health <= 0) {
      battleLog.add('「${enemy.name}」获胜!')
      break
    }

    if (_isReady(timeframe, hero.skill.speed)) {
      _attack(hero, enemy, true)
    } else if (_isReady(timeframe, hero.weapon.speed)) {
      _attack(hero, enemy)
    }

    if (_isReady(timeframe, enemy.skill.speed)) {
      _attack(enemy, hero, true)
    } else if (_isReady(timeframe, hero.weapon.speed)) {
      _attack(enemy, hero)
    }
  }

  return {
    log: battleLog,
    result: result
  }
}