import 'game.ht'
import 'l10n.ht'

/// 战斗模块
/// 输入战斗相关角色的对象
/// 生成战斗过程的文字描述，以及最终结果

external fun _showDuel(context, data: Map)

fun showDuel(data) -> Future {
  return _showDuel(buildContext, data)
}

// damage = ((1 / (Math.log((victim.defense + 5) / 100) + 5)) * 2 * attacker._attack)

const kDuelTypePractice = 'practice'
const kDuelTypeSneakAttack = 'sneakAttack'
const kDuelTimeLimit = 1000

fun _findWieldings(character) {
  var wieldings = []
  for (final skill of character.skills.equipments) {
    if (skill.category == 'fighting') {
      wieldings.add(skill)
    }
  }
  for (final item of character.talismans.equipments) {
    if (item.category == 'weapon') {
      wieldings.add(item)
    }
  }
  return wieldings
}

fun _attack(attacker, wielding, victim, log) {
  var damage = wielding.stats.damage - victim.stats.defense * Math.random()
  victim.stats.life -= damage
  if (victim.stats.life < 0) {
    victim.stats.life = 0
  }
  return damage
}

struct Duel {
  construct(char1, char2, { type = 'normal' }) {
    this.char1Name = char1.name
    this.char2Name = char2.name
    this.log = []
    var timeframe = 0

    final char1info = {
      frames: 0,
      itemIndex: 0,
      inRecovery: false,
      wieldings: _findWieldings(char1),
    }
    final char2info = {
      frames: 0,
      itemIndex: 0,
      inRecovery: false,
      wieldings: _findWieldings(char2),
    }
    
    if (char1info.wieldings.isEmpty) {
      // 如果没有装备任何武器或者战斗技能，则直接判负（无论对方是否有装备）
      this.log.add(getLocaleString('emptyHands'))
      this.canceled = true
      this.result = false
    } else if (char1info.wieldings.isEmpty) {
      this.log.add(getLocaleString('enemyEmptyHands'))
      this.canceled = true
      this.result = true
    } else {
      var sneedAttackSuccess = false
      if (type == kDuelTypeSneakAttack) {
        final initiativeSum = char1.attributes.perception + char2.attributes.perception
        final initiativeValue = initiativeSum * Math.random()
        if (char1.attributes.perception > initiativeValue) {
          this.log.add(getLocaleString('sneakAttackSuccess', [char1.name]))
          final damage = _attack(char1, wielding, char2)
          this.log.add(getLocaleString('attackInfo', [
            char1.name,
            char2.name,
            victim.name,
            damage.truncate(),
          ]))
          sneedAttackSuccess = true
        } else {
          this.log.add(getLocaleString('sneakAttackFail', [char1.name]))
        }
      }

      this.result = false
      this.timeFrames = 0

      char1info.wielding = char1info.wieldings[char1info.itemIndex]
      char2info.wielding = char2info.wieldings[char2info.itemIndex]
      
      fun _nextTick(info, { enemeyTurn = false }) {
        if (!info.inRecovery) {
          // 出招等待阶段
          if (info.frames >= info.wielding.stats.startUp) {
            // 出招
            if (!enemeyTurn) {
              final damage = _attack(char1, info.wielding, char2)
              this.log.add(getLocaleString('attackInfo', [
                char1.name,
                info.wielding.name,
                char2.name,
                damage.truncate(),
              ]))
            } else {
              final damage = _attack(char2, info.wielding, char1)
              this.log.add(getLocaleString('attackInfo', [
                char2.name,
                info.wielding.name,
                char1.name,
                damage.truncate(),
              ]))
            }
            info.frames = 0
            info.inRecovery = true
          }
        } else {
          // 收招等待阶段
          if (info.frames >= info.wielding.stats.recovery) {
            // 收招
            ++info.itemIndex
            if (info.itemIndex >= info.wieldings.length) {
              info.itemIndex = 0
            }
            info.wielding = info.wieldings[info.itemIndex]
            info.frames = 0
            info.inRecovery = false
          }
        }
        ++info.frames
      }

      while (true) {
        if (this.timeFrames >= kDuelTimeLimit) {
          this.log.add(getLocaleString('drawGame', [char2.name]))
          this.tied = true
          break
        }

        if (char2.stats.life <= 0) {
          this.log.add(getLocaleString('duelVictory', [char1.name, char2.name]))
          this.result = true
          break
        }
        
        if (char1.stats.life <= 0) {
          this.log.add(getLocaleString('duelVictory', [char1.name, char2.name]))
          break
        }

        _nextTick(char1info)
        _nextTick(char2info, enemeyTurn: true)

        ++this.timeFrames
      }

      if (type == kDuelTypePractice) {
        char1.stats.life = char1.attributes.life
        char2.stats.life = char2.attributes.life
      }
    }
    
    if (config.debug) {
      engine.info(this)
      engine.info('${char1.name} 和 ${char2.name} 的战斗结束了：')
    }
  }
}
