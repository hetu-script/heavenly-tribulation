import 'game.ht'
import 'event.ht'
import 'entity/character/character.ht'
import 'l10n.ht'
import 'maze/maze.ht'
import 'quest/quest.ht'
import 'tile/common.ht'
import 'name/character.ht'

const kQuestProbability = 0.35

fun getGovernmentQuestMax(development) -> int {
  if (development > 20) {
    return 5
  } else {
    return development ~/ 4 + 1
  }
}

fun updateGame({ticks = 1, timeflow = true}) {
  for (final i in range(ticks)) {
    // 每个tick执行的代码
    handleBabies()

    // 每个月执行的代码
    if (game.timestamp % kTicksPerMonth == 0) {
      resetMonthlyActivities(game)

      generateQuests()
    }

    if (game.timestamp % kTicksPerYear == 0) {
      resetYearlyActivities(game)
    }

    onGameEvent('onUpdate')

    if (timeflow) ++game.timestamp
  }
}

// 每个tick检查一次当前是否有婴儿出生
fun handleBabies {
  final pendingRemoveIds = Set()
  for (final baby of game.babies) {
    if (game.timestamp - baby.conceptionTimestamp < baby.pregnancyTime) continue
    final mother = game.characters[baby.motherId]
    if (!mother.isDead) {
      mother.isPregnant = false
      final location = game.locations[mother.locationId]
      final character = Character(
        familyName: baby.familyName,
        shorname: baby.shorname,
        isFemale: baby.isFemale,
        birthTimestamp: game.timestamp,
        locationId: location.id,
        isNewborn: true,
        fatherId: baby.fatherId,
        motherId: baby.motherId,
      )
    }
    pendingRemoveIds.add(baby.id)
  }
  for (final id in pendingRemoveIds) {
    delete game.babies[id]
  }
}

// 生成每月任务
// 门派和官府会生成多个可选的任务
// 但商号、工坊和酒楼只有在是门派开设的情况下才会有多个任务，否则每个月只会提供唯一的一个任务
fun generateQuests {
  for (final location of game.locations) {
    for (final site of location.sites) {
      when (site.category) {
        'cultivation' -> {

        }
        'gang' -> {
          
        }
        'religion' -> {
          
        }
        'academy' -> {
          
        }
        'tradinghouse' -> {
          if (site.organizaitonId) {

          }
        }
        'workshop' -> {
          if (site.organizaitonId) {
            
          }
        }
        'restaurant' -> {
          if (site.organizaitonId) {
            
          }
        }
        'palace' -> {
          
        }
        'government' -> {
          var questMax = getGovernmentQuestMax(location.development)
          if (site.quests.length >= questMax) continue

          // 生成盗贼副本类悬赏任务，只在有国家的据点上生成
          if (random.nextDouble() > kQuestProbability) continue
          if (!location.nationId) continue
          final nation = game.nations[location.nationId]
          if ((random.nextDouble() < location.stability / 100) && !nation.hasBanditEvent && !location.hasBanditEvent) {
            var mazeTerrain
            for (final terrainIndex in nation.territoryIndexes) {
              final terrain = game.world.terrains[terrainIndex]
              if (terrain.locationId) continue
              if (terrain.spriteIndex == kSpriteLand) {
                mazeTerrain = terrain
                break
              }
            }

            if (mazeTerrain) {
              nation.hasBanditEvent = true
              location.hasBanditEvent = true

              final quest = QuestBanditCamp(
                locationId: location.id,
                mazeTerrainIndex: mazeTerrain.index,
                kind: kQuestConquestMazeKindKillBanditBoss,
                bossName: generateCharacterName(),
              )
              engine.info('在 ${location.name} ${site.name} 生成悬赏任务：${quest.id}，副本地点：${mazeTerrain.left}, ${mazeTerrain.top}')
              site.quests[quest.id] = quest
            }
          }
        }
      }
    }

  }
}

// 如果返回值为 true，则英雄的移动会中止在这一格。
fun onHeroMovedOnWorldMap(left, top) {
  engine.info('玩家控制角色移动到了: ${left}, ${top}')

  return false
}

// 异步函数，会在显示地点窗口之前执行，执行完毕后才会显示地点窗口
fun onHeroEnteredLocation(location) async {
  engine.info('玩家进入了: ${location.name}')

}

// 异步函数，会在建筑代码之前执行，执行完毕后才会进入建筑代码
fun onHeroEnteredSite(site) async {
  engine.info('玩家进入了: ${site.name}')

  final hero = getHero()
  // 检查是否有任务满足了提交条件
  final future
  for (final quest of hero.quests) {
    if (site.id == quest.destinationSiteId) {
      quest.result = characterTrySubmitQuest(hero, site, quest)
      // modEventId 意味着这是一个 mod 创建的任务，将由 mod 自己的函数处理
      if (quest.modEventId) {
        return onGameEvent(quest.modEventId, quest)
      } else {
        return handleQuestEnding(quest)
      }
    }
  }
}

fun handleQuestEnding(quest, result) {
  final hero = getHero()
  when (quest.category) {
    kQuestCategoryDelivery -> {
      if (quest.result) {
        return showDialogByLocaleKeys(['delivery.submitSuccessed']).then((value) {
          characterLootBox(hero, quest.reward)
          quest.isEnded = true
        })
      } else {
        return showDialogByLocaleKeys(['delivery.submitFailed'])
      }
    }
  }
}
