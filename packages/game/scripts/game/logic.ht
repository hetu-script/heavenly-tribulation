import 'game.ht'
import 'event.ht'
import 'entity/character/character.ht'
import 'l10n.ht'
import 'maze/maze.ht'
import 'quest/quest.ht'

const kLocationQuestProbability = 0.35

final getQuestMaxFromLocationDevelopment(development) -> int {
  if (development > 20) {
    return 5
  } else {
    return development ~/ 4 + 1
  }
}

fun updateGame({nextTick = true}) {
  // 每个tick执行的代码
  handleBabies()

  // 每个月执行的代码
  if (game.timestamp % kTicksPerMonth == 0) {
    generateQuests()
  }

  onGameEvent('onUpdate')

  if (nextTick) ++game.timestamp
}

// 每个tick检查一次当前是否有婴儿出生
fun handleBabies {
  final bornIds = Set()
  for (final baby of game.babies) {
    if (game.timestamp - baby.conceptionTimestamp < baby.pregnancyTime) continue
    final mother = game.characters[baby.motherId]
    mother.isPregnant = false
    final location = game.locations[mother.locationId]
    final character = Character(
      familyName: baby.familyName,
      shorname: baby.shorname,
      isFemale: baby.isFemale,
      birthTimestamp: game.timestamp,
      locationId: location.id,
      isNewborn: true,
      fatherId: baby.fatherId,
      motherId: baby.motherId,
    )
    bornIds.add(baby.id)
  }
  for (final id in bornIds) {
    delete game.babies[id]
  }
}

// 每个月生成一次每个地点的悬赏任务
fun generateQuests {
  for (final location of game.locations) {
    // 暂时只在有国家的据点上生成
    if (!location.nationId) continue
    final questMax = getQuestMaxFromLocationDevelopment(location.development)
    if (location.quests.length >= questMax) continue
    if (random.nextDouble() > kLocationQuestProbability) continue
    // 生成悬赏任务
    if (random.nextDouble() < location.stability / 100) {
      // final quest = QuestHunt(locationId: location.id)
    }
  }
}

fun onGameEvent(id: str, [arg]) {
  for (final handler of eventHandlers) {
    final callback = handler[id];
    if(callback is function) {
      callback(arg)
    }
  }
}
