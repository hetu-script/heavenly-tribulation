import 'game.ht'
import 'entity/character/character.ht'
import 'l10n.ht'
import 'binding/dialog.ht'

fun addDialog(dlg) {
  dialogs[dlg.id] = dlg
}

fun addDialogs(dlgs: List) {
  engine.info('载入对话数据')
  for (final dlg in dlgs) {
    for (final content in dlg.contents) {
      if (content.characterId) {
        final char = getCharacterById(content.characterId)
        content.avatar = char.avatar
      }
    }
    dialogs[dlg.id] = dlg
  }
}

fun showDialogByLocaleKeys(lines, { returnValue, character }) -> Future {
  final data = { 
    contents: [
      {
        characterId: character?.id,
        isMajorCharacter: character?.isMajorCharacter ?? false,
        icon: character?.icon ?? 'avatar/general.png',
        lines: lines.map( (line) => getLocaleString(line) ).toList()
      }
    ]
  }
  return ui.showGameDialog(buildContext, data, returnValue)
}

fun showDialogByStrings(lines, { returnValue, character }) -> Future {
  final data = {
    contents:[
      {
        characterId: character?.id,
        isMajorCharacter: character?.isMajorCharacter ?? false,
        icon: character?.icon ?? 'avatar/general.png',
        lines,
      }
    ]
  }
  return ui.showGameDialog(buildContext, data, returnValue)
}

fun showDialogByResourceId(id: str, { returnValue }) -> Future {
  final data = dialogs[id]
  return ui.showGameDialog(buildContext, data, returnValue)
}

fun showDialog(data, { returnValue }) -> Future {
  return ui.showGameDialog(buildContext, data, returnValue)
}

fun showSelectionByLocaleKeys(texts: List) -> Future {
  final selections = {}
  for (final text in texts) {
    selections[text] = getLocaleString(text)
  }
  return ui.showSelection(buildContext, selections)
}

fun showSelection(selections) -> Future {
  return ui.showSelection(buildContext, selections)
}

fun showCharacterSelection({title, ids, showCloseButton = false}) -> Future {
  return ui.showCharacterSelection(buildContext, title, ids, showCloseButton)
}

fun showVisitCharacterSelection(idList) -> Future {
  return ui.showVisitCharacterSelection(buildContext, idList)
}

fun showMerchant(merchant, [ priceFactor = 2.0 ]) -> Future {
  return ui.showMerchant(buildContext, merchant, priceFactor)
}

fun showQuests(location) -> Future {
  return ui.showQuests(buildContext, location)
}
