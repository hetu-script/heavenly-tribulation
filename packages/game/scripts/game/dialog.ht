import 'game.ht'
import 'entity/character.ht'
import 'l10n.ht'

fun addDialog(dlg) {
  dialogs[dlg.id] = dlg
}

fun addDialogs(dlgs: List) {
  engine.info('载入对话数据')
  for (final dlg in dlgs) {
    for (final content in dlg.contents) {
      if (content.characterId) {
        final char = getCharacterById(content.characterId)
        content.avatar = char.avatar
      }
      if (content.lineIds) {
        content.lines = content.lineIds.map(
          (id) => getLocaleString(id)
        ).toList()
      }
    }
    dialogs[dlg.id] = dlg
  }
}

external fun _showGameDialog(context, data, returnValue)

fun showDialogByLocaleKeys(lines, { returnValue, character }) -> Future {
  var avatar = character ? character.avatar : 'avatar/general.png'
  final data = { 
    contents: [
      {
        avatar,
        lines: lines.map( (line) => getLocaleString(line) ).toList()
      }
    ]
  }
  return _showGameDialog(buildContext, data, returnValue)
}

fun showDialogByStrings(lines, { returnValue, character }) -> Future {
  var avatar = character ? character.avatar : 'avatar/general.png'
  final data = {
    contents:[
      { 
        avatar,
        lines,
      }
    ]
  }
  return _showGameDialog(buildContext, data, returnValue)
}

fun showDialogByResourceId(id: str, { returnValue }) -> Future {
  final data = dialogs[id]
  return _showGameDialog(buildContext, data, returnValue)
}

fun showDialog(data, { returnValue }) -> Future {
  return _showGameDialog(buildContext, data, returnValue)
}

external fun _showSelection(context, selections)

fun showSelection(selections) -> Future {
  return _showSelection(buildContext, selections)
}

external fun _showCharacterSelection(context, title, idList, notNull)

fun showCharacterSelection({title, ids, showCloseButton = false}) -> Future {
  return _showCharacterSelection(buildContext, title, ids, showCloseButton)
}

external fun _showVisitCharacterSelection(context, idList)

fun showVisitCharacterSelection(idList) -> Future {
  return _showVisitCharacterSelection(buildContext, idList)
}
