import 'game.ht'
import 'entity/character/character.ht'
import 'l10n.ht'
import 'binding/dialog.ht'

fun addDialog(dlg) {
  dialogs[dlg.id] = dlg
}

fun addDialogs(dlgs: List) {
  engine.info('载入对话数据')
  for (final dlg in dlgs) {
    for (final content in dlg.contents) {
      if (content.characterId) {
        final char = getCharacterById(content.characterId)
        content.avatar = char.avatar
      }
    }
    dialogs[dlg.id] = dlg
  }
}

fun showDialogByLocaleKeys(lines, { returnValue, character, displayName }) -> Future {
  final data = { 
    contents: [
      {
        characterId: character?.id,
        displayName: displayName ?? character?.name,
        isMajorCharacter: character?.isMajorCharacter ?? false,
        icon: character?.icon ?? 'avatar/general.png',
        lines: lines.map( (line) => getLocaleString(line) ).toList()
      }
    ]
  }
  return Dialog.showGameDialog(buildContext, data, returnValue)
}

fun showDialogByStrings(lines, { returnValue, character, displayName }) -> Future {
  final data = {
    contents:[
      {
        characterId: character?.id,
        displayName: displayName ?? character?.name,
        isMajorCharacter: character?.isMajorCharacter ?? false,
        icon: character?.icon ?? 'avatar/general.png',
        lines,
      }
    ]
  }
  return Dialog.showGameDialog(buildContext, data, returnValue)
}

fun showDialogByResourceId(id: str, { returnValue }) -> Future {
  final data = dialogs[id]
  return Dialog.showGameDialog(buildContext, data, returnValue)
}

fun showDialog(data, { returnValue }) -> Future {
  return Dialog.showGameDialog(buildContext, data, returnValue)
}

fun showSelectionByLocaleKeys(texts: List) -> Future {
  final selections = {}
  for (final text in texts) {
    selections[text] = getLocaleString(text)
  }
  return Dialog.showSelection(buildContext, selections)
}

fun showSelection(selections) -> Future {
  return Dialog.showSelection(buildContext, selections)
}

fun showCharacterSelection({title, ids, showCloseButton = false}) -> Future {
  return Dialog.showCharacterSelection(buildContext, title, ids, showCloseButton)
}

fun showVisitCharacterSelection(idList) -> Future {
  return Dialog.showVisitCharacterSelection(buildContext, idList)
}

fun showMerchant(merchant, {
  priceFactor = 2.0,
  allowSell = true,
  sellableCategory = [],
  sellableKind = [],
}) -> Future {
  return Dialog.showMerchant(
    buildContext,
    merchant,
    priceFactor,
    allowSell,
    sellableCategory,
    sellableKind,
  )
}

fun showQuests(site) -> Future {
  return Dialog.showQuests(buildContext, site)
}

fun showMaze(maze) -> Future {
  return Dialog.showMaze(buildContext, maze)
}

// 显示一个进度窗口，以天为单位显示动画，每天会调用传入的 checkProgress 函数的返回值来判断是否继续下一天
fun showProgress(title, { checkProgress: function }) {
  return Dialog.showProgress(buildContext, title, checkProgress)
}

fun showIntInput(title, minOrMax, [max]) {
  var min = 1
  if (max == null) {
    max = minOrMax
  } else {
    min = minOrMax
  }
  assert(min <= max)
  return Dialog.showIntInput(buildContext, title, min, max)
}
