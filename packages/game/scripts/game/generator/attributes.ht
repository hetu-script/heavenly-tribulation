import 'attributes/attributes.json' as attributes
import '../l10n.ht'

fun _getAttribute(data) {
  final mod = attributes[data.id]
  final modRank = data.rank != null ? mod.ranks[data.rank] : mod
  var affixName = ''
  if (modRank.affixNameId) {
    affixName = getLocaleString(modRank.affixNameId)
  }
  var value
  var min
  var max
  var valueString
  if (modRank.range) {
    min = modRank.range.min
    max = modRank.range.max
    value = Math.random() * (max - min) + min
  } else {
    value = modRank.value ?? 0
  }
  when (modRank.type) {
    'int'-> {
      value = value.truncate()
      valueString = value.toStringAsFixed(0)
    }
    'float'-> valueString = value.toStringAsFixed(2)
    'percentage'-> valueString = value.toPercentageString(2)
  }
  var attributeName
  if (mod.attributeNameId) {
    attributeName = getLocaleString(
      mod.attributeNameId,
      [valueString],
    )
  }
  final attr = {
    id: data.id,
    affixName,
    rank: data.rank,
    attributeName,
    value,
  }
  if (modRank.range) {
    attr.min = min
    attr.max = max
  }
  return attr
}

fun handleAttributes(data, {
  rarity,
  implicitNum: int = 0,
  hasBase: bool = true,
  prefixNum: int = 0,
  postfixNum: int = 0,
}) {
  rarity ??= getRarity().rarity
  var kind = ''
  if (data.kindNameId) {
    kind = getLocaleString(data.kindNameId)
  }
  var affixNames = ''
  final implicitAttributes = data.implicit ? data.implicit[rarity] : []
  final baseAttributes = {}
  final explicitAttributes = []

  fun getAttributes(rarityAttrs, number, {isBase = false}) {
    final mods = rarityAttrs[rarity]
    if (!mods) return
    for (var i in range(number)) {
      final modData = mods.random
      final attribute = _getAttribute(modData)
      if (attribute.affixName) {
        affixNames += attribute.affixName
      }
      if (isBase) {
        baseAttributes[attribute.id] = attribute
      } else {
        explicitAttributes.add(attribute)
      }
    }
  }

  if (prefixNum) {
    assert(data.prefix != null)
    getAttributes(data.prefix, prefixNum)
  }

  if (hasBase) {
    assert(data.base != null)
    getAttributes(data.base, 1, isBase: true)
  }
  
  if (postfixNum) {
    assert(data.postfix != null)
    getAttributes(data.postfix, postfixNum)
  }

  return {
    name: affixNames + kind,
    baseAttributes,
    explicitAttributes,
  }
}
