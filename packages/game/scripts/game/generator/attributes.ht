import 'attributes/attributes.json' as attributes
import '../l10n.ht'

fun _getAttribute(data) {
  final mod = attributes[data.id]
  final modRank = data.rank != null ? mod.ranks[data.rank] : mod
  var affixName = ''
  if (modRank.affixNameId) {
    affixName = getLocaleString(modRank.affixNameId)
  }
  var value
  var min
  var max
  var valueString
  if (modRank.range) {
    min = modRank.range.min
    max = modRank.range.max
    value = Math.random() * (max - min) + min
  } else {
    value = modRank.value ?? 0
  }
  final attr = {
    id: data.id,
    affixName,
    type: modRank.type,
    rank: data.rank,
    attributeNameId: mod.attributeNameId,
    value,
  }
  if (modRank.range) {
    attr.range = modrank.range
  }
  return attr
}

fun handleAttributes(data, {
  rarity,
  implicitNum: int = 0,
  hasBase: bool = true,
  prefixNum: int = 0,
  postfixNum: int = 0,
}) {
  rarity ??= getRarity().rarity
  var kind = ''
  if (data.kindNameId) {
    kind = getLocaleString(data.kindNameId)
  }
  var affixNames = ''
  final baseAttributes = {}
  final explicitAttributes = {}

  fun getAttributes(rarityAttrs, {number, isBase = false}) {
    final mods = rarityAttrs[rarity]
    if (!mods) return
    if (isBase) {
      for (final modData in mods) {
        final attribute = _getAttribute(modData)
        if (attribute.affixName) {
          affixNames += attribute.affixName
        }
        baseAttributes[attribute.id] = attribute
      }
    } else {
      for (var i in range(number)) {
        final modData = mods.random
        final attribute = _getAttribute(modData)
        if (attribute.affixName) {
          affixNames += attribute.affixName
        }
        explicitAttributes[attribute.id] = attribute
      }
    }
  }

  if (prefixNum) {
    assert(data.prefix != null)
    getAttributes(data.prefix, number: prefixNum)
  }

  if (hasBase) {
    assert(data.base != null)
    getAttributes(data.base, isBase: true)
  }
  
  if (postfixNum) {
    assert(data.postfix != null)
    getAttributes(data.postfix, number: postfixNum)
  }

  return {
    name: affixNames + kind,
    baseAttributes,
    explicitAttributes,
  }
}

fun levelUpAttributes(data) {
  for (final attr in data.levelAttributes) {
    ++attr.level
    if (attr.range) {
      final min = attr.range.min
      final max = attr.range.max
      attr.sum += Math.random() * (max - min) + min
      if (attr.type == 'int') {
        attr.sum = attr.sum.round()
      }
      attr.assessment = (attr.sum - min * attr.level) / ((max - min) * attr.level)
    } else {
      attr.sum += attr.value
    }
  }
}
