import 'component.ht'
import 'random_names/random_names.ht'

/// 生成世界地图的算法
///
/// spritesheet上不同地形对应的编号：
/// 0：虚空
/// 1：浅海
/// 2：深海
/// 3：陆地（草原）
///
/// 算法思路：
///
/// 先用海面填满整个地图空间
///
/// 根据地图大小以及陆地和水面的比例，得到应该生成多少块陆地
///
/// 找到一个出发点，通常在地图中间部分
///
/// 找到出发点周围的方块，将其加入一个数组，作为当前陆地的边界
///
/// 将当前方块变成陆地，检查陆地比例，如果不够，就从当前陆地边界中随机挑选一个方块，将其变成陆地，同时重新计算边界。

const _defaultWorldWidth = 12
const _defaultWorldHeight = 12
const _kWater = 1
const _kShelf = 2
const _kLand = 3
const _kCity = 4
const _kLandCategory = 'land'
const _kWaterCategory = 'water'
const _kLocationDensity = 32 // 据点密度，32 意味着每有 32 个格子，就会有一个据点

fun createWorld({
      terrainSpriteSheet: str,
      tileShape = 'hexagonalVertical',
      width = _defaultWorldWidth,
      height = _defaultWorldHeight,
      style = 'island',
      landProportion = 0.55,
      gridWidth = 32.0,
      gridHeight = 28.0,
      tileSpriteSrcWidth = 32.0,
      tileSpriteSrcHeight = 48.0,
      tileOffsetX = 0.0,
      tileOffsetY = 2.0,
      }) {

  final terrains = []

  // 坐标是否在地图范围内
  fun isPositionWithinMap(left, top) {
    return (left > 0 && top > 0 && left <= width && top <= height)
  }

  // 索引是否在地图范围内
  fun isIndexWithinMap(index) {
    return 0 <= index && index < terrains.length
  }

  // 从坐标得到索引
  fun tilePos2Index(left, top) {
    return left - 1 + (top - 1) * width
  }

  // 从索引得到坐标
  fun index2TilePos(index: int) {
    final left = index % width + 1
    final top = index ~/ width + 1
    return { left, top }
  }

  for (var j = 0; j < height; ++j) {
    for (var i = 0; i < width; ++i) {
      terrains.add(
        {
          index: tilePos2Index(i + 1, j + 1),
          left: i + 1,
          top: j + 1,
          spriteIndex: _kWater,
        }
      )
    }
  }

  final zones = []

  // 新建一个区域，返回区域index，区域保存为一个列表
  fun newZone({name: str, category: str, count: int}) {
    assert(category != null)
    final index = zones.length
    final zone = { index, name, category, count: count ?? 1 }
    zones.add(zone)
    return zone
  }

  // 没有区域，也是一个区域
  newZone(name: '无', category: 'void', count: 0)
  
  // 获取相邻的格子
  fun getNeighbors(left, top) {
    final neighbors = []
    if (isPositionWithinMap(left - 1, top)) {
      neighbors.add(terrains[tilePos2Index(left - 1, top)])
    }
    if (isPositionWithinMap(left, top - 1)) {
      neighbors.add(terrains[tilePos2Index(left, top - 1)])
    }
    if (isPositionWithinMap(left + 1, top)) {
      neighbors.add(terrains[tilePos2Index(left + 1, top)])
    }
    if (isPositionWithinMap(left, top + 1)) {
      neighbors.add(terrains[tilePos2Index(left, top + 1)])
    }
    if (left % 2 == 0) {
      if (isPositionWithinMap(left + 1, top + 1)) {
        neighbors.add(terrains[tilePos2Index(left + 1, top + 1)])
      }
      if (isPositionWithinMap(left - 1, top + 1)) {
        neighbors.add(terrains[tilePos2Index(left - 1, top + 1)])
      }
    } else {
      if (isPositionWithinMap(left - 1, top - 1)) {
        neighbors.add(terrains[tilePos2Index(left - 1, top - 1)])
      }
      if (isPositionWithinMap(left + 1, top - 1)) {
        neighbors.add(terrains[tilePos2Index(left + 1, top - 1)])
      }
    }
    return neighbors
  }
  
  final shelf = {}

  // 刷新当前大区块的边缘格子坐标
  fun updateShelf(left, top) {
    delete shelf[tilePos2Index(left, top)]
    final neighbors = getNeighbors(left, top)
    for (final tile in neighbors) {
      if (tile.spriteIndex == _kWater) {
        shelf[tile.index] = true
      }
    }
  }

  // 生成大区块
  final landArea = (width * height * landProportion).floor()

  final minLeft = width ~/ 3
  final minTop = height ~/ 3
  final maxLeft = width ~/ 3 * 2
  final maxTop = height ~/ 3 * 2

  final startLeft = Math.randomInt(maxLeft - minLeft) + minLeft
  final startTop = Math.randomInt(maxTop - minTop) + minTop
  // print('start: ${startLeft},${startTop}')
  final startIndex = tilePos2Index(startLeft, startTop)
  terrains[startIndex]['spriteIndex'] = _kLand
  final landZone = newZone(category: 'land')
  terrains[startIndex]['zoneIndex'] = landZone.index
  updateShelf(startLeft, startTop)

  var currentLandSize = 1
  while (currentLandSize < landArea) {
    ++currentLandSize
    final perimeterIndexes = shelf.keys
    final randomIndex = perimeterIndexes[Math.randomInt(perimeterIndexes.length)]
    final tile = terrains[int.parse(randomIndex)]
    updateShelf(tile.left, tile.top)
    tile.spriteIndex = _kLand
    tile.zoneIndex = landZone.index
  }

  landZone.count = landArea

  // 生成地图上的不同地域
  final perimeter = {}

  // 根据相邻的格子的地域，分配区块
  fun updateZone(tile, [spriteIndex]) {
    spriteIndex ??= tile.spriteIndex
    // skip tiles that has zoned or tiles being processed
    if (tile.zoneIndex != null) {
      return
    }
    // print('processing: ${tile.left},${tile.top}, spriteIndex: ${tile.spriteIndex}')
    tile.zoneIndex = -1 // mark this tile is being processed, will skip it when process others
    final neighbors = getNeighbors(tile.left, tile.top)
    var foundAdjacentZone = false
    for (final neighbor in neighbors) {
      // skip tiles that has diffrent spriteIndex and those still being processed
      if (spriteIndex != neighbor.spriteIndex || neighbor.zoneIndex == -1) {
        continue
      }
      if (neighbor.zoneIndex == null) {
        updateZone(neighbor, tile.spriteIndex)
      }
      assert(neighbor.zoneIndex > 0)
      tile.zoneIndex = neighbor.zoneIndex
      ++zones[neighbor.zoneIndex]['count']
      foundAdjacentZone = true
      // print('Found neighbor at left: ${tile.left}, top: ${tile.top} spriteIndex: ${tile.spriteIndex}, neighborLeft: ${neighbor.left}, neighborTop: ${neighbor.top}, zoneIndex: ${neighbor.zoneIndex}')
      break
    }
    if (!foundAdjacentZone) {
      final zone = newZone(category: tile.spriteIndex == _kLand ? _kLandCategory : _kWaterCategory)
      tile.zoneIndex = zone.index
      // print('Created zone! left: ${tile.left}, top: ${tile.top} spriteIndex: ${tile.spriteIndex}, zoneIndex: ${zone.index}')
    }
    updatePerimeter(tile.left, tile.top)
  }

  // 刷新当前已经分配了地域的大区块的边缘
  fun updatePerimeter(left, top) {
    perimeter[tilePos2Index(left, top)] = false
    final neighbors = getNeighbors(left, top)
    for (final tile in neighbors) {
      if (!perimeter[tile.index]) {
        perimeter[tile.index] = true
      }
    }
  }

  // 获取尚未被分配地域的区块，可能为 null
  fun getUnzonedTile() {
    return terrains.firstWhere((tile) {
        tile.zoneIndex == null || tile.zoneIndex == -1
      }, orElse: () {})
  }

  var unzonedTile

  while (unzonedTile = getUnzonedTile()) {
    updateZone(unzonedTile)
  }

  for (final zone in zones) {
    if (zone.name) {
      continue
    }
    final names = getZone(1, category: zone.category)
    zone.name = names.first.name
  }

  fun getLocationCategory(tile) {
    if (tile.spriteIndex == _kLand) {
      final neighbors = getNeighbors(tile.left, tile.top)
      for (final neighbor in neighbors) {
        if (neighbor.spriteIndex == _kWater) {
          return 'shore'
        }
      }
      return 'city'
    }
    else {
      return 'island'
    }
  }

  // 生成据点
  final locationNumber = terrains.length ~/ _kLocationDensity
  final locations = []
  var generatedIndexes = 0
  while (generatedIndexes++ < locationNumber) {
    final index = Math.randomInt(terrains.length)
    final tile = terrains[index]
    final category = getLocationCategory(tile)
    final pos = index2TilePos(index)
    final names = getLocation(1, category: category)
    final name = names.first.name
    locations.add({
      id: 'location_entity_${name}',
      name,
      shape: tileShape,
      left: pos.left,
      top: pos.top,
      srcWidth: tileSpriteSrcWidth,
      srcHeight: tileSpriteSrcHeight,
      gridWidth,
      gridHeight,
      spriteIndex: _kCity,
      offsetX: tileOffsetX,
      offsetY: tileOffsetY,
    })
  }

  final entities = {}

  for (final loc in locations) {
    entities['${loc.left},${loc.top}'] = loc
  }

  // 因为前面的算法要检查 spriteIndex，所以最后再填充大陆架
  for (final index in shelf.keys) {
    final tile = terrains[int.parse(index)]
    tile.spriteIndex = _kShelf
  }

  final data = {
    terrainSpriteSheet,
    tapSelect: true,
    tileShape,
    width,
    height,
    entry: {
      x: startLeft,
      y: startTop,
    },
    gridWidth,
    gridHeight,
    tileSpriteSrcWidth,
    tileSpriteSrcHeight,
    tileOffsetX,
    tileOffsetY,
    terrains,
    zones,
    entities,
  }
  
  game.world = data
  final future = MapComponent.fromJson(dart, data.toJson())
  future.then((value) {
    game.world.component = value
  })
  return future
}
