import 'hexagonal_tile.ht'
import 'random_names/random_names.ht'
import 'component.ht'

/// 生成世界地图的算法
///
/// spritesheet上不同地形对应的编号：
/// 0：虚空
/// 1：浅海
/// 2：深海
/// 3：陆地（草原）
///
/// 算法思路：
///
/// 用海面填满整个地图空间
///
/// 找到一个出发点，通常在地图中间部分
///
/// 找到出发点周围的方块，将其加入一个数组，作为当前陆地的边界
///
/// 将当前方块变成陆地，检查陆地比例，如果不够，就从当前陆地边界中随机挑选一个方块，将其变成陆地，同时重新计算边界。
///
/// 循环上述步骤，直到陆地和海水的比例达到预设值
///
/// 为陆地所属的整个大地块命名，然后找到尚未命名的地块，将所有相连的地块作为一个整体命名，直到所有的地块都有名字，根据地块大小有不同命名方式
///
/// 根据城市密度，生成城市，并根据城市位于陆地、海边还是海中，对其进行特殊命名
///
/// 对于每个城市，链接最近的另外两个城市，使用 A* 寻路算法，标记经过的地块
///
/// 对于没有道路经过的地块，随机填充山脉和树林

const _defaultWorldWidth = 12
const _defaultWorldHeight = 12
const _kSpriteWater = 1
const _kSpriteShelf = 2
const _kSpriteLand = 3
const _kSpriteCity = 4
const _kSpriteForest = 5
const _kSpriteMountain = 6
const _kZoneVoid = 'void'
const _kZoneWater = 'water'
const _kZoneContinent = 'continent'
const _kZoneLake = 'lake'
const _kMinZoneSizeForLocation = 12 // 据点密度，即产生据点的最小 Zone 大小
const _kMinZoneSizeForSea = 8
const _kForestThreshold = 0.5
const _kMountainThreshold = 0.2

struct Zone {
  var index: int
  var name: str
  var category: str
  var count = 0
  var tiles = []

  construct ({index, name, category}) {
    this.index = index
    this.name = name
    this.category = category
  }
}

fun createWorld({
    terrainSpriteSheet: str,
    tileShape = 'hexagonalVertical',
    width = _defaultWorldWidth,
    height = _defaultWorldHeight,
    style = 'island',
    landProportion = 0.55,
    gridWidth = 32.0,
    gridHeight = 28.0,
    tileSpriteSrcWidth = 32.0,
    tileSpriteSrcHeight = 48.0,
    tileOffsetX = 0.0,
    tileOffsetY = 2.0,
  }) {

  final terrains = []

  // 从 hexagonal 坐标得到索引
  fun tilePos2Index(left, top) {
    return left - 1 + (top - 1) * width
  }

  // 从索引得到 hexagonal 坐标
  fun index2TilePos(index: int) {
    final left = index % width + 1
    final top = index ~/ width + 1
    return Tile(left, top)
  }

  // 坐标是否在地图范围内
  fun isPositionWithinMap(left, top) {
    return (left > 0 && top > 0 && left <= width && top <= height)
  }

  // 索引是否在地图范围内
  fun isIndexWithinMap(index) {
    return 0 <= index && index < terrains.length
  }

  for (var j = 0; j < height; ++j) {
    for (var i = 0; i < width; ++i) {
      terrains.add(
        {
          ...Tile(i + 1, j + 1),
          index: tilePos2Index(i + 1, j + 1),
          spriteIndex: _kSpriteWater,
        }
      )
    }
  }

  final zones = []

  // 新建一个区域，返回区域index，区域保存为一个列表
  fun newZone({name: str, category: str}) {
    assert(category != null)
    final index = zones.length
    final zone = Zone(index: index, name: name, category: category)
    zones.add(zone)
    return zone
  }

  // 没有区域，也是一个区域
  newZone(name: '无', category: _kZoneVoid)

  fun addTile2Zone(zoneIndex, tile) {
    assert(tile.zoneIndex == null || tile.zoneIndex == -1)
    assert(0 <= zoneIndex && zoneIndex < zones.length)
    tile.zoneIndex = zoneIndex
    final zone = zones[zoneIndex]
    tile.zoneCategory = zone.category
    ++zone.count
    zone.tiles.add(tile.index)
  }

  // 获取尚未被分配地域的区块，可能为 null
  
  // 获取相邻并且在地图范围内的格子
  // 如果 [restrict2Zone] 为 true，则只会返回和起点所在 tile 具有相同 zoneIndex 的格子
  // 如果指定了方向
  fun getNeighbors(left: int, top: int, {
      restrict2Zone: bool = false}) {
    assert(isPositionWithinMap(left, top))
    final origin = terrains[tilePos2Index(left, top)]
    final neighbors = []
    // 奇数列
    if (left % 2 != 0) {
      // 上面
      if (isPositionWithinMap(left, top - 1)) {
        final tile = terrains[tilePos2Index(left, top - 1)]
        if (!restrict2Zone || origin.zoneIndex == tile.zoneIndex) {
          neighbors.add(tile)
        }
      }
      // 下面
      if (isPositionWithinMap(left, top + 1)) {
        final tile = terrains[tilePos2Index(left, top + 1)]
        if (!restrict2Zone || origin.zoneIndex == tile.zoneIndex) {
          neighbors.add(tile)
        }
      }
      // 左上
      if (isPositionWithinMap(left - 1, top - 1)) {
        final tile = terrains[tilePos2Index(left - 1, top - 1)]
        if (!restrict2Zone || origin.zoneIndex == tile.zoneIndex) {
          neighbors.add(tile)
        }
      }
      // 左下
      if (isPositionWithinMap(left - 1, top)) {
        final tile = terrains[tilePos2Index(left - 1, top)]
        if (!restrict2Zone || origin.zoneIndex == tile.zoneIndex) {
          neighbors.add(tile)
        }
      }
      // 右上
      if (isPositionWithinMap(left + 1, top - 1)) {
        final tile = terrains[tilePos2Index(left + 1, top - 1)]
        if (!restrict2Zone || origin.zoneIndex == tile.zoneIndex) {
          neighbors.add(tile)
        }
      }
      // 右下
      if (isPositionWithinMap(left + 1, top)) {
        final tile = terrains[tilePos2Index(left + 1, top)]
        if (!restrict2Zone || origin.zoneIndex == tile.zoneIndex) {
          neighbors.add(tile)
        }
      }
    }
    // 欧数列
    else {
      // 上面
      if (isPositionWithinMap(left, top - 1)) {
        final tile = terrains[tilePos2Index(left, top - 1)]
        if (!restrict2Zone || origin.zoneIndex == tile.zoneIndex) {
          neighbors.add(tile)
        }
      }
      // 下面
      if (isPositionWithinMap(left, top + 1)) {
        final tile = terrains[tilePos2Index(left, top + 1)]
        if (!restrict2Zone || origin.zoneIndex == tile.zoneIndex) {
          neighbors.add(tile)
        }
      }
      // 左上
      if (isPositionWithinMap(left - 1, top)) {
        final tile = terrains[tilePos2Index(left - 1, top)]
        if (!restrict2Zone || origin.zoneIndex == tile.zoneIndex) {
          neighbors.add(tile)
        }
      }
      // 左下
      if (isPositionWithinMap(left - 1, top + 1)) {
        final tile = terrains[tilePos2Index(left - 1, top + 1)]
        if (!restrict2Zone || origin.zoneIndex == tile.zoneIndex) {
          neighbors.add(tile)
        }
      }
      // 右上
      if (isPositionWithinMap(left + 1, top)) {
        final tile = terrains[tilePos2Index(left + 1, top)]
        if (!restrict2Zone || origin.zoneIndex == tile.zoneIndex) {
          neighbors.add(tile)
        }
      }
      // 右下
      if (isPositionWithinMap(left + 1, top + 1)) {
        final tile = terrains[tilePos2Index(left + 1, top + 1)]
        if (!restrict2Zone || origin.zoneIndex == tile.zoneIndex) {
          neighbors.add(tile)
        }
      }
    }
    return neighbors
  }

  // 当前地域的边缘格子坐标
  final shelf = {}

  // 刷新当前地域的边缘格子坐标
  fun updateShelf(left, top) {
    delete shelf[tilePos2Index(left, top)]
    final neighbors = getNeighbors(left, top)
    for (final tile in neighbors) {
      if (tile.spriteIndex == _kSpriteWater) {
        shelf[tile.index] = true
      }
    }
  }

  // 生成地域
  final landArea = (width * height * landProportion).floor()

  final minLeft = width ~/ 3
  final minTop = height ~/ 3
  final maxLeft = width ~/ 3 * 2
  final maxTop = height ~/ 3 * 2

  final startLeft = Math.randomInt(maxLeft - minLeft) + minLeft
  final startTop = Math.randomInt(maxTop - minTop) + minTop
  // print('start: ${startLeft},${startTop}')
  final startIndex = tilePos2Index(startLeft, startTop)
  final firstTile = terrains[startIndex]
  firstTile.spriteIndex = _kSpriteLand
  final landZone = newZone(category: _kZoneContinent)
  addTile2Zone(landZone.index, firstTile)
  updateShelf(startLeft, startTop)

  var currentLandSize = 1
  while (currentLandSize < landArea) {
    // print('expanding land')
    ++currentLandSize
    final perimeterIndexes = shelf.keys
    final tile = terrains[int.parse(perimeterIndexes.random)]
    updateShelf(tile.left, tile.top)
    tile.spriteIndex = _kSpriteLand
    addTile2Zone(landZone.index, tile)
  }

  // 生成地图上的不同地域

  // 已经分配了地域的全部方块的边缘
  // final perimeter = {}

  // 根据相邻的格子的地域，分配地域索引
  fun updateZone(tile, [spriteIndex, unzonedNeighbors]) {
    assert(tile.zoneIndex == null)
    var willCreateZone = true
    if (spriteIndex != null) {
      willCreateZone = false
    } else {
      spriteIndex = tile.spriteIndex
    }
    unzonedNeighbors ??= {}
    // print('processing: ${tile.left},${tile.top}, spriteIndex: ${tile.spriteIndex}')
    tile.zoneIndex = -1 // mark this tile is being processed, will skip it when process others
    final neighbors = getNeighbors(tile.left, tile.top)
    var foundAdjacentZone = false
    for (final neighbor in neighbors) {
      // skip tiles that has diffrent spriteIndex and those still being processed
      if (spriteIndex != neighbor.spriteIndex) continue
      if (neighbor.zoneIndex == null) {
        updateZone(neighbor, spriteIndex, unzonedNeighbors)
      }
      if (neighbor.zoneIndex == -1) {
        unzonedNeighbors[neighbor.index] = neighbor
        continue
      }
      addTile2Zone(neighbor.zoneIndex, tile)
      foundAdjacentZone = true
      // print('Found neighbor: ${neighbor.left},${neighbor.top}, zoneIndex: ${neighbor.zoneIndex}')
      break
    }
    if (!foundAdjacentZone && willCreateZone) {
      var category = tile.spriteIndex == _kSpriteLand ? _kZoneContinent : _kZoneWater
      final zone = newZone(category: category)
      // print('Created zone! left: ${tile.left}, top: ${tile.top} spriteIndex: ${tile.spriteIndex}, zoneIndex: ${zone.index}')
      addTile2Zone(zone.index, tile)
      // print('processing previoused stored unzoned tiles: ${unzonedNeighbors}')
      for (final unzonedTile of unzonedNeighbors) {
        if (unzonedTile.zoneIndex == -1) {
          addTile2Zone(zone.index, unzonedTile)
        }
      }
    }
    // updatePerimeter(tile.left, tile.top)
  }

  // 刷新当前已经分配了地域的全部方块的边缘
  // fun updatePerimeter(left, top) {
  //   perimeter[tilePos2Index(left, top)] = false
  //   final neighbors = getNeighbors(left, top)
  //   for (final tile in neighbors) {
  //     if (!perimeter[tile.index]) {
  //       perimeter[tile.index] = true
  //     }
  //   }
  // }

  var unzonedTile

  while (
    unzonedTile = terrains.firstWhere((tile) {
        tile.zoneIndex == null
      }, orElse: () {})
  ) {
    // print('updating unzoned tile')
    updateZone(unzonedTile)
  }

  for (final zone in zones) {
    if (zone.name) {
      continue
    }
    late names
    late category
    if (zone.category == _kZoneWater) {
      category = zone.count < _kMinZoneSizeForSea ? _kZoneLake : _kZoneWater
    } else {
      category = zone.category
    }
    names = getZone(1, category: category)
    zone.name = names.first.name
  }

  // 根据 tile 的所在位置的类型，获取据点类型
  fun getLocationCategory(tile) {
    if (tile.spriteIndex == _kSpriteLand) {
      final neighbors = getNeighbors(tile.left, tile.top)
      for (final neighbor in neighbors) {
        if (neighbor.spriteIndex == _kSpriteWater) {
          return 'shore'
        }
      }
      return 'city'
    }
    else {
      return 'island'
    }
  }

  final locations = []

  fun find2NearestLocation(origin, {restrict2Zone: bool = true}) {
    assert(locations.length > 0)
    var nearest
    var nearestDistance
    var secondNearest
    var secondNearestDistance
    for (final location in locations) {
      if (location.index == origin.index) {
        continue
      } else {
        final distance = getTileDistance(origin, location)
        if (!restrict2Zone || location.zoneIndex == origin.zoneIndex) {
          if (!location.destinations || !location.destinations[origin.index]) {
            if (nearestDistance == null || distance < nearestDistance) {
              nearestDistance = distance
              nearest = location
            } else if (secondNearestDistance == null || distance < secondNearestDistance) {
              secondNearestDistance = distance
              secondNearest = location
            } else {
              continue
            }
          }
        }
      }
    }
    return { nearest, secondNearest }
  }

  // 生成据点
  for (final zone in zones) {
    // print('processing zone: ${zone.name} count: ${zone.count}')
    final locationNumber = zone.count ~/ _kMinZoneSizeForLocation
    var generatedIndexes = []
    while (generatedIndexes.length < locationNumber) {
      // print('generating location')
      var index
      do {
        // print('generating location index')
        index = zone.tiles.random
      } while (generatedIndexes.contains(index))
      generatedIndexes.add(index)
      final tile = terrains[index]
      final category = getLocationCategory(tile)
      final names = getLocation(1, category: category)
      final name = names.first.name
      locations.add({
        ...Tile(tile.left, tile.top),
        index: tilePos2Index(tile.left, tile.top),
        zoneIndex: tile.zoneIndex,
        zoneCategory: tile.zoneCategory,
        id: 'location_entity_${name}',
        name,
        shape: tileShape,
        srcWidth: tileSpriteSrcWidth,
        srcHeight: tileSpriteSrcHeight,
        gridWidth,
        gridHeight,
        spriteIndex: _kSpriteCity,
        offsetX: tileOffsetX,
        offsetY: tileOffsetY,
      })
    }
  }

  // final routes = []

  // hScore(n) 是曼哈顿距离时的 A* 算法
  fun calculateRoute(start, end) {
    // print('calculating route: ${start.left},${start.top} to ${end.left},${end.top}')

    assert(start.zoneIndex > 0)
    assert(end.zoneIndex > 0)
    assert(start.index != end.index)
    final zone1 = zones[start.zoneIndex]
    final zone2 = zones[end.zoneIndex]
    var route

    // g(n): 原点到该点的距离
    final gScore = {}
    gScore[start.index] = 0
    // h(n): 该点到终点的距离
    final hScore = {}
    hScore[start.index] = getTileDistance(start, end)
    // f(n) = g(n) + h(n)
    final fScore = {}
    fScore[start.index] = hScore[start.index]

    // 节点返回路径，每个 key 对应的 value 代表了 key 的坐标的上一步骤的坐标
    final cameFrom = {}
    fun reconstructPath(cameFrom, current) {
      final from = cameFrom[current]
      if (from) {
        final path = reconstructPath(cameFrom, from)
        return [ ...path, current ]
      } else {
        return [ current ]
      }
    }
    // 已被计算的坐标
    final closed = []
    // 将要计算的坐标, key 是 tile index，value 是 离起点的距离
    final open = []
    open.add(start.index)
    final distance = getTileDistance(start, end)
    // 两个据点在相同地域
    if (zone1.index == zone2.index) {
      // route = {
      //   startLeft: start.left,
      //   startTop: start.top,
      //   path: []
      // }
      while (open.isNotEmpty) {
        // 找到 f(x) 最小的节点
        open.sort((t1, t2) => fScore[t1].compareTo(fScore[t2]))
        final nextIndex = open.first
        final next = index2TilePos(nextIndex)
        if (nextIndex == end.index) {
          // route.path = reconstructPath(cameFrom, end.index)
          route = reconstructPath(cameFrom, end.index)
          return route
        }
        open.remove(nextIndex)
        closed.add(nextIndex)
        final neighbors = getNeighbors(next.left, next.top, restrict2Zone: true)
        for (final neighbor in neighbors) {
          if (closed.contains(neighbor.index)) continue
          final tentetiveGScore = gScore[nextIndex] + 1
          var tentativelyBetter = false
          if (!open.contains(neighbor.index) || (tentetiveGScore < gScore[neighbor.index])) {
            tentativelyBetter = true
          }
          if (tentativelyBetter) {
            cameFrom[neighbor.index] = nextIndex
            gScore[neighbor.index] = tentetiveGScore
            hScore[neighbor.index] = getTileDistance(neighbor, end)
            fScore[neighbor.index] = gScore[neighbor.index] + hScore[neighbor.index]
            if (!open.contains(neighbor.index)) {
              open.add(neighbor.index)
            }
          }
        }
      }
      return null
    }
    // 据点 1 所在地域相比据点 2 所在的地域较大
    else if (zone1.count > zone2.count) {

    }
    // 据点 1 所在地域相比据点 2 所在的地域较小
    else {

    }
  }

  final entities = {}

  for (final location in locations) {
    entities['${location.left},${location.top}'] = location
    // 确保陆地上的每个城市至少可以链接到另外两个城市
    if (location.zoneCategory == _kZoneContinent) {
      final tiles = find2NearestLocation(location, restrict2Zone: true)
      if (tiles.nearest) {
        final route = calculateRoute(location, tiles.nearest)
        if (route) {
          // routes.add(route)
          for (final index in route) {
            final terrain = terrains[index]
            terrain.isRoute = true
          }
        }
      }
      if (tiles.secondNearest) {
        final route = calculateRoute(location, tiles.secondNearest)
        if (route) {
          // routes.add(route)
          for (final index in route) {
            final terrain = terrains[index]
            terrain.isRoute = true
          }
        }
      }
    }
  }

  // 将大陆上没有道路的方格，随机填充为平原、森林、山地
  for (final index in landZone.tiles) {
    final terrain = terrains[index]
    if (!terrain.isRoute) {
      final r = Math.random()
      if (r < _kMountainThreshold) {
        terrain.spriteIndex = _kSpriteMountain
      } else if (r < _kForestThreshold) {
        terrain.spriteIndex = _kSpriteForest
      }
    }
  }

  // 将大陆和海洋接触的地方填充为大陆架
  for (final index in shelf.keys) {
    final tile = terrains[int.parse(index)]
    tile.spriteIndex = _kSpriteShelf
  }

  final data = {
    terrainSpriteSheet,
    tapSelect: true,
    tileShape,
    width,
    height,
    heroX: startLeft,
    heroY: startTop,
    gridWidth,
    gridHeight,
    tileSpriteSrcWidth,
    tileSpriteSrcHeight,
    tileOffsetX,
    tileOffsetY,
    terrains,
    zones,
    entities,
  }
  
  game.world = data
  final future = MapComponent.fromJson(dart, data.toJson())
  future.then((value) {
    game.world.component = value
  })
  return future
}