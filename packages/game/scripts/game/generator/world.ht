import 'hexagonal_tile.ht'
import 'random_names/random_names.ht'
import 'component.ht'
import {
  tilePos2Index,
  getMapTileNeighbors,
  calculateRoute } from '../map.ht'

/// 生成世界地图的算法
///
/// spritesheet上不同地形对应的编号：
/// 0：虚空
/// 1：浅海
/// 2：深海
/// 3：陆地（草原）
///
/// 算法思路：
///
/// 用海面填满整个地图空间
///
/// 找到一个出发点，通常在地图中间部分
///
/// 找到出发点周围的方块，将其加入一个数组，作为当前陆地的边界
///
/// 将当前方块变成陆地，检查陆地比例，如果不够，就从当前陆地边界中随机挑选一个方块，将其变成陆地，同时重新计算边界。
///
/// 循环上述步骤，直到陆地和海水的比例达到预设值
///
/// 为陆地所属的整个大地块命名，然后找到尚未命名的地块，将所有相连的地块作为一个整体命名，直到所有的地块都有名字，根据地块大小有不同命名方式
///
/// 根据城市密度，生成城市，并根据城市位于陆地、海边还是海中，对其进行特殊命名
///
/// 对于每个城市，链接最近的另外两个城市，使用 A* 寻路算法，标记经过的地块
///
/// 对于没有道路经过的地块，随机填充山脉和树林

const _defaultWorldWidth = 12
const _defaultWorldHeight = 12
const _kSpriteWater = 1
const _kSpriteShelf = 2
const _kSpriteLand = 3
const _kSpriteCity = 4
const _kSpriteForest = 5
const _kSpriteMountain = 6
const _kZoneVoid = 'void'
const _kZoneWater = 'water'
const _kZoneContinent = 'continent'
const _kZoneLake = 'lake'
const _kMinZoneSizeForLocation = 12 // 据点密度，即产生据点的最小 Zone 大小
const _kMinZoneSizeForSea = 8
const _kForestThreshold = 0.5
const _kMountainThreshold = 0.2

struct Zone {
  var index: int
  var name: str
  var category: str
  var count = 0
  var tiles = []

  construct ({index, name, category}) {
    this.index = index
    this.name = name
    this.category = category
  }
}

fun createWorld({
    terrainSpriteSheet: str,
    tileShape = 'hexagonalVertical',
    width = _defaultWorldWidth,
    height = _defaultWorldHeight,
    style = 'island',
    landProportion = 0.55,
    gridWidth = 32.0,
    gridHeight = 28.0,
    tileSpriteSrcWidth = 32.0,
    tileSpriteSrcHeight = 48.0,
    tileOffsetX = 0.0,
    tileOffsetY = 2.0,
  }) {

  final data = {
    terrainSpriteSheet,
    tapSelect: true,
    tileShape,
    width,
    height,
    gridWidth,
    gridHeight,
    tileSpriteSrcWidth,
    tileSpriteSrcHeight,
    tileOffsetX,
    tileOffsetY,
    terrains: [],
    zones: [],
    entities: {},
  }

  for (var j = 0; j < height; ++j) {
    for (var i = 0; i < width; ++i) {
      data.terrains.add(
        {
          ...Tile(i + 1, j + 1),
          index: tilePos2Index(i + 1, j + 1, data.width),
          spriteIndex: _kSpriteWater,
        }
      )
    }
  }

  // 新建一个区域，返回区域index，区域保存为一个列表
  fun newZone({name: str, category: str}) {
    assert(category != null)
    final index = data.zones.length
    final zone = Zone(index: index, name: name, category: category)
    data.zones.add(zone)
    return zone
  }

  // 没有区域，也是一个区域
  newZone(name: '无', category: _kZoneVoid)

  fun addTile2Zone(zoneIndex, tile) {
    assert(tile.zoneIndex == null || tile.zoneIndex == -1)
    assert(0 <= zoneIndex && zoneIndex < data.zones.length)
    tile.zoneIndex = zoneIndex
    final zone = data.zones[zoneIndex]
    tile.zoneCategory = zone.category
    ++zone.count
    zone.tiles.add(tile.index)
  }

  // 当前地域的边缘格子坐标
  final shelf = {}

  // 刷新当前地域的边缘格子坐标
  fun updateShelf(left, top) {
    delete shelf[tilePos2Index(left, top, data.width)]
    final neighbors = getMapTileNeighbors(data, left, top)
    for (final tile in neighbors) {
      if (tile.spriteIndex == _kSpriteWater) {
        shelf[tile.index] = true
      }
    }
  }

  // 生成地域
  final landArea = (width * height * landProportion).floor()

  final minLeft = width ~/ 3
  final minTop = height ~/ 3
  final maxLeft = width ~/ 3 * 2
  final maxTop = height ~/ 3 * 2

  final startLeft = Math.randomInt(maxLeft - minLeft) + minLeft
  final startTop = Math.randomInt(maxTop - minTop) + minTop
  data.heroX = startLeft
  data.heroY = startTop
  // print('start: ${startLeft},${startTop}')
  final startIndex = tilePos2Index(startLeft, startTop, data.width)
  final firstTile = data.terrains[startIndex]
  firstTile.spriteIndex = _kSpriteLand
  final landZone = newZone(category: _kZoneContinent)
  addTile2Zone(landZone.index, firstTile)
  updateShelf(startLeft, startTop)

  var currentLandSize = 1
  while (currentLandSize < landArea) {
    // print('expanding land')
    ++currentLandSize
    final perimeterIndexes = shelf.keys
    final tile = data.terrains[int.parse(perimeterIndexes.random)]
    updateShelf(tile.left, tile.top)
    tile.spriteIndex = _kSpriteLand
    addTile2Zone(landZone.index, tile)
  }

  // 生成地图上的不同地域
  // 根据相邻的格子的地域，分配地域索引
  fun updateZone(tile, [spriteIndex, unzonedNeighbors]) {
    assert(tile.zoneIndex == null)
    var willCreateZone = true
    if (spriteIndex != null) {
      willCreateZone = false
    } else {
      spriteIndex = tile.spriteIndex
    }
    unzonedNeighbors ??= {}
    // print('processing: ${tile.left},${tile.top}, spriteIndex: ${tile.spriteIndex}')
    tile.zoneIndex = -1 // mark this tile is being processed, will skip it when process others
    final neighbors = getMapTileNeighbors(data, tile.left, tile.top)
    var foundAdjacentZone = false
    for (final neighbor in neighbors) {
      // skip tiles that has diffrent spriteIndex and those still being processed
      if (spriteIndex != neighbor.spriteIndex) continue
      if (neighbor.zoneIndex == null) {
        updateZone(neighbor, spriteIndex, unzonedNeighbors)
      }
      if (neighbor.zoneIndex == -1) {
        unzonedNeighbors[neighbor.index] = neighbor
        continue
      }
      addTile2Zone(neighbor.zoneIndex, tile)
      foundAdjacentZone = true
      // print('Found neighbor: ${neighbor.left},${neighbor.top}, zoneIndex: ${neighbor.zoneIndex}')
      break
    }
    if (!foundAdjacentZone && willCreateZone) {
      var category = tile.spriteIndex == _kSpriteLand ? _kZoneContinent : _kZoneWater
      final zone = newZone(category: category)
      // print('Created zone! left: ${tile.left}, top: ${tile.top} spriteIndex: ${tile.spriteIndex}, zoneIndex: ${zone.index}')
      addTile2Zone(zone.index, tile)
      // print('processing previoused stored unzoned tiles: ${unzonedNeighbors}')
      for (final unzonedTile of unzonedNeighbors) {
        if (unzonedTile.zoneIndex == -1) {
          addTile2Zone(zone.index, unzonedTile)
        }
      }
    }
  }

  var unzonedTile

  while (
    unzonedTile = data.terrains.firstWhere((tile) {
        tile.zoneIndex == null
      }, orElse: () {})
  ) {
    // print('updating unzoned tile')
    updateZone(unzonedTile)
  }

  for (final zone in data.zones) {
    if (zone.name) {
      continue
    }
    late names
    late category
    if (zone.category == _kZoneWater) {
      category = zone.count < _kMinZoneSizeForSea ? _kZoneLake : _kZoneWater
    } else {
      category = zone.category
    }
    names = getZone(1, category: category)
    zone.name = names.first.name
  }

  // 根据 tile 的所在位置的类型，获取据点类型
  fun getLocationCategory(tile) {
    if (tile.spriteIndex == _kSpriteLand) {
      final neighbors = getMapTileNeighbors(data, tile.left, tile.top)
      for (final neighbor in neighbors) {
        if (neighbor.spriteIndex == _kSpriteWater) {
          return 'shore'
        }
      }
      return 'city'
    }
    else {
      return 'island'
    }
  }

  final locations = []

  fun find2NearestLocation(origin, {restrict2Zone: bool = true}) {
    assert(locations.length > 0)
    var nearest
    var nearestDistance
    var secondNearest
    var secondNearestDistance
    for (final location in locations) {
      if (location.index == origin.index) {
        continue
      } else {
        final distance = getTileDistance(origin, location)
        if (!restrict2Zone || location.zoneIndex == origin.zoneIndex) {
          if (!location.destinations || !location.destinations[origin.index]) {
            if (nearestDistance == null || distance < nearestDistance) {
              nearestDistance = distance
              nearest = location
            } else if (secondNearestDistance == null || distance < secondNearestDistance) {
              secondNearestDistance = distance
              secondNearest = location
            } else {
              continue
            }
          }
        }
      }
    }
    return { nearest, secondNearest }
  }

  // 生成据点
  for (final zone in data.zones) {
    // print('processing zone: ${zone.name} count: ${zone.count}')
    final locationNumber = zone.count ~/ _kMinZoneSizeForLocation
    var generatedIndexes = []
    while (generatedIndexes.length < locationNumber) {
      // print('generating location')
      var index
      do {
        // print('generating location index')
        index = zone.tiles.random
      } while (generatedIndexes.contains(index))
      generatedIndexes.add(index)
      final tile = data.terrains[index]
      final category = getLocationCategory(tile)
      final names = getLocation(1, category: category)
      final name = names.first.name
      locations.add({
        ...Tile(tile.left, tile.top),
        index: tilePos2Index(tile.left, tile.top, data.width),
        zoneIndex: tile.zoneIndex,
        zoneCategory: tile.zoneCategory,
        id: 'location_entity_${name}',
        name,
        shape: tileShape,
        srcWidth: tileSpriteSrcWidth,
        srcHeight: tileSpriteSrcHeight,
        gridWidth,
        gridHeight,
        spriteIndex: _kSpriteCity,
        offsetX: tileOffsetX,
        offsetY: tileOffsetY,
      })
    }
  }

  for (final location in locations) {
    data.entities['${location.left},${location.top}'] = location
    // 确保陆地上的每个城市至少可以链接到另外两个城市
    if (location.zoneCategory == _kZoneContinent) {
      final tiles = find2NearestLocation(location, restrict2Zone: true)
      if (tiles.nearest) {
        final route = calculateRoute(data, location, tiles.nearest)
        if (route) {
          // routes.add(route)
          for (final index in route) {
            final terrain = data.terrains[index]
            terrain.isRoute = true
          }
        }
      }
      if (tiles.secondNearest) {
        final route = calculateRoute(data, location, tiles.secondNearest)
        if (route) {
          // routes.add(route)
          for (final index in route) {
            final terrain = data.terrains[index]
            terrain.isRoute = true
          }
        }
      }
    }
  }

  // 将大陆上没有道路的方格，随机填充为平原、森林、山地
  for (final index in landZone.tiles) {
    final terrain = data.terrains[index]
    if (!terrain.isRoute) {
      final r = Math.random()
      if (r < _kMountainThreshold) {
        terrain.spriteIndex = _kSpriteMountain
      } else if (r < _kForestThreshold) {
        terrain.spriteIndex = _kSpriteForest
      }
    }
  }

  // 将大陆和海洋接触的地方填充为大陆架
  for (final index in shelf.keys) {
    final tile = data.terrains[int.parse(index)]
    tile.spriteIndex = _kSpriteShelf
  }
  
  game.world = data
  final future = MapComponent.fromJson(dart, data.toJson())
  future.then((value) {
    game.world.component = value
  })
  return future
}