import 'constants.ht'
import 'data/shared/common.json' as commonNames
import 'data/shared/strange.json' as strangeNames
import 'data/shared/color.json' as colorPrefix
import 'data/shared/spirit.json' as spiritPrefix
import 'data/name/family.json' as family
import 'data/name/female.json' as female
import 'data/name/male.json' as male
import 'data/name/middle.json' as middle
import 'data/dao/dao.json' as dao
import 'data/dao/title_male.json' as daoTitleMale
import 'data/dao/title_female.json' as daoTitleFemale
import 'data/skill/skill.json' as skill
import 'data/skill/prefix.json' as skillPrefix
import 'data/skill/numfix.json' as skillNumfix
import 'data/book/prefix.json' as bookPrefix
import 'data/book/book.json' as book
import 'data/book/postfix.json' as bookPostfix
import 'data/spell/spell.json' as spell
import 'data/talisman/talisman.json' as talisman
import 'data/talisman/material.json' as talismanMaterial
import 'data/talisman/postfix.json' as talismanPostfix
import 'data/organization/clan.json' as clan
import 'data/organization/nation.json' as nation
import 'data/place/place.json' as place
import 'data/place/prefix.json' as placePrefix
import 'data/place/postfix.json' as placePostfix
import 'data/place/location.json' as location
import 'data/place/zone.json' as zone
import 'data/material/material.json' as material
import 'data/material/postfix.json' as materialPostfix
import 'data/creature/creature.json' as creature
import 'data/creature/prefix.json' as creaturePrefix
import 'data/creature/strange.json' as strangeCreature
import 'data/alchemy/alchemy.json' as alchemy

export {
  kSex,
  kRarity,
  kCreatureCategory,
  kClanCategory,
  kLocationCategory,
  kZoneCategory,
} from 'constants.ht'

export {
  zone,
}

export {
  getName,
  getDao,
  getSkill,
  getBook,
  getSpell,
  getCreature,
  getMaterial,
  getAlchemy,
  getTalisman,
  getClan,
  getNation,
  getLocationKind,
  getLocation,
  getZoneKind,
  getZone,
}

final common = [
  ...commonNames.dao,
  ...commonNames.element,
  ...commonNames.creature,
  ...commonNames.object,
  ...commonNames.color,
  ...commonNames.place,
  ...commonNames.adj,
  ...commonNames.number,
  ...commonNames.gesture,
  ...commonNames.action,
];

final locations = [
  ...location.shore,
  ...location.mountain,
  ...location.island,
  ...location.city,
]

final kLocationCategories = kLocationCategory.keys

final kClanCategories = kClanCategory.keys

final kZoneCategories = kZoneCategory.keys

fun getRarity(max) {
  var rarity
  final value = Math.random() * (max || 1.0)
  if (value < kRarity.exotic.probability) {
    rarity = 'exotic'
  } else if (value < kRarity.mythic.probability) {
    rarity = 'mythic'
  } else if (value < kRarity.legendary.probability) {
    rarity = 'legendary'
  } else if (value < kRarity.epic.probability) {
    rarity = 'epic'
  } else if (value < kRarity.rare.probability) {
    rarity = 'rare'
  } else if (value < kRarity.uncommon.probability) {
    rarity = 'uncommon'
  } else {
    rarity = 'common'
  }
  return { rarity, value }
}

const _kParenthesisLeft = '（'
const _kParenthesisRight = '）'

const _kBookLeft = "《";
const _kBookRight = "》";

const _kLinkWord = '之'

fun getName(number: int, {isFemale, style, familyName, middleCharacter}) {
  final names = []
  for (var i in range(number)) {
    var theFamilyName
    if (!familyName) {
      theFamilyName = family.random
    } else {
      theFamilyName = familyName
    }
    final f = isFemale ?? Math.randomInt(2) == 0
    final namesOfASex = f ? female : male
    final r = Math.random()
    var s
    if (style == null || style == 'random') {
      s = r < 0.33333333 ? 'single' : r < 0.66666666 ? 'double' : 'combine'
    } else {
      s = style
    }
    var name = ''
    if (s == 'single') {
      if (middleCharacter) {
        name = middleCharacter
      } else {
        name = namesOfASex.random
      }
    } else if (s == 'double') {
      final theMiddleCharacter
      if (middleCharacter) {
        theMiddleCharacter = middleCharacter
      } else {
        theMiddleCharacter = namesOfASex.random
      }
      final theLastCharacter = namesOfASex.random
      name = theMiddleCharacter + theLastCharacter
    } else {
      final theMiddleCharacter
      if (middleCharacter) {
        theMiddleCharacter = middleCharacter
      } else {
        theMiddleCharacter = middle.random
      }
      final theLastCharacter = namesOfASex.random
      name = theMiddleCharacter + theLastCharacter
    }
    names.add({ name: theFamilyName + name, isFemale: f })
  }
  return names
}

fun getDao(number: int, {isFemale, title, firstCharacter}) {
  final names = []
  for (var i in range(number)) {
    var theFirstCharacter
    if (firstCharacter) {
      theFirstCharacter = firstCharacter
    } else {
      theFirstCharacter = dao.random
    }
    final name = theFirstCharacter + dao.random
    final titleGroup =
      isFemale ?? Math.randomInt(2) == 0
        ? daoTitleFemale
        : daoTitleMale
    var t = ''
    var rarity = 'common'
    if (!title) {
      rarity = getRarity().rarity
      if (rarity == 'exotic') {
        t =
          titleGroup.exotic.random
      } else if (rarity == 'mythic') {
        t =
          titleGroup.mythic.random
      } else if (rarity == 'legendary') {
        t =
          titleGroup.legendary.random
      } else if (rarity == 'epic') {
        t = titleGroup.epic.random
      } else if (rarity == 'rare') {
        t = titleGroup.rare.random
      } else if (rarity == 'uncommon') {
        t =
          titleGroup.uncommon.random
      }
    }
    names.add({ name: name + t, rarity })
  }
  return names
}

const _kNumberBeginSupplement = '路'
const _kNumberEndSupplement = '式'

fun _getSkillName({length, kind, prefix, numfix}) {
  var l = length || 1
  var rarity = 'common'
  if (!length) {
    final r = getRarity()
    if (r.value < kRarity.rare.probability) {
      l = 3
    } else if (r.value < kRarity.uncommon.probability) {
      l = 2
    }
    rarity = r.rarity
  }
  var name = ''
  for (var i in range(l)) {
    name += common.random
  }
  var pre = prefix ?? ''
  var n = numfix ?? ''
  final k = kind ?? skill.random
  if (!prefix && Math.random() < kRarity.epic.probability) {
    pre = skillPrefix.random
  }
  if (!numfix && Math.random() < kRarity.epic.probability) {
    n = skillNumfix.random
  }
  if (Math.random() < 0.5) {
    name = (n != '' ? n + _kNumberBeginSupplement : '') + pre + name + k
  } else {
    if (k.length > 1) {
      name = pre + name + k + (n != '' ? n + _kNumberEndSupplement : '')
    } else {
      name = pre + name + n + k
    }
  }
  return { name, rarity }
}

fun getSkill(number: int, {length, kind, prefix, numfix}) {
  final names = []
  for (var i in range(number)) {
    final name = _getSkillName(length: length, kind: kind, prefix: prefix, numfix: numfix)
    names.add(name)
  }
  return names
}

fun getBook(number: int, {length, prefix, mainkind, postkind, postfix}) {
  final names = []
  for (var i in range(number)) {
    final skillname = _getSkillName(length: length, kind: mainkind)
    var rarity = skillname.rarity
    var pre = prefix ?? ''
    var pk = postkind || '';
    var post = postfix ?? ''
    if (!prefix) {
      if (skillname.rarity == 'exotic') {
        pre =
          bookPrefix.exotic.random
      } else if (skillname.rarity == 'mythic') {
        pre =
          bookPrefix.mythic.random
      } else if (skillname.rarity == 'legendary') {
        pre =
          bookPrefix.legendary.random
      } else if (skillname.rarity == 'epic') {
        pre = bookPrefix.epic.random
      }
    }
    if (pre && !postkind) {
      pk = book.random
    }
    final r1 = Math.random()
    final r2 = Math.random()
    if (r1 < kRarity.rare.probability && r2 < kRarity.rare.probability) {
      post = _kParenthesisLeft + bookPostfix.rare.random + _kParenthesisRight
    } else if (r1 < kRarity.uncommon.probability && r2 < kRarity.uncommon.probability) {
      post = _kParenthesisLeft + bookPostfix.uncommon.random + _kParenthesisRight
    }
    names.add({
      name: _kBookLeft + skillname.name + pre + pk + post + _kBookRight,
      rarity: rarity,
    })
  }
  return names
}

final commonCreatureNames = [
  ...commonNames.dao,
  ...commonNames.element,
  ...commonNames.thing,
  ...commonNames.color,
  ...commonNames.number,
  ...commonNames.action,
]

fun getSpell(number: int) {
  final names = []
  for (var i in range(number)) {
    final name = common.random + spell.random
    names.add(name)
  }
  return names
}

fun getCreature(number: int, {category, rarity}) {
  final names = []
  for (var i in range(number)) {
    var name = ''
    final pre = commonCreatureNames.random
    final c = colorPrefix.random
    final s = creaturePrefix.random
    final cat = category ?? kCreatureCategory.keys.random
    final k = creature[cat].random
    final r = rarity ?? getRarity(kRarity.uncommon.probability).rarity
    if (r == 'exotic') {
      name = strangeCreature.random
    } else if (r == 'mythic') {
      name = pre + c + s + k
    } else if (r == 'legendary') {
      name = pre + s + k
    } else if (r == 'epic') {
      name = pre + c + k
    } else if (r == 'rare') {
      name = pre + k
    } else if (r == 'uncommon') {
      name = c + s + k
    } else if (r == 'common') {
      name = c + k
    }
    names.add({ name, rarity: r, category: cat })
  }
  return names
}

const _kAge1 = '百年'
const _kAge10 = '千年'
const _kAge100 = '万年'

fun getMaterial(number: int, {kind, rarity, postfix}) {
  final names = []
  for (var i in range(number)) {
    var name = ''
    var age = ''
    final pre = common.random
    final c = colorPrefix.random
    final s = spiritPrefix.random
    var k = kind
    var post = postfix ?? ''
    final r = rarity ?? getRarity(kRarity.uncommon.probability).rarity
    if (r == 'exotic') {
      k ??= [
        ...material.exotic,
        ...material.mythic,
        ...material.legendary,
        ...material.epic,
        ...material.rare,
        ...material.uncommon,
        ...material.common,
      ].random
      age = _kAge100
      name = age + pre + c + s + k
    } else if (r == 'mythic') {
      k ??= [
        ...material.mythic,
        ...material.legendary,
        ...material.epic,
        ...material.rare,
        ...material.uncommon,
        ...material.common,
      ].random
      age = _kAge10
      name = age + pre + c + s + k
    } else if (r == 'legendary') {
      k ??= [
        ...material.legendary,
        ...material.epic,
        ...material.rare,
        ...material.uncommon,
        ...material.common,
      ].random
      age = _kAge1
      name = age + pre + c + s + k
    } else if (r == 'epic') {
      k ??= [
        ...material.epic,
        ...material.rare,
        ...material.uncommon,
        ...material.common,
      ].random
      name = pre + c + s + k
    } else if (r == 'rare') {
      k ??= [...material.rare, ...material.uncommon, ...material.common].random
      name = pre + s + k
    } else if (r == 'uncommon') {
      k ??= [...material.uncommon, ...material.common].random
      name = c + s + k
    } else if (r == 'common') {
      k ??= material.common.random
      name = c + k
    }
    if (!postfix) {
      final r1 = Math.random()
      final r2 = Math.random()
      if (r1 < kRarity.rare.probability && r2 < kRarity.rare.probability) {
        post = _kParenthesisLeft + materialPostfix.broken.random + _kParenthesisRight
      } else if (r1 < kRarity.uncommon.probability && r2 < kRarity.uncommon.probability) {
        post = _kParenthesisLeft + materialPostfix.handmade.random + _kParenthesisRight
      }
    } else {
      post = _kParenthesisLeft + post + _kParenthesisRight
    }
    names.add({ name: name + post, rarity: r })
  }
  return names
}

final commonAlchemyNames = [
  ...commonNames.dao,
  ...commonNames.element,
  ...commonNames.color,
  ...commonNames.number,
  ...commonNames.action,
]

fun getAlchemy(number: int, {kind: str}) {
  final names = []
  for (var i in range(number)) {
    var rarity = 'common'
    final pre = commonAlchemyNames.random
    var s = ''
    final r = getRarity()
    if (r.value < kRarity.rare.probability) {
      s = spiritPrefix.random
    }
    rarity = r.rarity
    var k = kind ?? alchemy.random
    names.add({ name: pre + s + k, rarity })
  }
  return names
}

fun getTalisman(number: int, {kind, rarity}) {
  final names = []
  for (var i in range(number)) {
    var name = ''
    final prefix = common.random
    final c = colorPrefix.random
    final m =
      talismanMaterial.random
    final s = spiritPrefix.random
    final k = kind
    final r = rarity ?? getRarity(kRarity.uncommon.probability).rarity
    if (r == 'exotic') {
      k ??= [
        ...talisman.exotic,
        ...talisman.mythic,
        ...talisman.legendary,
        ...talisman.epic,
        ...talisman.rare,
        ...talisman.uncommon,
        ...talisman.common,
      ].random
      name = prefix + s + k
    } else if (r == 'mythic') {
      k ??= [
        ...talisman.mythic,
        ...talisman.legendary,
        ...talisman.epic,
        ...talisman.rare,
        ...talisman.uncommon,
        ...talisman.common,
      ].random
      name = prefix + s + k
    } else if (r == 'legendary') {
      k ??= [
        ...talisman.legendary,
        ...talisman.epic,
        ...talisman.rare,
        ...talisman.uncommon,
        ...talisman.common,
      ].random
      name = prefix + c + m + k
    } else if (r == 'epic') {
      k ??= [
        ...talisman.epic,
        ...talisman.rare,
        ...talisman.uncommon,
        ...talisman.common,
      ].random
      name = prefix + m + k
    } else if (r == 'rare') {
      k ??= [...talisman.rare, ...talisman.uncommon, ...talisman.common].random
      name = prefix + k
    } else if (r == 'uncommon') {
      k ??= [...talisman.uncommon, ...talisman.common].random
      name = c + m + k
    } else if (r == 'common') {
      k ??= talisman.common.random
      name = m + k
    }
    var post = ''
    final r1 = Math.random()
    final r2 = Math.random()
    if (r1 < kRarity.rare.probability && r2 < kRarity.rare.probability) {
      post =
        _kParenthesisLeft +
        talismanPostfix.broken.random +
        _kParenthesisRight
    } else if (r1 < kRarity.uncommon.probability && r2 < kRarity.uncommon.probability) {
      post = _kParenthesisLeft + talismanPostfix.handmade.random + _kParenthesisRight
    }
    names.add({ name: name + post, rarity: r })
  }
  return names
}

fun getClanKind([category: str]) {
  if (category != null) {
    assert(kClanCategories.contains(category))
  } else {
    category = kClanCategories.random
  }
  return clan[category].random
}

fun getClan(number: int, {kind: str, category: str}) {
  final names = []
  for (var i in range(number)) {
    final name = common.random
    final c = kClanCategories.random
    final k = kind ?? getClanKind(c);
    names.add({ name: name + k, category: c })
  }
  return names
}

const _kContry = '国'

fun getNation(number: int, {kind}) {
  final names = []
  for (var i in range(number)) {
    var name = ''
    var k = kind ?? ''
    var rarity = 'common'
    final r = Math.random()
    if (r < kRarity.rare.probability) {
      name = strangeNames.random
      rarity = 'rare'
      if (!kind) {
        if (name.length == 1) {
          k = _kContry
        } else {
          k = nation.random
        }
      }
    } else if (r < kRarity.uncommon.probability) {
      name = common.random
      rarity = 'uncommon'
      if (!kind) {
        if (name.length == 1) {
          k = _kContry
        } else {
          k = nation.random
        }
      }
    } else {
      var prefix = ''
      if (Math.random() < kRarity.rare.probability) {
        prefix = placePrefix.random
      }
      name = prefix + place.random
      if (!kind) {
        k = _kContry
      }
    }
    names.add({ name: name + k, rarity })
  }
  return names
}

fun getLocationKind([category: str]) {
  if (category != null) {
    assert(kLocationCategories.contains(category))
  } else {
    category = kLocationCategories.random
  }
  return location[category].random
}

fun getLocation(number: int, {kind: str, category: str}) {
  final names = []
  for (var i in range(number)) {
    var name = ''
    var c = category ?? kLocationCategories.random
    var k = kind ?? getLocationKind(c);
    var rarity = 'common'
    final r = Math.random()
    if (r < kRarity.rare.probability) {
      name = strangeNames.random
      rarity = 'rare'
    } else if (r < kRarity.uncommon.probability) {
      name = common.random
      rarity = 'uncommon'
    } else {
      var postfix = ''
      if (Math.random() < kRarity.uncommon.probability) {
        postfix = placePostfix.random
      }
      name = place.random + postfix
    }
    names.add({ name: name + k, category: c, rarity })
  }
  return names
}

fun getZoneKind([category: str]) {
  if (category != null) {
    assert(kZoneCategories.contains(category))
  } else {
    category = kZoneCategories.random
  }
  return zone[category].random
}

fun getZone(number: int, {kind: str, category: str}) {
  final names = []
  for (var i in range(number)) {
    var name = ''
    final c = category ?? kZoneCategories.random
    final k = kind ?? getZoneKind(c);
    var rarity = 'common'
    final r = Math.random()
    if (r < kRarity.rare.probability) {
      name = strangeNames.random
      rarity = 'rare'
    } else if (r < kRarity.uncommon.probability) {
      name = common.random
      rarity = 'uncommon'
    } else {
      var prefix = ''
      if (Math.random() < kRarity.rare.probability) {
        prefix = placePrefix.random
      }
      name = prefix + place.random
      if (name.length == 1) {
        if (k.length > 1) {
          name += _kLinkWord;
        } else {
          if (Math.random() < kRarity.rare.probability) {
            name += _kLinkWord;
          }
        }
      }
    }
    names.add({ name: name + k, category: c, rarity })
  }
  return names
}
