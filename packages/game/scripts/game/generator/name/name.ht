import 'shared/common.json' as commonNames
import 'shared/strange.json' as strangeNames
import 'shared/color.json' as colorPrefix
import 'shared/spirit.json' as spiritPrefix
import 'character/family.json' as family
import 'character/female.json' as female
import 'character/male.json' as male
import 'character/middle.json' as middle
import 'skill/skill.json' as skill
import 'skill/extra.json' as skillExtra
import 'skill/numfix.json' as skillNumfix
import 'book/prefix.json' as bookPrefix
import 'book/book.json' as book
import 'book/postfix.json' as bookPostfix
import 'spell/spell.json' as spell
import 'talisman/talisman.json' as talisman
import 'talisman/material.json' as talismanMaterial
import 'talisman/postfix.json' as talismanPostfix
import 'organization/organization.json' as organization
import 'place/place.json' as place
import 'place/prefix.json' as placePrefix
import 'place/postfix.json' as placePostfix
import 'place/location.json' as location
import 'place/zone.json' as zone
import 'material/material.json' as material
import 'material/postfix.json' as materialPostfix
import 'creature/creature.json' as creature
import 'creature/prefix.json' as creaturePrefix
import 'creature/strange.json' as strangeCreature
import 'alchemy/alchemy.json' as alchemy
import '../../entity/constants.ht'

export {
  getCharacter,
  getSkill,
  getBook,
  getSpell,
  getCreature,
  getMaterial,
  getAlchemy,
  getTalisman,
  getOrganization,
  getNation,
  getLocationKind,
  getLocation,
  getZoneKind,
  getZone,
}

final common = [
  ...commonNames.dao,
  ...commonNames.budda,
  ...commonNames.emotion,
  ...commonNames.creature,
  ...commonNames.object,
  ...commonNames.color,
  ...commonNames.place,
  ...commonNames.number,
  ...commonNames.action,
  ...commonNames.target,
];

final kCreatureCategory = creature.keys

final kLocationCategories = location.keys

final kOrganizationCategories = organization.keys

final kZoneCategories = zone.keys

const _kLinkWord = '之'

fun getCharacter(number: int, {isFemale, familyName, middleCharacter}) {
  final names = []
  for (var i in range(number)) {
    var theFamilyName
    if (!familyName) {
      theFamilyName = family.random
    } else {
      theFamilyName = familyName
    }
    final f = isFemale ?? Math.randomBool()
    final namesOfASex = f ? female : male
    final r = Math.random()
    var name = ''
    // 单字的名字
    if (r < 0.33333333) {
      if (middleCharacter) {
        name = middleCharacter
      } else {
        name = namesOfASex.random
      }
    }
    // 两个实字
    else if (r < 0.66666666) {
      final theMiddleCharacter
      if (middleCharacter) {
        theMiddleCharacter = middleCharacter
      } else {
        theMiddleCharacter = namesOfASex.random
      }
      final theLastCharacter = namesOfASex.random
      name = theMiddleCharacter + theLastCharacter
    }
    // 中间是虚字
    else {
      final theMiddleCharacter
      if (middleCharacter) {
        theMiddleCharacter = middleCharacter
      } else {
        theMiddleCharacter = middle.random
      }
      final theLastCharacter = namesOfASex.random
      name = theMiddleCharacter + theLastCharacter
    }
    names.add({ familyName: theFamilyName, shortName: name, name: theFamilyName + name, isFemale: f })
  }
  return names
}

const _kNumberBeginSupplement = '路'
const _kNumberEndSupplement = '式'

const _kBookLeft = "《";
const _kBookRight = "》";

fun _getSkillName({length, category, kind}) {
  var l = length ?? 1
  var rarity = 'common'
  if (!length) {
    final r = getRarity()
    if (r.value < kRarity.rare.value) {
      l = 3
    } else if (r.value < kRarity.uncommon.value) {
      l = 2
    }
    rarity = r.rarity
  }
  var name = ''
  for (var i in range(l)) {
    name += common.random
  }
  var e = ''
  var n = ''
  final c = category ?? skill.keys.random
  final k = kind ?? skill[c].random
  if (Math.random() < kRarity.epic.probability) {
    e = skillExtra.random
  }
  if (Math.random() < kRarity.epic.probability) {
    n = skillNumfix.random
  }
  if (Math.random() < 0.5) {
    name = (n != '' ? n + _kNumberBeginSupplement : '') + e + name + k
  } else {
    if (k.length > 1) {
      name = e + name + k + (n != '' ? n + _kNumberEndSupplement : '')
    } else {
      name = e + name + n + k
    }
  }
  return { name, category: c, rarity }
}

fun getSkill(number, {length, category, kind}) {
  var names = [];
  for (let i = 0; i < number; ++i) {
    var name = _getSkillName(
      length: length,
      category: category,
      kind: kind,
    );
    names.add(name);
  }
  return names;
}

fun getBook(number: int, {length, category, kind}) {
  final names = []
  for (var i in range(number)) {
    final c = category ?? skill.keys.random
    final skillname = _getSkillName(length: length, category: c, kind: kind)
    var rarity = skillname.rarity
    var pre = ''
    var post = ''
    if (skillname.rarity == 'exotic') {
      pre = bookPrefix.exotic.random
    } else if (skillname.rarity == 'mythic') {
      pre = bookPrefix.mythic.random
    } else if (skillname.rarity == 'legendary') {
      pre = bookPrefix.legendary.random
    } else if (skillname.rarity == 'epic') {
      pre = bookPrefix.epic.random
    }
    if (pre) {
      post = book.random
    }
    names.add({
      name: _kBookLeft + skillname.name + pre + post + _kBookRight,
      skillName: skillName.name
      category: c,
      rarity: rarity,
    })
  }
  return names
}

fun getSpell(number: int) {
  final names = []
  for (var i in range(number)) {
    final name = common.random + spell.random
    names.add(name)
  }
  return names
}

final commonCreatureNames = [
  ...commonNames.dao,
  ...commonNames.element,
  ...commonNames.thing,
  ...commonNames.color,
  ...commonNames.number,
  ...commonNames.action,
]

fun getCreature(number: int, {category, rarity}) {
  final names = []
  for (var i in range(number)) {
    var name = ''
    final pre = commonCreatureNames.random
    final cp = colorPrefix.random
    final s = creaturePrefix.random
    final c = category ?? kCreatureCategory.random
    final k = creature[c].random
    final r = rarity ?? getRarity().rarity
    if (r == 'exotic') {
      name = strangeCreature.random
    } else if (r == 'mythic') {
      name = pre + cp + s + k
    } else if (r == 'legendary') {
      name = pre + s + k
    } else if (r == 'epic') {
      name = pre + cp + k
    } else if (r == 'rare') {
      name = pre + k
    } else if (r == 'uncommon') {
      name = cp + s + k
    } else if (r == 'common') {
      name = cp + k
    }
    names.add({ name, rarity: r, category: c })
  }
  return names
}

fun getMaterial(number: int, {category, kind, rarity}) {
  final names = []
  for (var i in range(number)) {
    var name = ''
    final pre = common.random
    final cp = colorPrefix.random
    final s = spiritPrefix.random
    var c = category
    var k = kind
    if (!k) {
      if (c) {
        assert(material.keys.contains(c))
        k = material[c].random
      } else {
        c = material.keys.random
        k = material[c].random
      }
    }
    final r = rarity ?? getRarity().rarity
    if (r == 'exotic') {
      name = pre + cp + s + k
    } else if (r == 'mythic') {
      name = pre + cp + s + k
    } else if (r == 'legendary') {
      name = pre + s + k
    } else if (r == 'epic') {
      name = pre + s + k
    } else if (r == 'rare') {
      name = cp + s + k
    } else if (r == 'uncommon') {
      name = cp + s + k
    } else if (r == 'common') {
      name = cp + k
    }
    names.add({ name, category: c, rarity: r })
  }
  return names
}

final commonAlchemyNames = [
  ...commonNames.dao,
  ...commonNames.element,
  ...commonNames.color,
  ...commonNames.number,
  ...commonNames.action,
]

fun getAlchemy(number: int, {kind: str}) {
  final names = []
  for (var i in range(number)) {
    var rarity = 'common'
    final pre = commonAlchemyNames.random
    var s = ''
    final r = getRarity()
    if (r.value < kRarity.rare.value) {
      s = spiritPrefix.random
    }
    rarity = r.rarity
    var k = kind ?? alchemy.random
    names.add({ name: pre + s + k, rarity })
  }
  return names
}

fun getTalisman(number: int, {category, kind, rarity}) {
  final names = []
  for (var i in range(number)) {
    var name = ''
    final prefix = common.random
    final cp = colorPrefix.random
    final m = talismanMaterial.random
    final s = spiritPrefix.random
    final c = category
    final k = kind
    if (!k) {
      if (c) {
        assert(talisman.keys.contains(c))
        k = talisman[c].random
      } else {
        c = talisman.keys.random
        k = talisman[c].random
      }
    }
    final r = rarity ?? getRarity(kRarity.uncommon.probability).rarity
    if (r == 'exotic') {
      name = prefix + s + k
    } else if (r == 'mythic') {
      name = prefix + s + k
    } else if (r == 'legendary') {
      name = prefix + cp + m + k
    } else if (r == 'epic') {
      name = prefix + m + k
    } else if (r == 'rare') {
      name = prefix + k
    } else if (r == 'uncommon') {
      name = cp + m + k
    } else if (r == 'common') {
      name = m + k
    }
    // final r1 = Math.random()
    // final r2 = Math.random()
    // var condition
    // if (r1 < kRarity.rare.probability && r2 < kRarity.rare.probability) {
    //   condition = talismanPostfix.broken.random
    // } else if (r1 < kRarity.uncommon.probability && r2 < kRarity.uncommon.probability) {
    //   condition = talismanPostfix.handmade.random
    // }
    names.add({ name, category: c, kind: k, rarity: r })
  }
  return names
}

fun getOrganizationKind([category: str]) {
  if (category != null) {
    assert(kOrganizationCategories.contains(category))
  } else {
    category = kOrganizationCategories.random
  }
  return organization[category].random
}

fun getOrganization(number: int, {kind: str, category: str}) {
  final names = []
  for (var i in range(number)) {
    final name = common.random
    final c = category ?? kOrganizationCategories.random
    final k = kind ?? getOrganizationKind(c);
    names.add({ name: name + k, category: c })
  }
  return names
}

const _kNation = '国'

fun getNation(number: int) {
  final names = []
  for (var i in range(number)) {
    var name = ''
    var rarity = 'common'
    final r = Math.random()
    if (r < kRarity.rare.probability) {
      name = strangeNames.random
      rarity = 'rare'
    } else if (r < kRarity.uncommon.probability) {
      name = common.random
      rarity = 'uncommon'
    } else {
      var prefix = ''
      if (Math.random() < kRarity.rare.probability) {
        prefix = placePrefix.random
      }
      name = prefix + place.random
    }
    names.add({ name: name + _kNation, rarity })
  }
  return names
}

fun getLocationKind([category: str]) {
  if (category != null) {
    assert(kLocationCategories.contains(category))
  } else {
    category = kLocationCategories.random
  }
  return location[category].random
}

fun getLocation(number: int, {kind: str, category: str}) {
  final names = []
  for (var i in range(number)) {
    var name = ''
    var c = category ?? kLocationCategories.random
    var k = kind ?? getLocationKind(c);
    var rarity = 'common'
    final r = Math.random()
    if (r < kRarity.rare.probability) {
      name = strangeNames.random
      rarity = 'rare'
    } else if (r < kRarity.uncommon.probability) {
      name = common.random
      rarity = 'uncommon'
    } else {
      var postfix = ''
      if (Math.random() < kRarity.uncommon.probability) {
        postfix = placePostfix.random
      }
      name = place.random + postfix
    }
    names.add({ name: name + k, category: c, rarity })
  }
  return names
}

fun getZoneKind([category: str]) {
  if (category != null) {
    assert(kZoneCategories.contains(category))
  } else {
    category = kZoneCategories.random
  }
  return zone[category].random
}

fun getZone(number: int, {kind: str, category: str}) {
  final names = []
  for (var i in range(number)) {
    var name = ''
    final c = category ?? kZoneCategories.random
    final k = kind ?? getZoneKind(c);
    var rarity = 'common'
    final r = Math.random()
    if (r < kRarity.rare.probability) {
      name = strangeNames.random
      rarity = 'rare'
    } else if (r < kRarity.uncommon.probability) {
      name = common.random
      rarity = 'uncommon'
    } else {
      var prefix = ''
      if (Math.random() < kRarity.rare.probability) {
        prefix = placePrefix.random
      }
      name = prefix + place.random
      if (name.length == 1) {
        if (k.length > 1) {
          name += _kLinkWord;
        } else {
          if (Math.random() < kRarity.rare.probability) {
            name += _kLinkWord;
          }
        }
      }
    }
    names.add({ name: name + k, category: c, rarity })
  }
  return names
}
