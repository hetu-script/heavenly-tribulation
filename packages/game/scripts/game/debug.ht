import 'game.ht'
import 'entity/character/character.ht'
import 'entity/item/item.ht'
import 'duel.ht'
import 'maze/maze.ht'
import 'dialog.ht'
import 'tile/hexagonal_tile.ht'
import 'entity/skill/skill.ht'

namespace debug {
  external fun setFogOfWar(value: bool)

  fun terrain {
    final position = getHeroPosition()
    final terrainIndex = tilePos2Index(position.left, position.top, currentWorld.width)
    final terrain
    final zone
    final entity
    if (currentMaze) {
      final map = currentMaze.levels[currentMaze.currentLevelIndex]
      terrain = map.terrains[terrainIndex]
      if (terrain.zoneIndex) {
        zone = map.zones[terrain.zoneIndex]
      }
      if (terrain.entityId) {
        entity = currentMaze.entities[terrain.entityId]
      }
    } else {
      terrain = currentWorld.terrains[terrainIndex]
      if (terrain.zoneIndex) {
        zone = currentWorld.zones[terrain.zoneIndex]
      }
      if (terrain.entityId) {
        entity = currentWorld.entities[terrain.entityId]
      }
    }
    engine.info('terrain:', terrain)
    if (zone) {
      engine.info('zone:', zone)
    }
    if (entity) {
      engine.info('entity:', entity)
    }
  }

  fun location {
    if (currentWorld == null) return
    final position = getHeroPosition()
    final terrainIndex = tilePos2Index(position.left, position.top, currentWorld.width)
    final terrain = currentWorld.terrains[terrainIndex]
    if (terrain.nationId) {
      final nation = game.locations[terrain.nationId]
      engine.info('nation:', nation)
    }
    if (terrain.locationId) {
      final location = game.locations[terrain.locationId]
      engine.info('location:', location)
    }
  }

  fun showAllCaption {
    for (final tile in currentWorld.terrains) {
      if (tile.locationId) {
        final location = game.locations[tile.locationId]
        setWorldMapCaption(location.tilePosition.left, location.tilePosition.top, location.name)
      }
    }
  }
}

// 测试战斗：随机生成两个准备好战斗的角色
fun testDuel {
  setRandomSeed(1002)
  final hero = Character(isMajorCharacter: false, armed: false)
  equip(hero, Weapon(kind: 'sword'))
  equip(hero, WeaponArts(kind: 'sword', level: 1))
  // equip(hero, Shield())
  // final companion = VillageWarrior()
  // equip(companion, Weapon())
  // equip(hero, companion)

  // final enemy = Character(isMajorCharacter: false)
  // final enemy = Bandit(kind: 'boss')
  // equip(enemy, Kungfu())
  // equip(enemy, Weapon())

  final enemy = Beast()
  showDuel(hero, enemy, type: kDuelTypePractice)
}

fun testMerchant {
  setRandomSeed(1003)
  resetGame()
  final hero = Character()
  acquireMoney(hero, 100)
  setHeroId(hero.id)
  final merchant = Character()
  acquireMoney(merchant, 500)
  acquire(merchant, Consumable.medicine(), count: 20)
  acquire(merchant, Consumable.beverage(), count: 20)
  showMerchant(merchant)
}

fun testMazeMountain {
  setRandomSeed(1001)
  resetGame()
  // 先创建副本再创建英雄，这样会直接用localHistory替换掉hostory
  final maze = MountainMaze(
    name: '测试副本',
  )
  final hero = Character(armed: false)
  acquireMoney(hero, 200)
  equip(hero, Weapon(kind: 'sword'))
  learn(hero, WeaponArts(kind: 'sword', level: 1))
  // equip(hero, Weapon())
  equip(hero, Shield())
  acquire(hero, Consumable.medicine(), count: 5)
  acquire(hero, Consumable.beverage(), count: 5)
  final companion = VillageWarrior()
  equip(companion, Weapon())
  equip(hero, companion)
  setHeroId(hero.id)
  enterMaze(maze)
  return maze
}

fun testMazeCultivationRecruit {
  resetGame()
  // 先创建副本再创建英雄，这样会直接用localHistory替换掉hostory
  final maze = CultivationRecruitMaze(
    name: '测试副本',
    organizationName: '天玑堂',
  )
  final hero = Character()
  equip(hero, Kungfu())
  equip(hero, Weapon())
  equip(hero, Shield())
  acquire(hero, Consumable.medicine(), count: 5)
  acquire(hero, Consumable.beverage(), count: 5)
  setHeroId(hero.id)
  enterMaze(maze)
  return maze
}
