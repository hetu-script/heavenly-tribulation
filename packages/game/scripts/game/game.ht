external class SamsaraEngine {
  fun updateLocales(data: Map)
  fun updateZoneColors(data: Map)
  fun updateNationColors(data: Map)
  fun onIncident(data)
  fun debug(content: str)
  fun info(content: str)
  fun warning(content: str)
  fun error(content: str)
}

var buildContext

fun build(ctx) {
  buildContext = ctx
}

var engine: SamsaraEngine

var locales = {
  zh: {},
  en: {}
}

var dialogs = {}

var game = {
  timestamp: 0,
  mods: {},
  bindings: {},
  
  nations: {},
  characters: {},
  locations: {},
  organizations: {},
  mazes: {},

  // 指玩家对某个其他角色进行过的动作，限定每个月一次
  playerMonthly: {
    talked: [],
    gifted: [],
    practiced: [],
    consulted: [],
    requested: [],
    insulted: [],
    stolen: [],
    peeped: [],
  },

  // 指某个NPC进行过的动作，限定每个月一次
  characterMonthly: {
    talked: [],
    gifted: [],
    practiced: [],
    consulted: [],
    requested: [],
    insulted: [],
    stolen: [],
    peeped: [],
  },

  // 指某个组织进行过的动作，限定每个月一次
  organizationMonthly: {
    recruited: [],
  }

  // 指某个组织进行过的动作，限定每个月一次
  organizationYearly: {
    
  }
}

var history = []

var config = {
  debug: true,
}

fun getGameJsonData() {
  return game.toJson()
}

fun getHistory() {
  return history
}

fun getHistoryJsonData() {
  return jsonify(history)
}

fun loadGameFromJsonData(worldData, historyData) {
  game = prototype.fromJson(worldData)
  updateWorldMapZoneColors()
  updateWorldMapNationColors()

  history = []
  for (final data in historyData) {
    history.add(
      prototype.fromJson(data)
    )
  }
}

fun getSavePath {
  return game.savePath
}

fun setSavePath(name: str) {
  game.savePath = name
}

fun onGameEvent(id: str, [arg]) {
  for (final entity of game.entities) {
    final handler = entity[id];
    if (handler is function) {
      if (entity.type == 'module') {
        final mod = getModInfo(entity.id)
        final func = handler.bind(mod)
        func(arg)
      } else {
        handler(arg)
      }
    }
  }
}

fun getTimestamp() {
  return game.timestamp
}

fun nextTick() {
  ++game.timestamp

  onGameEvent('onUpdate')
}
