export 'binding/engine.ht'
export 'random.ht'

/// 游戏设置，和存档无关，属于载入存档或者开始新游戏之前的全局设置
var config = {
  debug: true,
}

var hero

var game

var universe

struct Game {
  construct {
    this.isLoaded = false
    // 本次游戏加载的 module，这里是纯数据，函数保存在另外的地方
    this.modules = {}

    this.timestamp = 0

    this.characters = {}
    this.npcs = {}
    this.babies = {}
    this.locations = {}
    this.organizations = {}

    // 每个月生成的暴风雨地点
    this.stormTileIndexes = []
    // 每个月生成的可捕鱼的地点
    this.fishTileIndexes = []
    
    // 游戏本身逻辑所用到的一些事件检查选项
    // 例如每个月是否进行了某个动作之类
    this.flags = {}
    
    // 英雄自宅的数据，直接保存在游戏数据顶层
    this.heroHomeSite = {
      category: kSiteHome,
      name: getLocaleString(kSiteHome),
      image: 'location/site/home.png',
      id: 'site.home',
      // 建筑和人物类似，也具有物品栏
      inventory: {},
      // 随从，可以设置为战斗伙伴
      companions: {},
    }

    resetPlayerMonthlyActivities(this)
  }
}

struct Universe {
  construct {
    this.currentWorld = null
    this.worlds = {}
    /// 当前副本，未进入副本时为 null
    this.currentMaze = null
    this.mazes = {}
  }
}

fun resetPlayerMonthlyActivities(gameData){
  
  // 指玩家对某个其他角色、据点、地形、建筑进行过的动作，限定每个月一次
  gameData.flags.playerMonthly = {
    // 对其他角色操作
    talked: [],
    gifted: [],
    practiced: [],
    consulted: [],
    requested: [],
    insulted: [],
    stolen: [],

    // 对某个建筑操作
    worked: [],

    // 对自己组织操作
    recruited: [],
  }
}

fun resetGame {
  game = Game()
  universe = Universe()
}

fun addModInfo(module) {
  engine.info('[${module.name}] 载入模组数据')
  game.modules[module.id] = module
}

fun getModInfo(id) {
  return game.modules[id]
}

fun getPlayerMonthlyActivities {
  return game.flags.playerMonthly
}

fun getGameJsonData() {
  return game.toJson()
}

fun getUniverseJsonData() {
  return universe.toJson()
}

fun getSavePath {
  return game.savePath
}

fun setSavePath(name: str) {
  game.savePath = name
}

fun getTimestamp {
  return game.timestamp
}

fun loadGameFromJsonData(gameData, universeData) {
  game = prototype.fromJson(gameData)
  
  loadColors()
  
  universe = prototype.fromJson(universeData)

  game.isLoaded = true

  return universe.currentWorld
}

fun getCurrentMazeHistory() {
  return universe.currentMaze.history
}

fun getCurrentWorldHistory() {
  return universe.currentWorld.history
}

fun getWorldId {
  return universe.currentWorld.id
}
