import '../game.ht'
import { Site, kSiteHeadquarters } from 'location.ht'
import '../generator/name/name.ht' as nameGenerator

final kOrganizationCategory = [
  'caltivation',
  'religion',
  'family',
  'gang',
  // 'business',
  // 'academy',
  // 'craftsmanship',
  // 'restaurant',
]

final kOrganizationThinkings = {
  caltivation: [
    'martialArtsAddiction',
    'strengthAdmiration',
    'masterRespect',
    'mentor',
    'sectarianism',
  ],
  religion: [
    'coreligionist',
    'missionary',
    'discipline',
    'theology',
    'religious',
  ],
  family: [
    'respectForElders',
    'malePreference',
    'excluding',
    'familyGuy',
    'heritage',
  ],
  gang: [
    'swordLover',
    'brotherhood',
    'chivalrousness',
    'promise',
    'communism',
  ],
  business: [],
  academy: [],
  craftsmanship: [],
  restaurant: [],
}

const kOrganizationThinkingsOnRecruit = 2

struct Organization {
  construct ({
    category,
    name,
    nationId,
    headquartersId,
    leaderId,
    development,
  }) {
    assert(game.locations.containsKey(headquartersId))
    assert(game.characters.containsKey(leaderId))

    if (category == null) {
      this.category = kOrganizationCategory.random
    } else {
      assert(kOrganizationCategory.contains(category))
      this.category = category
    }
    this.index = game.organizations.length
    if (name) {
      this.name = name
    } else {
      var conflict = false
      do {
        final r = nameGenerator.getOrganization(1, category: this.category)
        this.name = r.first.name
        conflict = game.organizations.values.where((element) =>
          element.name == this.name).isNotEmpty
      } while (conflict)
    }
    this.id = 'clan_${this.index}_${this.name}'
    
    // 本门派统治的据点 id 列表
    this.locationIds = Set()
    // 本门派成员 id 列表
    this.characterIds = Set()
    
    if (nationId) {
      assert(game.nations.containsKey(nationId))
      final nation = game.nations[nationId]
      nation.organizationIds.add(this.id)
      this.nationId = nationId
    }

    final location = game.locations[headquartersId]
    addLocationToOrganization(location, this)
    setOrganizationHeadquarters(this, location)

    final leader = game.characters[leaderId]
    addCharacterToOrganization(leader, this)
    setLeader(this, leader)

    // 组织规模，组织所能允许的等级数量 = 规模
    this.development = development ?? 1

    game.organizations[this.id] = this
  }
}

// 必须已经是门派成员，才可以设定为掌门
fun setLeader(organization, character) {
  assert(character.organizationId == organization.id)
  organization.leaderId = character.id
  character.titles[kLeaderTitle] = getLeaderTitle(organization)
  character.currentTitleId = kLeaderTitle
  character.isLeader = true
}

// 必须已经是门派据点, 并且尚未设置总堂，才可以设置总堂
fun setOrganizationHeadquarters(organization, location) {
  assert(!location.sites.containsKey(kSiteHeadquarters))
  assert(location.organizationId == organization.id)
  organization.headquartersId = location.id
  location.sites[kSiteHeadquarters] = Site(
    location: location,
    category: kSiteHeadquarters,
    name: organization.name,
  )
  location.isHeadquarters = true
}

// 组织中每个等级的人数上限
// 数字越大，等级越低，0是掌门
fun maxMemberNumberOfOrganizationRank(n: int) {
  return n * n
}

// 组织发展度，等于组织可以拥有的境界上限
// 最少是 1，可以拥有 筑基 1 人，炼气 4 人，外门 9 人
// 最多是 10
fun maxMemberNumberOfOrganizationDevelopment(n: int) {
  assert(n > 0)
  var number = 0
  for (var i in range(n + 1)) {
    number += maxMemberNumberOfOrganizationRank(i)
  }
  return number
}

fun removeCharacterFromOrganization(character) {
  if (!character.organizationId) return

  final org = game.organizations[character.organizationId]
  org.characterIds.remove(character.id)
  character.organizationId = null
}

fun addCharacterToOrganization(character, organization) {
  assert(!organization.characterIds.contains(character.id))
  if (character.organizationId != null) {
    assert(character.organizationId != organization.id)
    removeCharacterFromOrganization(character)
  }
  organization.characterIds.add(character.id)
  character.organizationId = organization.id
  final location = game.locations[organization.headquartersId]
  setCharacterHome(character, location)

  for (final i in range(kOrganizationThinkingsOnRecruit)) {
    var thinking
    do {
      thinking = kOrganizationThinkings[organization.category].random
    } while (character.thinkings.contains(thinking))
    character.thinkings.add(thinking)
  }
}

fun removeLocationFromOrganization(location) {
  if (!terrain.organizationId) return

  final org = game.organizations[terrain.organizationId]
  org.locationIds.remove(location.id)
  location.organizationId = null
}

fun addLocationToOrganization(location, organization) {
  if (location.organizationId != null) {
    assert(location.organizationId != organization.id)
    removeLocationFromOrganization(location)
  }
  // 只能向本国的门派分配本国统治的据点
  assert(location.nationId == organization.nationId)
  location.organizationId = organization.id
  assert(!organization.locationIds.contains(location.id))
  organization.locationIds.add(location.id)
}

fun addOrganizations(orgs: List) {
  engine.info('载入组织数据')
  for (final org in orgs) {
    game.organizations[org.id] = org
  }
}

fun addOrganization(char) {
  game.organizations[char.id] = char
}

fun getOrganizationById(id: str) {
  return game.organizations[id]
}

fun getOrganizations() {
  return game.organizations
}
