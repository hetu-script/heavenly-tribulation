import '../battle_entity.ht'
import '../../../name/name.ht' as nameGenerator
import '../../item/weapon/beast_weapon.ht'
import '../../common.ht'

const _kBeastRandomAgeMax = 150

final _kBeastTypes = [
  'tiger',
  'monkey',
  'snake',
]

const _kBeastAttributeSum = 200

final _kBeastAttributes = {
  tiger: {
    strength: 92,
    constitution: 75,
    spirituality: 0,
    willpower: 0,
    dexterity: 88,
    intelligence: 0,
    perception: 77,
    charisma: 0,
  },
  monkey: {
    strength: 55,
    constitution: 59,
    spirituality: 0,
    willpower: 0,
    dexterity: 84,
    intelligence: 0,
    perception: 85,
    charisma: 0,
  },
  snake: {
    strength: 74,
    constitution: 37,
    spirituality: 0,
    willpower: 0,
    dexterity: 42,
    intelligence: 0,
    perception: 96,
    charisma: 0,
  },
}

struct Beast {
  construct ({
    birthTimestamp,
    kind,
    attributes,
    rarity,
    description,
  }) {
    this.entityType = kEntityTypeNpc
    this.birthTimestamp = birthTimestamp ?? createRandomBirthTimestamp(max: _kBeastRandomAgeMax)
    this.kind = kind ?? random.nextIterable(_kBeastTypes)
    assert(this.kind in _kBeastTypes)
    final r = nameGenerator.getCreature(1, category: this.kind, rarity: rarity).first
    this.name = r.name
    this.category = kEntityCategoryBeast
    this.id = 'beast_${Hash.uid4(2)}_${this.name}'
    this.rarity = r.rarity ?? kCommon
    this.color = kRarity[this.rarity].color
    game.npcs[this.id] = this

    this.description = description ?? ''

    // 生成战斗单位相关数据，并写入当前对象
    // 不使用继承主要是因为这些数据经常会改动，直接写在这个对象上的话会更清晰
    final battleInfo = BattleEntity(
      attributes: attributes ?? _kBeastAttributes[this.kind],
      attributeSum: _kBeastAttributeSum,
      generate: false,
    )
    this.assign(battleInfo)

    // 装备栏由战斗单位类生成，因此下面的代码不能放在 BattleEntity 之前
    when (this.kind) {
      'tiger' -> {
        this.icon = 'maze/tiger.png'
        characterEquip(this, BeastWeapon(beastName: this.name, kind: kBeastWeaponKindClaw, rarity: this.rarity))
        characterEquip(this, BeastWeapon(beastName: this.name, kind: kBeastWeaponKindFang, rarity: this.rarity))
      }
      'monkey' -> {
        this.icon = 'maze/monkey.png'
        characterEquip(this, BeastWeapon(beastName: this.name, kind: kBeastWeaponKindClaw, rarity: this.rarity))
      }
      'snake' -> {
        this.icon = 'maze/snake.png'
        characterEquip(this, BeastWeapon(beastName: this.name, kind: kBeastWeaponKindFang, rarity: this.rarity))
      }
    }

    generateCharacterStats(this)
  }
}
