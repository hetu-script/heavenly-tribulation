import '../../../effect.ht'

const _kCompanionAssistCooldown = 5
const _kCompanionDefendCooldown = 5
const _kCompanionDefendPercentage = 1.0

// 单纯的随从
const kCompanionTypeFollower = 'follower'
// 可以设置在战斗伙伴栏的随从
const kCompanionTypeBattle = 'battleCompanion'
// 俘虏
const kCompanionTypeCapture = 'capture'

// 战斗伙伴是一种特殊的随从，可以“装备”在物品栏，并且带有一些战斗中的效果
fun generateBattleCompanionData(companionData, battleEntity) {
  final firstOffenseItem = getFirstEquippedOffenseItem(battleEntity)
  companionData.stats.damage = firstOffenseItem?.stats.damage

  companionData.isEquippable = true
  companionData.equipType = kEquipTypeCompanion

  final assist = Effect(
    id: kEffectIncreaseDamageWithCooldown,
    description: kEffectCompanionIncreaseDamageDescription,
    category: kEffectCategoryDamage,
    values: [
      EffectValue(
        value: companionData.stats.damage,
        type: kEffectValueTypeInt,
      ),
      EffectValue(
        value: _kCompanionAssistCooldown,
        type: kEffectValueTypeInt,
      ),
    ],
  )
  final defend = Effect(
    id: kEffectDefendWithCooldown,
    description: kEffectDefendWithCooldown,
    category: kEffectCategoryDefend,
    values: [
      EffectValue(
        value: _kCompanionDefendPercentage,
        type: kEffectValueTypePercentage,
      ),
      EffectValue(
        value: _kCompanionDefendCooldown,
        type: kEffectValueTypeInt,
      ),
    ],
  )
  if (companionData.effects == null) companionData.effects = {}
  companionData.effects[assist.id] = assist
  companionData.effects[defend.id] = defend
}
