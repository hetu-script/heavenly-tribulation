import '../../../effect.ht'

const _kCompanionAssistCooldown = 5
const _kCompanionDefendCooldown = 5
const _kCompanionDefendPercentage = 1.0

fun generateBattleCompanionData(companionData, battleEntity) {
  final firstOffenseItem = getFirstEquippedOffenseItem(battleEntity)
  companionData.stats.damage = firstOffenseItem?.stats.damage

  // 生成同伴数据
  final assist = Effect(
    id: kEffectIncreaseDamageWithCooldown,
    description: kEffectCompanionIncreaseDamageDescription,
    category: kEffectCategoryDamage,
    values: [
      EffectValue(
        value: companionData.stats.damage,
        type: kEffectValueTypeInt,
      ),
      EffectValue(
        value: _kCompanionAssistCooldown,
        type: kEffectValueTypeInt,
      ),
    ],
  )
  final defend = Effect(
    id: kEffectDefendWithCooldown,
    description: kEffectDefendWithCooldown,
    category: kEffectCategoryDefend,
    values: [
      EffectValue(
        value: _kCompanionDefendPercentage,
        type: kEffectValueTypePercentage,
      ),
      EffectValue(
        value: _kCompanionDefendCooldown,
        type: kEffectValueTypeInt,
      ),
    ],
  )
  if (companionData.effects == null) companionData.effects = {}
  companionData.effects[assist.id] = assist
  companionData.effects[defend.id] = defend
}
