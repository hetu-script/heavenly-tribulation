import '../battle_entity.ht'
import '../../common.ht'
import '../../item/common.ht'
import '../companion.ht'

final _kCompanionKinds = [
  'villageWarrior',
]

const _kVillageWarriorAttributeSum = 400

struct VillageWarrior {
  construct ({
    birthTimestamp,
    kind,
    rarity,
    description,
    attributes,
    attributeSum = _kVillageWarriorAttributeSum,
    isPermanent = false,
  }) {
    this.entityType = kEntityTypeNpc
    this.birthTimestamp = birthTimestamp ?? createRandomBirthTimestamp()
    this.icon = 'avatar/general.png'
    this.category = kEntityCategoryCharacter
    this.kind = kind ?? random.nextIterable(_kCompanionKinds)
    this.name = getLocaleString(this.kind)
    this.id = '${this.entityType}.${Hash.uid4(2)}.${this.kind}.${this.name}'
    this.rarity = rarity ?? kCommon
    this.color = kRarity[this.rarity].color
    this.isPermanent = isPermanent
    this.description = description ?? ''
    this.isEquippable = true
    this.equipType = kEquipTypeCompanion
    this.companionType = kCompanionTypeBattle
    game.npcs[this.id] = this

    // 生成战斗单位相关数据，并写入当前对象
    // 不使用继承主要是因为这些数据经常会改动，直接写在这个对象上的话会更清晰
    final battleInfo = BattleEntity(attributes: attributes, attributeSum: attributeSum)
    this.assign(battleInfo)

    // 装备栏由战斗单位类生成，因此下面的代码不能放在 BattleEntity 之前
    when (this.kind) {
      'villager' -> {
        characterEquip(this, Weapon())
      }
    }
    
    generateCharacterStats(this)
  }
}
