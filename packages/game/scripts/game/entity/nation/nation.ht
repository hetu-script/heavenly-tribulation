import '../../game.ht'
import '../../tile/tilemap.ht'
import '../../name/nation.ht'
import '../../l10n.ht'
import '../common.ht'

const _kEmperorTitle = 'empireLeaderTitle'
const _kEmperorRank = 99

struct Nation {
  construct ({
    name,
    capitalId,
  }) {
    assert(capitalId != null)
    this.capitalId = capitalId
    final location = game.locations[capitalId]
    // 设为首都后，免费获得发展度+2，稳定度+50
    location.development += 2
    location.stability += 50

    this.index = game.nations.length
    if (name) {
      this.name = name + getLocaleString('nationPostfix')
    } else {
      var conflict = false
      do {
        final r = generateNationName()
        this.name = r.first.name
        conflict = game.nations.values.where((element) =>
          element.name == this.name).isNotEmpty
      } while (conflict)
    }
    this.id = 'nation_${this.index}_${this.name}'
    this.color = random.nextBrightColorHex()
    
    // 本国统治的区块
    this.territoryIndexes = []
    // 国界线相邻的外国区块
    this.borderIndexes = []
    // 本国统治的据点
    this.locationIds = []
    // 本国的门派
    this.organizationIds = []

    game.nations[this.id] = this
  }
}

fun getNations(id: str) {
  return game.nations
}

fun getNationById(id: str) {
  return game.nations[id]
}

fun removeTerrainFromNation(terrain) {
  if (!terrain.locationId) return

  final nation = game.nations[terrain.nationId]
  nation.territoryIndexes.remove(terrain.index)
  nation.borderIndexes.add(terrain.index)
  final location = game.locations[terrain.locationId]
  delete location.nationId
  nation.locationIds.remove(location.id)
}

fun addTerrainToNation(nation, terrain) {
  if (terrain.nationId != null) {
    assert(terrain.nationId != nation.id)
    removeTerrainFromNation(terrain)
  }
  assert(nation.territoryIndexes.isEmpty || !nation.territoryIndexes.contains(terrain.index))
  nation.territoryIndexes.add(terrain.index)
  assert(nation.borderIndexes.isEmpty || nation.borderIndexes.contains(terrain.index))
  // print('nation: ${nation.id} expanded to ${terrain.left},${terrain.top}')
  nation.borderIndexes.remove(terrain.index)
  terrain.nationId = nation.id
  if (terrain.locationId) {
    final location = game.locations[terrain.locationId]
    if (location.nationId) {
      final oldNation = game.nations[location.nationId]
      oldNation.locationIds.remove(location.id)
    } else {
      final gov = Site(category: kSiteGovernment, locationId: location.id)
      if (nation.capitalId == location.id) {
        location.isCapital = true
        gov.isCapital = true
      }
      locaiton.governmentSiteId = gov.id
    }
    location.nationId = nation.id
    assert(!nation.locationIds.contains(location.id))
    nation.locationIds.add(location.id)
  }
  final neighbors = getMapTileNeighbors(terrain.left, terrain.top, game.world)
  for (final neighbor in neighbors) {
    if (neighbor.nationId != nation.id) {
      nation.borderIndexes.add(neighbor.index)
    }
  }
}

// fun getEmperorTitle(nation) {
//   return nation.name + getLocaleString('emperor')
// }

// 必须已经是国民，才可以设定为皇帝
fun setEmperor(nation, character) {
  assert(character.nationId == nation.id)
  nation.emperorId = character.id
  character.titles[_kEmperorTitle] = getLocaleString('emperor')
  character.currentTitleId = _kEmperorTitle
  character.organizationRank = _kEmperorRank
}
