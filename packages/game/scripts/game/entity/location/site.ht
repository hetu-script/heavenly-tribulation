import '../../l10n.ht'
import 'location.ht'
import '../../dialog.ht'
import '../organization/organization.ht'
import '../../game.ht'
import '../character/status_effect.ht'
import '../../quest/quest.ht'
import '../item/item.ht'
import '../../tile/hexagonal_tile.ht'
import '../../datetime.ht'
import '../common.ht'

// 这三种交易建筑，可能属于某个组织，也可能没有组织。
// 当没有组织时，属于默认生成的单纯服务性质的建筑。
// 此时交易所产生的物品、金钱，将会归属于其所在的据点。

const kSiteCultivation = 'cultivation'
const kSiteGang = 'gang'
const kSiteReligion = 'religion'
const kSiteBusiness = 'business'
const kSiteNation = 'nation'
const kSiteTradinghouse = 'tradinghouse'
const kSiteWorkshop = 'workshop'
const kSiteRestaurant = 'restaurant'
const kSiteGovernment = 'government'
const kSiteResidence = 'residence'
const kSiteLibrary = 'library'
const kSiteAcademy = 'academy'
const kSiteFarmland = 'farmland'
const kSiteMine = 'mine'
const kSiteTimberland = 'timberland'
const kSiteArena = 'arena'
const kSiteHospital = 'hospital'
const kSiteNursery = 'nursery'
const kSiteAlchemylab = 'alchemylab'
const kSiteZoo = 'zoo'

struct Site {
  construct ({
    locationId,
    organizationId,
    category,
    name,
    image,
  }) {
    assert(locationId != null)
    assert(category != null)

    // 该建筑的每月刷新任务的时间
    this.monthlyUpdateTime = random.nextInt(kTicksPerMonth)

    this.locationId = locationId
    this.category = category
    this.organizationId = organizationId
    if (category == kSiteNation) {
      final organization = game.organizations[organizationId]
      this.name = organization.name + getLocaleString('palace')
    } else if (category == kSiteGovernment) {
      final location = game.locations[locationId]
      this.name = location.name + getLocaleString(kSiteGovernment)
    } else {
      this.name = name ?? getLocaleString(category)
    }
    this.image = image ?? 'location/site/${category}.png'

    this.id = 'site.${locationId}.${category}.${this.name}'

    final location = game.locations[locationId]
    engine.info('在 ${location.name} 建立了新建筑 ${this.name}')
    location.sites[this.id] = this

    when (category) {
      kSiteCultivation -> location.hasCultivation = true
      kSiteGang -> location.hasGang = true
      kSiteReligion -> location.hasReligion = true
    }
    
    // 建筑和人物类似，也具有物品栏
    this.inventory = {}
    this.skills = {}

    // 这个建筑可以领的任务
    // 可以在官府，或者在民居的告示栏领任务
    // 也可以在商号等建筑领任务
    this.quests = {}
  }
}

fun handleSiteInteraction(locationId: str, siteId: str) {
  final location = getLocationById(locationId)
  final site = getLocationSiteById(location, siteId)
  when (site.category) {
    'cultivation' -> _handleCultivationInteraction(site)
    'gang' -> _handleGangInteraction(site)
    'religion' -> _handleReligionInteraction(site)
    'tradinghouse' -> _handleTradingHouseInteraction(site)
    'workshop' -> _handleWorkshopInteraction(site)
    'restaurant' -> _handleRestaurantInteraction(site)
    'nation' -> _handlePalaceInteraction(site)
    'government' -> _handleGovernmentInteraction(site)
    'residence' -> _handleResidenceInteraction(site)
    'library' -> _handleLibraryInteraction(site)
    'academy' -> _handleAcademyInteraction(site)
    'farmland' -> _handleFarmlandInteraction(site)
    'mine' -> _handleMineInteraction(site)
    'timberland' -> _handleTimberInteraction(site)
    'arena' -> _handleArenaInteraction(site)
    'hospital' -> _handleHospitalInteraction(site)
    'nursery' -> _handleNurseryInteraction(site)
    'alchemylab' -> _handleAlchemylabInteraction(site)
    'zoo' -> _handleZooInteraction(site)
    else -> {
      engine.error('未知的建筑类型 (category)：${site.category}。[${site.id}]')
    }
  }
}

fun _handleCultivationInteraction(site) {
  final location = game.locations[site.locationId]
  showSelectionByLocaleKeys([
    'train',
    'learn',
    'visit',
    'leave',
  ])
  .then((key) {
    when (key) {
      // 如果选择 leave，直接忽略，什么也不做
      'train' -> {
        // 非本门派修士,需要花钱才能训练
        showDialogByLocaleKeys(['organizationTrainDeny'])
      }
      'learn' -> {
        // 非本门派修士,需要花钱才能学习,而且只能学习二阶或以下的功法
        showDialogByLocaleKeys(['organizationTrainDeny'])
      }
      'visit' -> {
        // 既然有总部，那就一定有可以拜访的成员
        final ids = location.organizations[site.organizationId].characterIds.toList()
        ids.remove(game.heroId)
        showVisitCharacterSelection(ids).then((key) {
          if (key != null) {
            handleCharacterInteraction(key)
          } else {
            _handleCultivationInteraction(site)
          }
        })
      }
    }
  })
}

fun _handleGangInteraction(site) {

}

fun _handleReligionInteraction(site) {
  
}

fun _handleAcademyInteraction(site) {
  
}

// 商号，可以在这里交易大多数物品
// 打工可以提升本地声望
// 将指定数量的材料运送到另一个城市，但途中可能会遇到劫匪或风暴，风暴会耽误时间。
// 没有提交足够数量的材料或者超过时间都会算作失败。
fun _handleTradingHouseInteraction(site) {
  final location = game.locations[site.locationId]
  showSelectionByLocaleKeys([
    'trade',
    'work',
    'leave',
  ]).then((key) {
    when (key) {
      'trade' -> {
        if (site.organizationId) {
          final organization = getOrganizationById(site.organizationId)
          showMerchant(organization, allowSell: false, sellableCategory: [kEntityCategoryMaterial])
        } else {
          showMerchant(site, allowSell: false, sellableCategory: [kEntityCategoryMaterial])
        }
      }
      'work' -> {
        if (site.workedThisMonth) {
          showDialogByLocaleKeys(['workedThisMonth'])
        } else if (site.quests.isEmpty) {
          showDialogByLocaleKeys(['questEmpty'])
        } else {
          final quest = site.quests.values.first
          assert(quest.category == kQuestCategoryDelivery)
          final displayName = getLocaleString('server')
          final message = getLocaleString('delivery.introDialog')
          final description = '${quest.description}${
            getLocaleString('questRewardMoney', interpolations: [quest.rewardMoney])
          }'
          showDialogByStrings([message,description], displayName: displayName).then((_) {
            showSelectionByLocaleKeys([
              'accept',
              'cancel',
            ]).then((key) {
              if (key == 'accept') {
                site.workedThisMonth = true
                characterAcceptQuest(hero, site, quest)
              }
            })
          })
        }
      }
    }
  })  
}

fun _handleWorkshopInteraction(site) {
}

fun _handleRestaurantInteraction(site) {
}

fun _handleHospitalInteraction(site) {
}

fun _handlePalaceInteraction(site) {
  showDialogByLocaleKeys(['visitPalaceDeny'])

  // final location = game.locations[site.locationId]
  // showSelection({
  //   visit: getLocaleString('visit'),
  //   leave: getLocaleString('leave'),
  // }).then((key) {
  //   when (key) {
  //     // 如果选择 leave，直接忽略，什么也不做
  //     'visit' -> {
  //       showDialogByResourceId('visit_palace_deny_entry')
  //     }
  //   }
  // })
}

fun _handleGovernmentInteraction(site) {
  final fame = getCharacterFame(hero)
  final location = game.locations[site.locationId]
  final selections = [
    'appeal',
    'tribute',
    'noticeBoard',
    'localExam',
  ]
  if (site.isCapital) {
    selections.add('nationalExam')
  }
  selections.add('visitJail')
  selections.add('leave')
  
  showSelectionByLocaleKeys(selections).then((key) {
    when (key) {
      'appeal' -> {
        showSelectionByLocaleKeys([
          'applyOrganization',
          'applySite',
          'complaintSite',
          'complaintCharacter',
          'appealCharacter',
          'setHome',
          'cancel',
        ]).then((key) {
          when (key) {
            'cancel' -> {
              _handleGovernmentInteraction(site)
            }
            'applyOrganization' -> {
              
            }
            'applySite' -> {
              
            }
            'complaintSite' -> {
              
            }
            'complaintCharacter' -> {
              
            }
            'appealCharacter' -> {
              
            }
            'setHome' -> {
              
            }
          }
        })
      }
      'tribute' -> {
        // TODO: 进贡金钱或者宝物，之后可以选择是否发起请求
      }
      'noticeBoard' -> {
        if (game.flags.playerMonthly.worked.contains(site.id)) {
          showDialogByLocaleKeys(['workedThisMonth'])
        } else if (site.quests.isEmpty) {
          showDialogByLocaleKeys(['governmentQuestEmpty'])
        } else {
          showQuests(site)
        }
      }
      'localExam' -> {
        showDialogByLocaleKeys(['localExamIntro'])
      }
      'nationalExam' -> {
        showDialogByLocaleKeys(['nationalExamIntro'])
      }
      'visitJail' -> {
        final entry = false
        () async {
          if (location.jailedCharacterIds.isEmpty) {
            return showDialogByLocaleKeys(['visitJailEmpty'])
          } else {
            if (fame > kFameCheckThreshold) {
              final title = getCharacterTitle(hero) ?? ''
              return showDialogByStrings(
                [
                  getLocaleString('visitJailEntryRespect', interpolations: [title + hero.name]),
                ],
                returnValue: true,
              )
            } else {
              return showDialogByLocaleKeys(['visitJailDeny'])
            }
          }
        }().then((value) {
          if (value) {
            
          }
        })
      }
    }
  })
}

fun _handleResidenceInteraction(site) {
  final location = game.locations[site.locationId]
  showSelectionByLocaleKeys([
    'visit',
    'leave',
  ]).then((key) {
    when (key) {
      // 如果选择 leave，直接忽略，什么也不做
      'visit' -> {
        if (location.residingCharacterIds.isNotEmpty) {
          final ids = location.residingCharacterIds.toList()
          ids.remove(game.heroId)
          showVisitCharacterSelection(ids).then((key) {
            if (key != null) {
              handleCharacterInteraction(key)
            }
          })
        } else {
          showDialogByLocaleKeys(['visitEmptyVillage'], character: hero)
        }
      }
    }
  })
}

fun _handleLibraryInteraction(site) {

}

fun _handleFarmlandInteraction(site) {

}

fun _handleMineInteraction(site) {

}

fun _handleTimberInteraction(site) {

}

fun _handleArenaInteraction(site) {

}

fun _handleNurseryInteraction(site) {

}

fun _handleAlchemylabInteraction(site) {

}

fun _handleZooInteraction(site) {

}
