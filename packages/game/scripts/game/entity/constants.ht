const kNone = 'none'

final kResources = [
  {
    id: 'gold',
    name: 'gold',
    image: 'item/gold.png',
  },
  {
    id: 'spiritStone',
    name: 'spiritStone',
    image: 'item/spirit_stone.png',
  },
  {
    id: 'grain',
    name: 'grain',
    image: 'item/grain.png',
  },
  {
    id: 'ore',
    name: 'ore',
    image: 'item/ore.png',
  },
  {
    id: 'timber',
    name: 'timber',
    image: 'item/timber.png',
  },
  {
    id: 'jade',
    name: 'jade',
    image: 'item/jade.png',
  },
  {
    id: 'food',
    name: 'food',
    image: 'item/food.png',
  },
  {
    id: 'medicine',
    name: 'medicine',
    image: 'item/medicine.png',
  },
  {
    id: 'buldingMaterial',
    name: 'buldingMaterial',
    image: 'item/bulding_aterial.png',
  },
  {
    id: 'talismanMaterial',
    name: 'talismanMaterial',
    image: 'item/talisman_material.png',
  },
  {
    id: 'kosher',
    name: 'kosher',
    image: 'item/kosher.png',
  }
]

final kEquipmentCategory = ['weapon', 'armor', 'boot', 'talisman']
final kEquipmentCategoryWithoutBoot = ['weapon', 'armor', 'talisman']

final kDamageTypes = [
  'slashing',
  'bludgeoning',
  'piercing',
  'cold',
  'fire',
  'lightning',
  'chi',
  'spell',
  'power',
]

final kSkillCategory = [
  'arcane',
  'fight',
  'escape',
  'array',
]

// 进行某些互动的时候
final kFameCheckThreshold = 75
// 进行某些互动的时候
final kCharismaCheckThreshold = 75

final kRarity = {
  common: {
    // common 灰
    rarity: 'common',
    color: '#222A35',
    probability: 1.0,
    value: 0,
    difficulty: 'normal',
  },
  uncommon:{
    // uncommon 白
    rarity: 'uncommon',
    color: '#CCCCCC',
    probability: 0.35,
    value: 1,
    difficulty: 'hard',
  },
  rare:{
    // rare 蓝
    rarity: 'rare',
    color: '#00A6A9',
    probability: 0.15,
    value: 2,
    difficulty: 'expert',
  },
  epic: {
    // epic 紫
    rarity: 'epic',
    color: '#804DC8',
    probability: 0.075,
    value: 3,
    difficulty: 'master',
  },
  legendary: {
    // legendary 橙
    rarity: 'legendary',
    color: '#C5C660',
    probability: 0.012,
    value: 4,
    difficulty: 'torment',
  },
  mythic: {
    // mythic 金
    rarity: 'mythic',
    color: '#F28234',
    probability: 0.03,
    value: 5,
    difficulty: 'nightmare',
  },
  exotic: {
    // exotic 虹
    rarity: 'exotic',
    color: '#C65043',
    probability: 0.005,
    value: 6,
    difficulty: 'purgatory',
  },
}

fun getRarity([max = 1.0]) {
  assert(0 < max && max <= 1.0)
  var rarity
  var value
  do {
    value = kRarity.values.random
  } while (value.probability > max)
  return value
}

fun getDifficulty([min = 0]) {
  assert(0 < max && max <= 1.0)
  var rarity
  var value
  do {
    value = kRarity.values.random
  } while (value.probability < min)
  return { rarity: value.difficulty, value: rarity.value }
}

fun getRarityValue(valueMap) {
  final r = getRarity()
  final v = valueMap[r.rarity]
  return (v is Iterable) ? v.random : v
}

const kEntityTypeCharacter = 'character'
const kEntityTypeItem = 'item'
const kEntityTypeSkill = 'skill'
const kEntityCategoryWeapon = 'weapon'
const kEntityCategoryBeastBodyPart = 'beastBodyPart'
const kEntityCategoryWeaponSupport = 'weaponSupport'
const kEntityCategoryMartialArts = 'martialArts'

const kEquipTypeOffense = 'offense'
const kEquipTypeSupport = 'support'
const kEquipTypeProtect = 'protect'
const kEquipTypeArcane = 'arcane'
const kEquipTypeManeuver = 'maneuver'

fun entityTakeDamage(entity, damage) {
  assert(entity?.stats?.life != null)
  entity.stats.life -= damage
  if (entity.stats.life < 0) entity.stats.life = 0
}
