const kNone = 'none'

final kEquipmentCategory = ['weapon', 'armor', 'boot', 'talisman']
final kEquipmentCategoryWithoutBoot = ['weapon', 'armor', 'talisman']

const kStats = 'stats'
final kStrength = 'strength'
final kDexterity = 'dexterity'
final kConstitution = 'constitution'
final kSuperpower = 'superpower'
final kPerception = 'perception'
final kIntelligence = 'intelligence'
final kLeadership = 'leadership'
final kManagement = 'management'

// 进行某些互动的时候
final kFameCheckThreshold = 75
// 进行某些互动的时候
final kCharismaCheckThreshold = 75

const kCommon = 'common'
const kUncommon = 'uncommon'
const kRare = 'rare'
const kEpic = 'epic'
const kLegendary = 'legendary'
const kMythic = 'mythic'
const kExotic = 'exotic'

final kRarity = {
  common: {
    // common 灰
    rarity: 'common',
    color: '#222A35',
    probability: 1.0,
    value: 0,
    difficulty: 'normal',
  },
  uncommon:{
    // uncommon 白
    rarity: 'uncommon',
    color: '#CCCCCC',
    probability: 0.35,
    value: 1,
    difficulty: 'hard',
  },
  rare:{
    // rare 蓝
    rarity: 'rare',
    color: '#00A6A9',
    probability: 0.15,
    value: 2,
    difficulty: 'expert',
  },
  epic: {
    // epic 紫
    rarity: 'epic',
    color: '#804DC8',
    probability: 0.075,
    value: 3,
    difficulty: 'master',
  },
  legendary: {
    // legendary 橙
    rarity: 'legendary',
    color: '#C5C660',
    probability: 0.012,
    value: 4,
    difficulty: 'torment',
  },
  mythic: {
    // mythic 金
    rarity: 'mythic',
    color: '#F28234',
    probability: 0.03,
    value: 5,
    difficulty: 'nightmare',
  },
  exotic: {
    // exotic 虹
    rarity: 'exotic',
    color: '#C65043',
    probability: 0.005,
    value: 6,
    difficulty: 'purgatory',
  },
}

fun getRarity([max = 1.0]) {
  assert(0 < max && max <= 1.0)
  var rarity
  var value
  do {
    value = kRarity.values.random
  } while (value.probability > max)
  return value
}

fun getDifficulty([min = 0]) {
  assert(0 < max && max <= 1.0)
  var rarity
  var value
  do {
    value = kRarity.values.random
  } while (value.probability < min)
  return { rarity: value.difficulty, value: rarity.value }
}

fun getRarityValue(valueMap) {
  final r = getRarity()
  final v = valueMap[r.rarity]
  return (v is Iterable) ? v.random : v
}

const kLife = 'life'
const kStamina = 'stamina'

const kEntityTypeCharacter = 'character'
const kEntityTypeEnemy = 'enemy'
const kEntityTypeItem = 'item'
const kEntityTypeSkill = 'skill'
const kEntityCategoryWeapon = 'weapon'
const kEntityCategoryWeaponSupport = 'weaponSupport'
const kEntityCategoryKickboxing = 'kickboxing'
const kEntityCategoryProtect = 'protect'
const kEntityCategoryElixir = 'elixir'

const kEntityElixirKindMedicine = 'medicine'
const kEntityElixirKindBeverage = 'beverage'
const kEntityElixirKindAlchemy = 'alchemy'

const kOffenseEquipmentMax = 5
const kArcaneEquipmentMax = 3
const kSupportEquipmentMax = 4

const kEquipTypeOffense = 'offense'
const kEquipTypeSupport = 'support'
const kEquipTypeProtect = 'protect'
const kEquipTypeArcane = 'arcane'
const kEquipTypeManeuver = 'maneuver'

fun entityTakeDamage(entity, damage) {
  assert(entity?.stats?.life != null)
  entity.stats.life -= damage
  if (entity.stats.life < 0) entity.stats.life = 0
}

const _kCharacterRandomAgeMax = 150

fun createRandomBirthTimestamp([min = 1, max = _kCharacterRandomAgeMax]) {
  assert(min > 0)
  final age = Math.randomInt(max - min) + min
  final randomDateInAYear = Math.randomInt(kTicksPerYear)
  return game.timestamp - (age * kTicksPerYear + randomDateInAYear)
}
