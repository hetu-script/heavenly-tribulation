// 效果id对应一个效果的文字描述，以及触发效果的回调函数。
// 效果的触发分不同场合，可能在食用时触发，或者在攻击时触发等等\
// 效果本身有不同数据，例如同样是回复生命的效果，但具体回复的数值可能不同
// 回调函数的工作就是根据效果的具体数值来修改对应的游戏对象
// 某些回调函数直接修改游戏对象，因此没有返回值，
// 也有些回调函数会返回包含执行结果的数值，例如受击减伤效果
// 效果中的数值以列表形式保存，这是为了在游戏界面显示时可以不用关心具体数值的key。
// 某些效果会以“第x次攻击后”的形式触发
// 对于此种效果，回调函数会在该效果对象上临时赋值，计算CD时间。

const kEffectValueTypeInt = 'int';
const kEffectValueTypeFloat = 'float';
const kEffectValueTypePercentage = 'percentage';

const kEffectRestoreLife = 'effectRestoreLife'
const kEffectRestoreChi = 'effectRestoreChi'
const kEffectRestoreStamina = 'effectRestoreStamina'
const kEffectHealInjury = 'effectHealInjury'

// 食用时触发的效果
final kEffectCategoryConsume = 'consume'
// 受击时触发的效果
final kEffectCategoryDefend = 'defend'
// 造成伤害时触发的效果
final kEffectCategoryDamage = 'damage'

// 关于 增加/减少（increased / decreased）和 更多/更少（more / less）
// 前者是把所有的百分比直接加一起，然后乘以基础值。
// 后者是把基础值分别乘以百分比，然后加在一起。
// 参考：https://pathofexile.fandom.com/wiki/Stat#more_vs_increased

const kEffectIncreaseDamage = 'effectIncreaseDamage'
const kEffectDecreaseDamage = 'effectDecreaseDamage'

const kEffectMoreDamage = 'effectMoreDamage'
const kEffectLessDamage = 'effectLessDamage'

const kEffectDefend = 'effectDefend'
const kEffectDefendWithCooldown = 'effectDefendWithCooldown'

const kEffectIncreaseDamageWithCooldown = 'effectIncreaseDamageWithCooldown'
const kEffectCompanionIncreaseDamageDescription = 'effectCompanionIncreaseDamageDescription'

// 加载到本次游戏的效果脚本
final effectHandlers = {
  // 食用类效果
  // 回复生命
  effectRestoreLife: (effect, character) {
    character.stats.life += effect.values[0].value
  },
  // 回复元气
  effectRestoreChi: (effect, character) {
    character.stats.chi += effect.values[0].value
  },
  // 回复体力
  effectRestoreStamina: (effect, character) {
    character.stats.stamina += effect.values[0].value
  },
  // 治疗外伤
  effectHealInjury: (effect, character) {
    character.id = false
  },

  // 受击类效果
  effectDefendWithCooldown: (effect, baseDamage) {
    if (effect.cooldown <= 0) {
      effect.cooldown = effect.values[1].value
      return baseDamage * effect.values[0].value
    } else {
      --effect.cooldown
      //这里要明确返回null，否则上面一行的数字就会被返回
      return null
    }
  }

  // 同伴协同攻击
  effectIncreaseDamageWithCooldown: (effect, baseDamage) {
    if (effect.cooldown <= 0) {
      effect.cooldown = effect.values[1].value
      return baseDamage + effect.values[0].value
    } else {
      --effect.cooldown
      //这里要明确返回null，否则上面一行的数字就会被返回
      return null
    }
  }
}

fun getEffectHandlerById(id: str) {
  return effectHandlers[id]
}

fun addEffectHandler(handler) {
  engine.info('载入效果处理模块 [${handler.name}]')
  effectHandlers[handler.id] = handler
}

struct EffectValue {
  construct ({
    value,
    type,
  }) {
    assert(value != null && value > 0)
    this.value = value
    this.type = type ?? kEffectValueTypeInt
  }
}

struct Effect {
  construct ({
    id,
    description,
    category,
    values,
  }) {
    assert(id != null)
    assert(description != null)
    assert(category != null)
    this.id = id
    this.description = description
    this.category = category

    this.values = values ?? []
    this.cooldown = 0
  }
}

