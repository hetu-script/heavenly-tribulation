import '../../game.ht'
import '../location/site.ht'
import '../../name/organization.ht'
import '../../l10n.ht'
import '../common.ht'

final kOrganizationCategories = [
  'cultivation',
  'gang',
  'religion',
  'academy',
  'tradinghouse',
  'workshop',
  'restaurant',
]

const kOrganizationCategoryCultivation = 'cultivation'
const kOrganizationCategoryGang = 'gang'
const kOrganizationCategoryReligion = 'religion'
const kOrganizationCategoryAcademy = 'academy'
const kOrganizationCategoryTradinghouse = 'tradinghouse' // 直接对应site类型
const kOrganizationCategoryWorkshop = 'workshop' // 直接对应site类型
const kOrganizationCategoryRestaurant = 'restaurant' // 直接对应site类型

final kTradingOrganizationCategories = [
  'tradinghouse',
  'workshop',
  'restaurant',
]

final kOrganizationThinkings = {
  cultivation: [
    'martialArtsAddiction',
    'strengthAdmiration',
    'masterRespect',
    'mentor',
    'sectarianism',
  ],
  business: [
    'everyOneIsForHimself',
    'asLongAsProfit',
    'privateProperty',
    'spiritOfContract',
    'monopolism',
  ],
  gang: [
    'swordLover',
    'brotherhood',
    'chivalrousness',
    'promise',
    'communism',
  ],
  religion: [
    'coreligionist',
    'missionary',
    'discipline',
    'theology',
    'religious',
  ],
  academy: [],
  craftsmanship: [],
  restaurant: [],
}

const _kOrganizationThinkingsOnRecruit = 3

const _kLeaderRank = 80

struct Organization {
  construct ({
    category,
    name,
    nationId,
    headquartersId,
    leaderId,
    development = 0,
  }) {
    assert(game.locations.containsKey(headquartersId))
    assert(game.characters.containsKey(leaderId))
    assert(kOrganizationCategories.contains(category))

    this.headquartersId = headquartersId
    this.leaderId = leaderId
    this.entityType = kEntityTypeOrganization
    this.category = category

    this.index = game.organizations.length
    if (name) {
      this.name = name
    } else {
      var conflict = false
      do {
        final r = generateOrganizationName(category: this.category)
        this.name = r.first.name
        conflict = game.organizations.values.where((element) =>
          element.name == this.name).isNotEmpty
      } while (conflict)
    }
    this.id = 'clan_${this.index}_${this.name}'
    game.organizations[this.id] = this
    
    // 本门派统治的据点 id 列表
    this.locationIds = []
    // 本门派成员 id 列表
    this.characterIds = []

    // 组织规模，组织所能允许的等级数量 = 规模
    this.development = development
    
    if (nationId) {
      assert(game.nations.containsKey(nationId))
      final nation = game.nations[nationId]
      nation.organizationIds.add(this.id)
      this.nationId = nationId
    }

    final headquarters = game.locations[headquartersId]
    final leader = game.characters[leaderId]
    // 触发创派事件，创派事件和成为掌门是两个事件
    final incidentContent = getLocaleString('incidentOrganizationCreate', [
      leader.name,
      headquarters.name,
      this.name,
    ])
    Incident(
      subjectIds: [leader.id],
      content: incidentContent,
      order: 15,
      isGlobal: true,
    )
    addCharacterToOrganization(leader, this)
    setLeader(leader, this)

    // addLocationToOrganization(location, this)
    stationOrganization(
      this,
      headquarters,
      characterIds: [leaderId],
      isHeadquarters: true,
    )
  }
}

// fun getLeaderTitle(organization) {
//   return organization.name + getLocaleString('${organization.category}LeaderTitle')
// }

// 必须已经是门派成员，才可以设定为掌门
fun setLeader(character, organization) {
  assert(character.organizationId == organization.id)
  organization.leaderId = character.id
  final titleId = '${organization.category}LeaderTitle'
  final title = getLocaleString(titleId)
  character.titles[titleId] = title
  character.currentTitleId = titleId
  character.organizationRank = 80
  final incidentContent = getLocaleString('incidentLeader', [
    character.name,
    organization.name,
    title,
  ])
  Incident(
    subjectIds: [character.id],
    content: incidentContent,
    order: 15,
    isGlobal: true,
  )
}

// 类似 equip，将会在 location 上保存一个新的数据对象
// {
//   id,
//   isHeadquarters
//   category,
//   characterIds, // 指在这个地点的该组织的人员，并不一定等于该组织的全部人员
// }
fun stationOrganization(
  organization,
  location, {
  characterIds,
  isHeadquarters = false,
}) {
  assert(!location.organizations.containsKey(organization.id))
  characterIds ??= organization.characterIds.toList()
  if (isHeadquarters) {
    organization.headquartersId = location.id
  }
  Site(
    category: organization.category,
    locationId: location.id,
    organizationId: organization.id,
    name: organization.name,
  ) 
  location.organizations[organization.id] = {
    id: organization.id,
    isHeadquarters: isHeadquarters,
    category: organization.category,
    characterIds: [],
  }

  for (final id in characterIds) {
    final character = game.characters[id]
    setCharacterHome(character, location, organizationName: organization.name)
  }

  organization.locationIds.add(location.id)
}

// 组织中每个等级的人数上限
// 数字越大，等级越低，0是掌门
fun maxMemberNumberOfOrganizationRank(n: int) {
  return n * n
}

// 组织发展度，等于组织可以拥有的境界上限
// 最少是 1，可以拥有 筑基 1 人，炼气 4 人，外门 9 人
// 最多是 10
fun maxMemberNumberOfOrganizationDevelopment(n: int) {
  assert(n > 0)
  var number = 0
  for (var i in range(n + 1)) {
    number += maxMemberNumberOfOrganizationRank(i)
  }
  return number
}

fun removeCharacterFromOrganization(character) {
  if (!character.organizationId) return

  final org = game.organizations[character.organizationId]
  org.characterIds.remove(character.id)
  delete character.organizationId
}

fun addCharacterToOrganization(character, organization, { incidentOccured = true }) {
  assert(!organization.characterIds.contains(character.id))
  if (character.organizationId != null) {
    assert(character.organizationId != organization.id)
    removeCharacterFromOrganization(character)
  }
  organization.characterIds.add(character.id)
  character.organizationId = organization.id

  if (incidentOccured) {
    final incidentContent = getLocaleString('incidentEnlist', [
      character.name,
      organization.name,
    ])
    Incident(
      subjectIds: [character.id],
      content: incidentContent,
      order: 10,
      isPrivate: false,
    )
  }

  final location = game.locations[organization.headquartersId]
  setCharacterHome(character, location, organizationName: organization.name)
  final r = random.nextInt(_kOrganizationThinkingsOnRecruit)
  for (final i in range(r)) {
    var thinking
    do {
      thinking = random.nextIterable(kOrganizationThinkings[organization.category])
    } while (character.thinkings.contains(thinking))
    character.thinkings.add(thinking)
  }

  setCharacterLocationId(character, organization.headquartersId)
}

// fun removeLocationFromOrganization(location) {
//   if (!terrain.organizationId) return

//   final org = game.organizations[terrain.organizationId]
//   org.locationIds.remove(location.id)
//   delete location.organizationId
// }

// fun addLocationToOrganization(location, organization) {
//   if (location.organizationId != null && location.organizationId != organization.id) {
//     removeLocationFromOrganization(location)
//   }
//   // 只能向本国的门派分配本国统治的据点
//   assert(location.nationId == organization.nationId)
//   location.organizationId = organization.id
//   assert(!organization.locationIds.contains(location.id))
//   organization.locationIds.add(location.id)
// }

fun addOrganizations(orgs: List) {
  engine.info('载入组织数据')
  for (final org in orgs) {
    game.organizations[org.id] = org
  }
}

fun addOrganization(char) {
  game.organizations[char.id] = char
}

fun getOrganizationById(id: str) {
  return game.organizations[id]
}

fun getOrganizations() {
  return game.organizations
}
