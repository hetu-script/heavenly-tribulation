import '../../game.ht'
import '../location/site.ht'
import '../../name/organization.ht'
import '../../l10n.ht'
import '../common.ht'
import '../../tile/tilemap.ht'
import '../../name/nation.ht'

const kOrganizationRankMax = 6

const kOrganizationDevelopmentMax = 5

const kOrganizationRecruitOtherLocationProbability = 0.2

const kOrganizationRecruitSuccessProbability = 0.4

final kOrganizationCategories = [
  'cultivation',
  'gang',
  'religion',
  'nation',
  'business',
]

final kEmpireRankTitles = {
  '0': getLocaleString('nation.titleRank0'),
  '1': getLocaleString('nation.titleRank1'),
  '2': getLocaleString('nation.titleRank2'),
  '3': getLocaleString('nation.titleRank3'),
  '4': getLocaleString('nation.titleRank4'),
  '5': getLocaleString('nation.titleRank5'),
  '6': getLocaleString('nation.titleRank6'),
  'creator': getLocaleString('nation.titleCreator'),
  'elder': getLocaleString('nation.titleElder'),
  'disipliner': getLocaleString('nation.titleDiscipliner'),
}

final kCultivationRankTitles = {
  '0': getLocaleString('cultivation.titleRank0'),
  '1': getLocaleString('cultivation.titleRank1'),
  '2': getLocaleString('cultivation.titleRank2'),
  '3': getLocaleString('cultivation.titleRank3'),
  '4': getLocaleString('cultivation.titleRank4'),
  '5': getLocaleString('cultivation.titleRank5'),
  '6': getLocaleString('cultivation.titleRank6'),
  'creator': getLocaleString('cultivation.titleCreator'),
  'elder': getLocaleString('cultivation.titleElder'),
  'disipliner': getLocaleString('cultivation.titleDiscipliner'),
  'guest': getLocaleString('cultivation.titleGuest'),
}

final kGangRankTitles = {
  '0': getLocaleString('gang.titleRank0'),
  '1': getLocaleString('gang.titleRank1'),
  '2': getLocaleString('gang.titleRank2'),
  '3': getLocaleString('gang.titleRank3'),
  '4': getLocaleString('gang.titleRank4'),
  '5': getLocaleString('gang.titleRank5'),
  '6': getLocaleString('gang.titleRank6'),
  'counsellor': getLocaleString('gang.titleCounsellor'),
  'elder': getLocaleString('gang.titleElder'),
  'disipliner': getLocaleString('gang.titleDiscipliner'),
}

final kReligionRankTitles = {
  '0': getLocaleString('religion.titleRank0'),
  '1': getLocaleString('religion.titleRank1'),
  '2': getLocaleString('religion.titleRank2'),
  '3': getLocaleString('religion.titleRank3'),
  '4': getLocaleString('religion.titleRank4'),
  '5': getLocaleString('religion.titleRank5'),
  '6': getLocaleString('religion.titleRank6'),
  'creator': getLocaleString('religion.titleCreator'),
  'elder': getLocaleString('religion.titleElder'),
  'disipliner': getLocaleString('religion.titleDiscipliner'),
}

final kBusinessRankTitles = {
  '0': getLocaleString('business.titleRank0'),
  '1': getLocaleString('business.titleRank1'),
  '2': getLocaleString('business.titleRank2'),
  '3': getLocaleString('business.titleRank3'),
  '4': getLocaleString('business.titleRank4'),
  '5': getLocaleString('business.titleRank5'),
  '6': getLocaleString('business.titleRank6'),
  'creator': getLocaleString('business.titleCreator'),
  'craftsman': getLocaleString('business.titleCraftsman'),
  'chef': getLocaleString('business.titleChef'),
}

const kOrganizationCategoryCultivation = 'cultivation'
const kOrganizationCategoryGang = 'gang'
const kOrganizationCategoryReligion = 'religion'
const kOrganizationCategoryBusiness = 'business'
const kOrganizationCategoryNation = 'nation'

final kOrganizationThinkings = {
  cultivation: [
    'martialArtsAddiction',
    'strengthAdmiration',
    'masterRespect',
    'mentor',
    'sectarianism',
  ],
  gang: [
    'swordLover',
    'brotherhood',
    'chivalrousness',
    'promise',
    'communism',
  ],
  religion: [
    'coreligionist',
    'missionary',
    'discipline',
    'theology',
    'religious',
  ],
  nation: [
    'philosopherKing',
    'etiquette',
    'gentlemanship',
    'moderateness',
    'justice',
  ],
  business: [
    'everyOneIsForHimself',
    'asLongAsProfit',
    'privateProperty',
    'spiritOfContract',
    'monopolism',
  ],
}

const _kOrganizationThinkingsOnRecruit = 3

const _kLeaderRank = 80

struct Organization {
  construct ({
    category,
    name,
    nationId,
    headquartersId,
    leaderId,
    development = 0,
    rankTitles,
  }) {
    assert(game.locations.containsKey(headquartersId))
    assert(game.characters.containsKey(leaderId))
    assert(kOrganizationCategories.contains(category))

    // 该组织的每月刷新事件的时间
    this.monthlyUpdateTime = random.nextInt(kTicksPerMonth)
    // 该组织的事件触发选项
    this.flags = {}

    // 该组织每年刷新时间的时间，一般都为 X 月 1 日
    // 例如招募大比时间等等，都发生在这个日期
    final month = random.nextInt(kMonthsPerYear)
    this.yearlyUpdateTime = month * kTicksPerMonth + random.nextInt(kTicksPerMonth)
    this.yearlyRecruitMonth = month + 1

    this.headquartersId = headquartersId
    this.leaderId = leaderId
    this.entityType = kEntityTypeOrganization
    this.category = category

    this.index = game.organizations.length
    if (name) {
      this.name = name
    } else {
      var conflict = false
      do {
        if (category != kOrganizationCategoryNation) {
          this.name = generateOrganizationName(category: this.category).name
        } else {
          this.name = generateNationName().name
        }
        conflict = game.organizations.values.where((element) =>
          element.name == this.name).isNotEmpty
      } while (conflict)
    }
    this.id = 'organization.${this.index}.${this.category}.${this.name}'
    game.organizations[this.id] = this
    
    // 本门派统治的据点 id 列表
    this.locationIds = []
    // 本门派成员，key 是 角色的 id，value 是角色的 rank
    this.characterIds = {}

    // 组织规模，决定了组织所能允许的成员数量
    // 规模也决定了新成员加入组织之后的等级
    // 例如当前规模0，那么总人数限制为 5
    // 新人加入时的等级为 1
    this.development = development
    
    // 该组织的历史，保存的是历史事件的 index
    this.experienced = []
    
    if (nationId) {
      assert(game.organizations.containsKey(nationId))
      final nation = game.organizations[nationId]
      nation.organizationIds.add(this.id)
      this.nationId = nationId
    }

    final headquarters = game.locations[headquartersId]
    final leader = game.characters[leaderId]
    // 触发创派事件，创派事件和成为掌门是两个事件
    final incidentContent = getLocaleString('incidentOrganizationCreate', interpolations: [
      leader.name,
      headquarters.name,
      this.name,
    ])
    Incident(
      subjectIds: [leader.id],
      organizationId: this.id,
      content: incidentContent,
      order: 15,
      isGlobal: true,
    )
    addCharacterToOrganization(leader, this)
    setCharacterRank(leader, this, 0)

    // addLocationToOrganization(location, this)
    stationOrganization(
      this,
      headquarters,
      characterIds: [leaderId],
      isHeadquarters: true,
    )

    when (this.category) {
      'nation' -> {
        this.rankTitles = rankTitles ?? kEmpireRankTitles
      }
      'cultivation' -> {
        this.rankTitles = rankTitles ?? kCultivationRankTitles
      }
      'gang' -> {
        this.rankTitles = rankTitles ?? kGangRankTitles
      }
      'religion' -> {
        this.rankTitles = rankTitles ?? kReligionRankTitles
      }
      'business' -> {
        this.rankTitles = rankTitles ?? kBusinessRankTitles
      }
    }
  }

  // 国家是一种特殊的组织，单独有一个生成函数，并且单独保存
  // 即便不加入国家，角色也有一个国籍
  // 加入国家组织，含义是在这个国家担任官职
  // 此时和加入别的组织一样，要求先退出原来的组织
  construct nation ({
    name,
    capitalId,
    emperorId,
    development = 0,
    rankTitles,
  }) : this(
    category: kOrganizationCategoryNation,
    name: name,
    headquartersId: capitalId,
    leaderId: emperorId,
    development = 0,
    rankTitles,
  ) {
    assert(capitalId != null)
    assert(emperorId != null)

    this.capitalId = capitalId
    final location = game.locations[capitalId]
    // 设为首都后，免费获得发展度+2，稳定度+50
    location.development += 2
    location.stability += 50

    this.color = random.nextBrightColorHex()
    
    // 本国统治的区块
    this.territoryIndexes = []
    // 国界线相邻的外国区块
    this.borderIndexes = []
    // 本国的门派
    this.organizationIds = []
  }
}

// fun getLeaderTitle(organization) {
//   return organization.name + getLocaleString('${organization.category}LeaderTitle')
// }

// 必须已经是门派成员，才可以设定职级
fun setCharacterRank(character, organization, rank) {
  if (character.organizationRank == rank) {
    engine.warning('将要为角色 ${character.name} 设置的新的组织等级 ${rank} 和角色目前的组织等级相同。')
    return
  }
  assert(organization.characterIds.keys.contains(character.id))
  assert(character.organizationId == organization.id)
  assert(rank >= 0 && rank <= kOrganizationRankMax)
  final membersOfRank = getOrganizationMemberIdOfRank(organization, rank)
  assert(membersOfRank.length < maxMemberOfDevelopment(organization.development))
  final titleId = '${organization.category}.titleRank${rank}'
  final title = getLocaleString(titleId)
  character.titles[titleId] = title
  character.currentTitleId = titleId
  character.organizationRank = rank
  if (rank == 0) {
    organization.leaderId = character.id
  }
  final incidentContent = getLocaleString('characterSetOrganizationRank', interpolations: [
    character.name,
    organization.name,
    title,
  ])
  Incident(
    subjectIds: [character.id],
    organizationId: organization.id,
    content: incidentContent,
    order: 15,
    isGlobal: true,
  )
}

// 类似 equip，将会在 location 上保存一个新的数据对象
// {
//   id,
//   isHeadquarters
//   category,
//   characterIds, // 指在这个地点的该组织的人员，并不一定等于该组织的全部人员
// }
fun stationOrganization(
  organization,
  location, {
  characterIds,
  isHeadquarters = false,
}) {
  assert(!location.organizations.containsKey(organization.id))
  characterIds ??= organization.characterIds.keys.toList()
  if (isHeadquarters) {
    organization.headquartersId = location.id
  }
  Site(
    category: organization.category,
    locationId: location.id,
    organizationId: organization.id,
    name: organization.name,
  )
  location.organizations[organization.id] = {
    id: organization.id,
    isHeadquarters: isHeadquarters,
    category: organization.category,
    characterIds: [],
  }

  for (final id in characterIds) {
    final character = game.characters[id]
    setCharacterHome(character, location, organizationName: organization.name)
  }

  organization.locationIds.add(location.id)
}

// 组织中每个等级的人数上限
// 数字越大，等级越低，0是掌门
fun maxMemberOfRank(n: int) {
  return (n + 1) * (n + 1)
}

// 组织可以拥有的人数上限取决于组织发展度
// 例如发展度 0，可以拥有 掌门 1 人，rank 1：4 人
fun maxMemberOfDevelopment(n: int) {
  var number = 0
  for (final i in range(n + 2)) {
    number += maxMemberOfRank(i)
  }
  return number
}

fun removeCharacterFromOrganization(character) {
  if (character.organizationId == null) return

  final organization = game.organizations[character.organizationId]
  organization.characterIds.remove(character.id)
  delete character.organizationId
}

fun getOrganizationMemberIdOfRank(organization, rank) {
  assert(rank >= 0 && rank <= kOrganizationRankMax)
  final ids = []
  for (final id in organization.characterIds.keys) {
    final idRank = organization.characterIds[id]
    if (idRank == rank) {
      ids.add(id)
    }
  }
  return ids
}

fun organizationLowestRankMemberReachMax(organization) {
  final memberIds = getOrganizationMemberIdOfRank(organization, kOrganizationRankMax)
  return memberIds.length >= maxMemberOfDevelopment(kOrganizationRankMax)
}

fun organizationMemberReachMax(organization) {
  return organization.characterIds.length >= maxMemberOfDevelopment(organization.development)
}

// 新加入的成员的等级，是当前的组织发展度 + 1
fun addCharacterToOrganization(character, organization, { incidentOccured = true }) {
  assert(!organization.characterIds.contains(character.id))
  if (organizationMemberReachMax(organization)) {
    engine.warning('组织 ${organization.name} 的成员数量达到上限，在提升发展度之前无法再添加新成员。')
    return false
  }
  if (organizationLowestRankMemberReachMax(organization)) {
    engine.warning('组织 ${organization.name} 的低阶成员数量达到上限，在提升成员级别之前无法再添加新成员。')
    return false
  }
  if (character.organizationId != null) {
    assert(character.organizationId != organization.id)
    removeCharacterFromOrganization(character)
  }
  character.organizationRank = kOrganizationRankMax
  organization.characterIds[character.id] = character.organizationRank
  character.organizationId = organization.id

  if (incidentOccured) {
    final incidentContent = getLocaleString('incidentEnlist', interpolations: [
      character.name,
      organization.name,
    ])
    Incident(
      subjectIds: [character.id],
      organizationId: organization.id,
      content: incidentContent,
      order: 10,
      isPrivate: false,
    )
  }

  final location = game.locations[organization.headquartersId]
  setCharacterHome(character, location, organizationName: organization.name)
  final r = random.nextInt(_kOrganizationThinkingsOnRecruit)
  for (final i in range(r)) {
    var thinking
    do {
      thinking = random.nextIterable(kOrganizationThinkings[organization.category])
    } while (character.thinkings.contains(thinking))
    character.thinkings.add(thinking)
  }
  
  setCharacterLocationId(character, organization.headquartersId)
  if (organization.category == kOrganizationCategoryNation) {
    character.nationId = organization.id
  }
  return true
}

fun addOrganizations(orgs: List) {
  engine.info('载入组织数据')
  for (final org in orgs) {
    game.organizations[org.id] = org
  }
}

fun addOrganization(char) {
  game.organizations[char.id] = char
}

fun getOrganizationById(id: str) {
  return game.organizations[id]
}

fun getOrganizations() {
  return game.organizations
}

fun increaseOrganizationDevelopment(organization) {
  if (organization.development < kOrganizationDevelopmentMax) {
    ++organization.development
  } else {
    engine.warning('组织 ${organization.name} 的发展度（${organization.development}）已达到或超过最大值。')
  }
  
  final incidentContent = getLocaleString('organizationDeveloped', interpolations: [
    organization.name,
    organization.development,
  ])
  Incident(
    organizationId: organization.id,
    content: incidentContent,
    isGlobal: true,
  )
}

fun organizationExperiencedIncident(organization, incident) {
  organization.experienced.add(incident.index)
}

// fun getNations(id: str) {
//   return game.nations
// }

// fun getNationById(id: str) {
//   return game.nations[id]
// }

fun removeCharacterFromNation(character) {
  character.nationId = null
}

fun addCharacterToNation(character, nation) {
  assert(nation.category == kOrganizationCategoryNation)
  character.nationId = nation.id
}

fun removeTerrainFromNation(terrain) {
  if (!terrain.locationId) return

  final nation = game.organizations[terrain.nationId]
  nation.territoryIndexes.remove(terrain.index)
  nation.borderIndexes.add(terrain.index)
  final location = game.locations[terrain.locationId]
  delete location.nationId
  nation.locationIds.remove(location.id)
}

fun addTerrainToNation(terrain, nation) {
  if (terrain.nationId != null) {
    assert(terrain.nationId != nation.id)
    removeTerrainFromNation(terrain)
  }
  assert(nation.territoryIndexes.isEmpty || !nation.territoryIndexes.contains(terrain.index))
  nation.territoryIndexes.add(terrain.index)
  assert(nation.borderIndexes.isEmpty || nation.borderIndexes.contains(terrain.index))
  // print('nation: ${nation.id} expanded to ${terrain.left},${terrain.top}')
  nation.borderIndexes.remove(terrain.index)
  terrain.nationId = nation.id
  if (terrain.locationId) {
    final location = game.locations[terrain.locationId]
    if (location.category == kLocationCategoryCity) {
      if (location.nationId) {
        final oldNation = game.organizations[location.nationId]
        oldNation.locationIds.remove(location.id)
        final oldGov = location.sites.values.singleWhere((site) => site.category == kSiteGovernment)
        oldGov.organizationId = nation.id
      } else {
        final gov = Site(category: kSiteGovernment, locationId: location.id)
        if (nation.capitalId == location.id) {
          location.isCapital = true
          gov.isCapital = true
        }
        gov.organizationId = nation.id
        location.governmentSiteId = gov.id
      }
    }
    location.nationId = nation.id
    if (!nation.locationIds.contains(location.id)) {
      nation.locationIds.add(location.id)
    }
  }
  final neighbors = getMapTileNeighbors(terrain.left, terrain.top, game.world)
  for (final neighbor in neighbors) {
    if (neighbor.nationId != nation.id) {
      nation.borderIndexes.add(neighbor.index)
    }
  }
}
