import '../game.ht'
import 'character/character.ht'
import '../dialog.ht'
import '../name/name.ht' as nameGenerator
import '../l10n.ht'
import 'common.ht'

const kSitePalace = 'palace'
const kSiteGovernment = 'government'
const kSiteResidence = 'residence'
const kSiteOrganization = 'organization'
const kSiteLibrary = 'library'
const kSiteFarmland = 'farmland'
const kSiteMine = 'mine'
const kSiteTimberland = 'timberland'
const kSiteMarket = 'market'
const kSiteShop = 'shop'
const kSiteRestaurant = 'restaurant'
const kSiteArena = 'arena'
const kSiteNursery = 'nursery'
const kSiteWorkshop = 'workshop'
const kSiteAlchemylab = 'alchemylab'
const kSiteSmithshop = 'smithshop'
const kSiteZenyard = 'zenyard'
const kSiteZoo = 'zoo'
const kSiteMaze = 'maze'

struct Site {
  construct ({
    location,
    organizationId,
    category,
    name,
    image,
  }) {
    assert(location != null)
    assert(category != null)

    this.locationId = location.id
    this.organizationId = organizationId ?? location.organizationId
    this.category = category
    this.name = name ?? getLocaleString(category)
    this.image = image ?? 'location/site/${category}.png'

    location.sites[category] = this
  }
}

struct Location {
  construct ({
    terrainIndex,
    category,
    name,
    isPrivate = false,
  }) {
    assert(terrainIndex != null)
    this.terrainIndex = terrainIndex
    this.index = game.locations.length
    if (name) {
      this.name = name
    } else {
      var conflict = false
      do {
        final r = nameGenerator.getLocation(1, category: category)
        this.name = r.first.name
        conflict = game.locations.values.where((element) =>
          element.name == this.name).isNotEmpty
      } while (conflict)
    }
    this.category = category
    this.id = 'location_${this.index}_${this.name}'
    game.locations[this.id] = this
    
    this.isPrivate = isPrivate
    
    // 据点发展度
    // 发展度决定了据点所能拥有的普通居民人口上限，以及所能拥有建筑的数量
    // 最少是 1，最多是 18
    this.development = 1

    // 当前处于这个场景的角色
    this.dwellingCharacterIds = []

    // 居住在这个场景的角色
    // this.residingCharacterIds = Set()

    // 在野角色
    this.residingWildCharacterIds = []
    // 门派角色
    this.residingOrganizedCharacterIds = []

    // 大牢中的角色
    // 如果主角自己进入了监牢，则要通过监牢副本才能离开，并且离开后会进入本据点的敌对名单。
    // 另外两种选择是通过诉讼，或者贿赂离开
    this.jailedCharacterIds = []
    
    // 外门弟子数量，记录在据点数据中，不算做门派属性
    // this.disciple = 0
  
    this.sites = {}

    if (!isPrivate) {
      // 如果是洞天福地，则默认不会显示在地图上，并且也不会有民居场景
      Site(category: kSiteResidence, location: this)
      // 普通居民决定了税收收入，以及外门弟子的数量
      // final minP = maxPopulationOfLocationDevelopment(this.development - 1)
      // final maxP = maxPopulationOfLocationDevelopment(this.development)
      // this.population = Math.randomInt(maxP - minP) + minP
    }

    // 这个据点可以领的任务
    // 可以在官府，或者在民居的告示栏领任务
    this.quests = []

    // 被禁止进入的名单，名单可能重叠
    // 一个人本身在名单上，但他的国家也可能在名单上，并且互相独立
    this.banLists = {
      characterIds: [],
      organizationIds: [],
      nationIds: [],
    }

    // 敌对名单，遇到后将会直接开始战斗，战败会被投入监牢
    this.enemyLists = {
      characterIds: [],
      organizationIds: [],
      nationIds: [],
    }
  }
}

// 每个城市发展度，都会产生新的带有灵根的角色
// 但这些角色并不会立即出现，而是只能依靠探查搜寻的方式找到
// 并且每次找到的数量是有上限的
// fun maxPopulationOfLocationDevelopment(n: int) {
//   final base = (n - 1) * (n - 1) * (n - 1) * 50 + 100

//   return base
// }

fun maxSiteNumberOfLocationDevelopment(n: int) {
  return n + 2
}

/// 定期产生可供选择的有名有姓的人物作为内门弟子
/// 第一次出现时通常为练气境界
/// 产生的内门弟子数量，一开始是 1 个，最高是 8 个
/// 这个数量和外门弟子数量，修炼场的等级
/// 执行训练任务的长老属性和技能，等等都有关系
fun maxNumberOfWildCharacterPerDevelopment() {
  return n * n - n * 2 + 2
}

// 每个据点，每个月会自然增加人口，直到达到上限
// 人口上限会受到掌门的技能，门派的发展度和价值观，以及据点的发展度和建筑所影响
fun increaseLocationPopulationPerMonth(location) {

}

fun addLocation(loc) {
  game.locations[loc.id] = loc
}

fun addLocations(locs: List) {
  engine.info('载入地点数据')
  for (final loc in locs) {
    if (loc.nameId) {
      loc.name = getLocaleString(loc.nameId)
    }
    game.locations[loc.id] = loc
  }
}

fun setCharacterLocationId(character, locationId: str) {
  assert(game.locations.containsKey(locationId))
  if (character.locationId != null) {
    final oldLocation = game.locations[character.locationId]
    oldLocation.dwellingCharacterIds.remove(character.id)
  }
  final location = game.locations[locationId]
  location.dwellingCharacterIds.add(character.id)
  character.locationId = locationId
}

fun getLocationById(id: str) {
  return game.locations[id]
}

fun getLocations() {
  return game.locations
}

fun getSiteById(siteId: str, locationId: str) {
  assert(game.locations.containsKey(locationId))
  final location = game.locations[locationId]
  assert(location.sites.containsKey(siteId))
  return location.sites[siteId]
}

fun onEnteredLocation(id: str) {
  final entity = getEntityById(id)
  if (entity != null) {
    final handler = entity.onEntered
    if (handler is function) {
      handler()
    }
  }
}

fun onEnteredScene(id: str, [extra: str]) {
  final entity = getEntityById(id)
  if (entity != null) {
    final handler = entity.onEntered
    if (handler is function) {
      handler()
    }
  }
}

fun handleSiteInteraction(siteId: str, locationId: str) {
  final site = getSiteById(siteId, locationId)
  if (site != null) {
    when (site.category) {
      'palace' -> _handlePalaceInteraction(site)
      'government' -> _handleGovernmentInteraction(site)
      'residence' -> _handleResidenceInteraction(site)
      'organization' -> _handleOrganizationInteraction(site)
      'library' -> _handleLibraryInteraction(site)
      'farmland' -> _handleFarmlandInteraction(site)
      'mine' -> _handleMineInteraction(site)
      'timberland' -> _handleMineInteraction(site)
      'market' -> _handleMarketInteraction(site)
      'shop' -> _handleShopInteraction(site)
      'restaurant' -> _handleRestaurantInteraction(site)
      'arena' -> _handleArenaInteraction(site)
      'nursery' -> _handleNurseryInteraction(site)
      'workshop' -> _handleWorkshopInteraction(site)
      'alchemylab' -> _handleAlchemylabInteraction(site)
      'smithshop' -> _handleSmithshopInteraction(site)
      'zenyard' -> _handleZenroomInteraction(site)
      'zoo' -> _handleZooInteraction(site)
      'maze' -> _handleMazeInteraction(site)
      else -> {
        engine.error('错误: 未知的地区类型。')
      }
    }
  }
}

// fun searchCharactersAtSite(siteId: str) -> Iterable {
//   return game.characters.where((siteId) {
//     char.currentSiteId == currentSiteId
//   })
// }

fun _handlePalaceInteraction(site) {
  showDialogByLocaleKeys(['visitPalaceDeny'])

  // final location = game.locations[site.locationId]
  // showSelection({
  //   visit: getLocaleString('visit'),
  //   leave: getLocaleString('leave'),
  // }).then((key) {
  //   when (key) {
  //     // 如果选择 leave，直接忽略，什么也不做
  //     'visit' -> {
  //       showDialogByResourceId('visit_palace_deny_entry')
  //     }
  //   }
  // })
}

fun _handleGovernmentInteraction(site) {
  final hero = game.characters[game.heroId]
  final fame = getCharacterFame(hero)
  final location = game.locations[site.locationId]
  final selections = [
    'appeal',
    'tribute',
    'noticeBoard',
    'localExam',
  ]
  if (site.isCapital) {
    selections.add('nationalExam')
  }
  selections.add('visitJail')
  selections.add('leave')
  
  showSelectionByLocaleKeys(selections).then((key) {
    when (key) {
      'appeal' -> {
        showSelectionByLocaleKeys([
          'applyOrganization',
          'applySite',
          'complaintSite',
          'complaintCharacter',
          'appealCharacter',
          'setHome',
          'cancel',
        ]).then((key) {
          when (key) {
            'cancel' -> {
              _handleGovernmentInteraction(site)
            }
            'applyOrganization' -> {
              
            }
            'applySite' -> {
              
            }
            'complaintSite' -> {
              
            }
            'complaintCharacter' -> {
              
            }
            'appealCharacter' -> {
              
            }
            'setHome' -> {
              
            }
          }
        })
      }
      'tribute' -> {
        // TODO: 进贡金钱或者宝物，之后可以选择是否发起请求
      }
      'noticeBoard' -> {
        if (location.quests.isEmpty) {
          showDialogByLocaleKeys(['questEmpty'])
        } else {
          // TODO: 领取任务
        }
      }
      'localExam' -> {
        showDialogByLocaleKeys(['localExamIntro'])
      }
      'nationalExam' -> {
        showDialogByLocaleKeys(['nationalExamIntro'])
      }
      'visitJail' -> {
        final entry = false
        (){
          if (location.jailedCharacterIds.isEmpty) {
            return showDialogByLocaleKeys(['visitJailEmpty'])
          } else {
            if (fame > kFameCheckThreshold) {
              final title = getCharacterTitle(hero)
              return showDialogByStrings(
                [
                  getLocaleString('visitJailEntryRespect', [title + hero.name]),
                ],
                returnValue: true,
              )
            } else {
              return showDialogByLocaleKeys(['visitJailDeny'])
            }
          }
        }().then((value) {
          if (value) {
            
          }
        })
      }
    }
  })
}

fun _handleResidenceInteraction(site) {
  final hero = game.characters[game.heroId]
  final location = game.locations[site.locationId]
  showSelectionByLocaleKeys([
    'visit',
    'leave',
  ]).then((key) {
    when (key) {
      // 如果选择 leave，直接忽略，什么也不做
      'visit' -> {
        if (location.residingWildCharacterIds.isNotEmpty) {
          final ids = location.residingWildCharacterIds.toList()
          ids.remove(game.heroId)
          showVisitCharacterSelection(ids).then((key) {
            if (key != null) {
              handleCharacterInteraction(key)
            }
          })
        } else {
          showDialogByLocaleKeys(['visitEmptyVillage'], character: hero)
        }
      }
    }
  })
}

fun _handleOrganizationInteraction(site) {
  final location = game.locations[site.locationId]
  showSelectionByLocaleKeys({
    'train',
    'learn',
    'visit',
    'leave',
  })
  .then((key) {
    when (key) {
      // 如果选择 leave，直接忽略，什么也不做
      'train' -> {
        // 非本门派修士,需要花钱才能训练
        showDialogByLocaleKeys(['organizationTrainDeny'])
      }
      'learn' -> {
        // 非本门派修士,需要花钱才能学习,而且只能学习二阶或以下的功法
        showDialogByLocaleKeys(['organizationTrainDeny'])
      }
      'visit' -> {
        // 既然有总部，那就一定有可以拜访的成员
        final ids = location.residingOrganizedCharacterIds.toList()
        ids.remove(game.heroId)
        showVisitCharacterSelection(ids).then((key) {
          if (key != null) {
            handleCharacterInteraction(key)
          } else {
            _handleOrganizationInteraction(site)
          }
        })
      }
    }
  })
}

fun _handleLibraryInteraction(site) {

}

fun _handleFarmlandInteraction(site) {

}

fun _handleMineInteraction(site) {

}

fun _handleMarketInteraction(site) {

}

fun _handleShopInteraction(site) {

}

fun _handleRestaurantInteraction(site) {

}

fun _handleArenaInteraction(site) {

}

fun _handleNurseryInteraction(site) {

}

fun _handleWorkshopInteraction(site) {

}

fun _handleAlchemylabInteraction(site) {

}

fun _handleSmithshopInteraction(site) {

}

fun _handleZenroomInteraction(site) {

}

fun _handleZooInteraction(site) {

}

fun _handleMazeInteraction(site) {

}