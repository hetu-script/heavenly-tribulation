import '../game.ht'
import 'character.ht'

/// 历史事件记录
struct Incident {
  construct ({
    content: str,
    
    isPublic = true,
    isGlobal = false,

    order = 0,
    ideal = 0,
    good = 0,
    
    subjectIds: str,
    objectIds: List = [],
    withItem: str,
    toItem: str,
    locationId: str,
    terrainIndex: int,
  }) {
    assert(content != null && content.isNotEmpty)
    assert(subjectIds != null && subjectIds.isNotEmpty)

    this.index = history.length
    this.content = content
    this.timestamp = game.timestamp
    this.order = order
    this.ideal = ideal
    this.good = good
    this.subjectIds = subjectIds
    this.objectIds = objectIds
    this.withItem = withItem
    this.toItem = toItem
    this.locationId = locationId
    this.terrainIndex = terrainIndex

    for (final id in subjectIds) {
      final subject = game.characters[id]
      subject.memory.experienced.add(this.index)
    }

    for (final id in objectIds) {
      final object = game.characters[id]
      object.memory.experienced.add(this.index)
    }

    this.isPublic = isPublic
    this.isGlobal = isGlobal

    if (isPublic) {
      if (isGlobal) {
        for (final char of game.characters) {
          if (char.id in subjectIds) continue
          characterHeardOfIncident(char, this)
        }
      } else if (locationId) {
        final location = game.locations[locationId]
        for (final id in location.dwellingCharacterIds) {
          if (id in subjectIds) continue
          if (objectIds && id in objectIds) continue
          final char = games.characters[id]
          characterHeardOfIncident(char, this)
        }
      }
    }

    history.add(this)
  }
}

fun getIncidentByIndex(index: int) {
  return history[index]
}
