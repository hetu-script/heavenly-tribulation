import '../game.ht'
import 'character.ht'

/// 历史事件记录
struct Incident {
  construct ({
    content: str,
    
    isPrivate: bool,
    isGlobal: bool,

    order = 0,
    ideal = 0,
    good = 0,
    
    subjectIds,
    objectIds: List = [],
    witnessIds: List = [],
    withItem: str,
    toItem: str,
    locationId: str,
    terrainIndex: int,
  }) {
    assert(content != null && content.isNotEmpty)
    assert(subjectIds != null && subjectIds.isNotEmpty)

    this.index = history.length
    this.content = content
    this.timestamp = game.timestamp
    this.order = order
    this.ideal = ideal
    this.good = good
    this.subjectIds = subjectIds
    this.objectIds = objectIds
    this.witnessIds = witnessIds
    this.withItem = withItem
    this.toItem = toItem
    this.locationId = locationId
    this.terrainIndex = terrainIndex

    for (final id in subjectIds) {
      final char = game.characters[id]
      characterExperiencedIncident(char, this)
    }

    for (final id in objectIds) {
      final char = game.characters[id]
      characterExperiencedIncident(char, this)
    }

    for (final id in witnessIds) {
      final char = game.characters[id]
      characterKnownIncident(char, this, witnessed: true)
    }

    this.isPrivate = isPrivate
    this.isGlobal = isGlobal

    if (isGlobal) {
      for (final char of game.characters) {
        if (char.id in subjectIds || char.id in objectIds || char.id in witnessIds) continue
        characterKnownIncident(char, this)
      }
    } else if (!isPrivate) {
      if (locationId) {
        final location = game.locations[locationId]
        for (final id in location.dwellingCharacterIds) {
          if (id in subjectIds || id in objectIds || id in witnessIds) continue
          final char = game.characters[id]
          characterKnownIncident(char, this)
        }
      }
    }

    history.add(this)
  }
}

fun getIncidentByIndex(index: int) {
  return history[index]
}
