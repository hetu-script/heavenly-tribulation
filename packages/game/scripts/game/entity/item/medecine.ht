import '../effect.ht'
import 'name/material_name.ht'
import '../../random.ht'

// 方剂和药品的效果
final medicineEffects = [
  Effect(
    id: kEffectRestoreLife,
    description: kEffectRestoreLife,
    category: kEffectCategoryConsume,
    values: [
      EffectValue(
        value: 10,
      ),
    ],
  ),
  Effect(
    id: kEffectHealInjury,
    description: kEffectHealInjury,
    category: kEffectCategoryConsume,
    values: [
      EffectValue(
        value: 10,
      ),
    ],
  ),
  Effect(
    id: kEffectHealInfection,
    description: kEffectHealInfection,
    category: kEffectCategoryConsume,
    values: [
      EffectValue(
        value: 10,
      ),
    ],
  ),
]

// 方剂
struct Medicine {
  construct ({
    name,
    rarity = kCommon,
    value = 5,
    icon,
    creatorId,
    createdTime,
    description = '',
    stackSize = 1,
    effects,
  }) {
    this.name = name
    this.rarity = rarity
    if (!name) {
      final r = generateConsumableName(category: kEntityConsumableKindMedicine, rarity: this.rarity)
      this.name = r.name
      this.rarity ??= r.rarity
    }
    
    this.entityType = kEntityTypeItem // 人物、地点、物品、技能等等
    this.category = kEntityCategoryConsumable // 武器、防护、斗技、玄功等等
    this.kind = kEntityConsumableKindMedicine // 枪、剑、斧等等
    this.value = value

    this.creatorId = creatorId
    this.createdTime = createdTime

    this.description = description
    this.stackSize = stackSize
    this.color = kRarity[this.rarity].color
    this.id = this.rarity != kCommon ? 'medicine_${Hash.uid4(2)}_${this.name}' : 'medicine_${this.name}'
    this.icon = 'icon/item/consumable/medicine.png'
    
    this.isConsumable = true
    this.effects = {}
    if (effects is {}) {
      this.effects.assign(effects)
    } else {
      this.effects[kEffectRestoreLife] = Effect(
        id: kEffectRestoreLife,
        description: kEffectRestoreLife,
        category: kEffectCategoryConsume,
        values: [
          EffectValue(
            value: 80,
          ),
        ],
      )
    }
  }
}

const _kMedicineIngridentIconCount = 3

// 药材
struct MedicineIngrident {
  construct ({
    name,
    rarity = kCommon,
    value = 1,
    description = '',
    stackSize = 1,
    effect,
  }) {
    this.name = name
    this.rarity = rarity
    if (!name) {
      final r = generateConsumableName(category: kEntityMaterialKindHerb, rarity: this.rarity)
      this.name = r.name
      this.rarity ??= r.rarity
    }

    this.entityType = kEntityTypeItem // 人物、地点、物品、技能等等
    this.category = kEntityCategoryConsumable // 武器、防护、斗技、玄功等等
    this.kind = kEntityMaterialKindHerb // 枪、剑、斧等等
    this.value = 5

    this.description = description
    this.stackSize = stackSize
    this.color = kRarity[this.rarity].color
    this.id = 'medicine_${this.name}'
    this.icon = 'icon/item/consumable/herb/${random.nextInt(_kMedicineIngridentIconCount)}.png'

    this.isConsumable = true
    this.effects = {}
    this.effects[effect.id] = effect
  }
}
