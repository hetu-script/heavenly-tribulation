import '../../generator/name/name.ht' as nameGenerator
import '../constants.ht'
import 'constants.ht'
import '../../util.ht'
import '../../game.ht'
import '../../l10n.ht'

final _kEffects = ['parry', 'counter']

final kBeastWeaponKindClaw = 'claw'
final kBeastWeaponKindFang = 'fang'


final _kBeastWeaponKinds = {
  'claw': {
    icon: 'icon/item/claw.png',
    attributes: {
      speed: 7,
      life: 200,
      damage: 18,
      criticalDamageHits: 4,
      criticalDamageMultiply: 2,
    },
  },
  'fang': {
    icon: 'icon/item/fang.png',
    attributes: {
      speed: 10,
      life: 200,
      damage: 25,
      criticalDamageHits: 4,
      criticalDamageMultiply: 3,
    },
  },
}

// 野兽身上的身体部件，在原本的野兽身上时，作为一种无法去掉的装备存在
// 在击杀野兽之后，以物品形式存在，此时可以重新装备和取下
struct BeastWeapon {
  construct ({
    beastName,
    rarity,
    value,
    icon,
    description,
    kind,
    attributes,
  }) {
    assert(beastName != null)
    assert(kind != null)
    this.beastName = beastName
    this.kind = kind
    this.name = beastName + getLocaleString(kind)
    this.id = 'beast_bodypart_${Hash.uid4(2)}_${this.name}'
    this.rarity = rarity ?? kRarity.common.rarity

    this.entityType = kEntityTypeItem // 人物、地点、物品、技能等等
    this.category = kEntityCategoryWeapon // 武器、防护、斗技、玄功等等
    this.equipType = kEquipTypeOffense // 装备类型：进攻、如果没有就是不可装备
    this.isBodyPart = true
    this.value = value ?? 0
    this.description = description ?? ''

    this.icon = _kBeastWeaponKinds[this.kind].icon
    this.attributes = {
      ..._kBeastWeaponKinds[this.kind].attributes,
      effects: [],
    }

    if (attributes) {
      this.attributes.assign(attributes)
    }

    calculateItemStats(this)
  }
}

// struct BeastArmor {
//   construct ({

//   }) {

//   }
// }