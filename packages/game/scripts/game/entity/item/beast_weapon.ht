import '../../generator/name/name.ht' as nameGenerator
import '../constants.ht'
import 'constants.ht'
import '../../util.ht'
import '../../game.ht'

final _kEffects = ['parry', 'counter']

final _kBeastBodyPartNames = {
  fang: [ '牙', '齿' ],
  horn: [ '角' ],
  claw: [ '爪' ],
  hoof: [ '蹄' ],
  eye: [
    '目',
    '眼',
    '睛',
    '眼珠',
  ],
  tail: [ '尾' ],
  scale: [ '鳞' ],
  skin: [ '皮' ],
  feather: [ '羽' ],
  wings: [ '翅' ],
}

final _kBeastWeaponKinds = {
  // 伤害一般，耐久低，出招速度一般，收招速度快
  'claw': {
    icon: 'icon/item/sabre.png',
    attributes: {
      speed: 10,
      life: 200,
      damage: 30,
      criticalDamageHit: 7,
      criticalDamageMultiply: 4,
    },
  },
  // 伤害一般，耐久低，出招速度一般，收招速度快
  'fang': {
    icon: 'icon/item/sword.png',
    attributes: {
      speed: 10,
      life: 200,
      damage: 30,
      criticalDamageHit: 7,
      criticalDamageMultiply: 3.5,
    },
  },
}

// 野兽身上的身体部件，在原本的野兽身上时，作为一种无法去掉的装备存在
// 在击杀野兽之后，以物品形式存在，此时可以重新装备和取下
struct BeastWeapon {
  construct ({
    name,
    rarity,
    value,
    icon,
    description,
    kind,
    attributes,
  }) {
    this.name = name
    this.entityType = kEntityTypeItem // 人物、地点、物品、技能等等
    this.category = kEntityCategoryBeastBodyPart // 武器、防护、斗技、玄功等等
    this.kind = kind
    this.equipType = kEquipTypeOffense // 装备类型：进攻、如果没有就是不可装备
    this.rarity = rarity
    this.value = value ?? 0
    this.description = description ?? ''
    this.unequippable = true

    if (!this.name) {
      final r = nameGenerator.getTalisman(1, category: this.kind, rarity: this.rarity).first
      this.name = r.name
      this.rarity ??= r.rarity 
    }
    this.id = 'beast_bodypart_${Hash.uid4(2)}_${this.name}'
    this.icon = _kBeastWeaponKinds[this.kind].icon
    this.attributes = {
      ..._kBeastWeaponKinds[this.kind].attributes,
      effects: [],
    }

    if (attributes) {
      this.attributes.assign(attributes)
    }

    calculateItemStats(this)
  }
}

struct BeastArmor {
  construct ({

  }) {

  }
}