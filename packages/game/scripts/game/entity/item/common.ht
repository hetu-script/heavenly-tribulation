import '../common.ht'
import '../effects.ht'

const kItemDefaultIcon = 'assets/images/unknown_item.png'
// final kDefaultItemDescription = getLocaleString('defaultItemDescription')

const kUnknownItemIcon = 'icon/unknown_item.png'

final kRarity2ItemLevels = {
  common: 10, // common 白
  uncommon: 20, // uncommon 灰
  rare: 30, // rare 蓝
  epic: 40, // epic 紫
  legendary: 50, // legendary 橙
  mythic: 60, // mythic 金
  exotic: 70, // exotic 虹
}

fun calculateItemStats(item) {
  item.stats = item.attributes.clone()
}

fun characterAcquireMoney(character, value) {
  assert(value > 0)
  character.money += value
  final incidentContent = getLocaleString('characterAcquireMoney', [ character.name, value ])
  Incident(
    content: incidentContent,
    subjectIds: [character.id],
    isPrivate: true,
  )
}

// 角色获得物品，此函数并不检查物品本身是否在其他角色的物品栏中
fun characterAcquire(character, item) {
  if (item.rarity == kCommon && character.inventory.containsKey(item.id)) {
    character.inventory[item.id].stackSize += 1
  } else {
    character.inventory[item.id] = item
  }

  final incidentContent = getLocaleString('characterAcquiredItem', [
    character.name,
    item.name,
  ])
  Incident(
    content: incidentContent,
    subjectIds: [character.id],
    isPrivate: true,
  )
}

fun characterLearn(character, item) {
  character.skills[item.id] = item
}

// 使用食物或者丹药
// 返回值代表是否使用成功
// 此函数允许对一个不在物品栏中的物品调用
fun characterConsume(character, item) {
  if (!item.isConsumable) {
    engine.info('${item.name} 无法食用。')
    return false
  }

  if (character.inventory.containsKey(item.id)) {
    if (item.rarity == kCommon) {
      if (item.stackSize > 1) {
        --item.stackSize
      }
    } else {
      delete character.inventory[item.id]
    }
  }

  if (item.effects) {
    for (final effect in item.effects) {
      when (effect.name) {
        kEffectRestoreLife -> {
          character.stats.life += effect.values.first.value
        }
        kEffectRestoreChi -> {
          character.stats.chi += effect.values.first.value
        }
        kEffectRestoreStamina -> {
          character.stats.stamina += effect.values.first.value
        }
      }
    }
  }

  var incidentContent
  when (item.kind) {
    kEntityElixirKindBeverage -> {
      incidentContent = getLocaleString('characterDrankBeverage', [
        character.name,
        item.name,
      ])
    }
    kEntityElixirKindMedicine -> {
      incidentContent = getLocaleString('characterTakeMedicine', [
        character.name,
        item.name,
      ])
    }
    else -> {
      incidentContent = getLocaleString('characterAteFood', [
        character.name,
        item.name,
      ])
    }
  }

  Incident(
    content: incidentContent,
    subjectIds: [character.id],
    isPrivate: true,
  )
  
  return true
}

// 法宝和技能都可以装备，只要类型符合
// 返回值代表是否装备成功
// 如果对一个不在物品栏中的物品调用，会先将其加入物品栏
// {
//   id,
//   category,
//   kind,
//   supports,
// }
fun characterEquip(character, item, { index }) -> bool {
  if (!item.isEquippable) {
    engine.info('${item.name} 无法装备。')
    return false
  }
  if (item.equippedPosition) {
    engine.info('${item.name} 已经装备在身上了。')
    return false
  }
  var equipData = {
    id: item.id,
    entityType: item.entityType,
    category: item.category, // 主类型：武器、斗技等
    kind: item.kind, // 次类型：剑、拳法等
    equipType: item.equipType,
    life: item.stats.life,
  }
  when (item.entityType) {
    kEntityTypeItem -> {
      if (!character.inventory[item.id]) characterAcquire(character, item)
    }
    kEntityTypeSkill -> {
      if (!character.skills[item.id]) characterLearn(character, item)
    }
  }
  
  when (item.equipType) {
    // 斗技、武器、攻击法宝等
    kEquipTypeOffense -> {
      equipData.supports = []
      // 如果有空位就装备在空位上
      if (!index) {
        for (final i in range(1, kOffenseEquipmentMax)) {
          if (!character.equipments[kEquipTypeOffense][i]) {
            character.equipments[kEquipTypeOffense][i] = equipData
            item.equippedPosition = i
            return true
          }
        }
        // 否则替换掉第一个空位
        index = 1
      }
      final oldEquipData = character.equipments[kEquipTypeOffense][1]
      final oldItem = getEquippedItem(equipData, character)
      delete oldItem.equippedPosition
      character.equipments[kEquipTypeOffense][index] = equipData
      if (equipData.category == oldItem.category && equipData.kind == oldItem.kind) {
        equipData.supports = oldEquipData.supports
      } else {
        for (final support in equipData.supports) {
          delete support.equippedPosition
        }
      }
      item.equippedPosition = index
      return true
    }
    // 剑法、心诀等支持型技能
    kEquipTypeSupport -> {
      for (final i in range(1, kOffenseEquipmentMax)) {
        final oldEquipData = character.equipments[kEquipTypeOffense][i]
        if (oldEquipData && oldEquipData.category == data.category &&
            oldEquipData.kind == data.kind) {
          if (oldEquipData.supports.length < _kSupportEquipmentMax - 1) {
            oldEquipData.supports.add(equipData)
          } else {
            // 移除旧装备
            final item = getEquippedItem(oldEquipData.supports.first, character)
            delete item.equippedPosition
            oldEquipData.supports.first = equipData
          }
          item.equippedPosition = i
          return true
        }
      }
      return false
    }
    // 内功、辅助法宝等
    kEquipTypeArcane -> {
      equipData.supports = []
      // 如果有空位就装备在空位上
      if (!index) {
        for (final i in range(1, _kArcaneEquipmentMax)) {
          if (!character.equipments[kEquipTypeArcane][i]) {
            character.equipments[kEquipTypeArcane][i] = equipData
            item.equippedPosition = i
            return true
          }
        }
        // 否则替换掉第一个空位
        index = 1
      }
      final oldEquipData = character.equipments[kEquipTypeArcane][1]
      final oldItem = getEquippedItem(equipData, character)
      delete oldItem.equippedPosition
      character.equipments[kEquipTypeArcane][index] = equipData
      if (equipData.category == oldItem.category && equipData.kind == oldItem.kind) {
        equipData.supports = oldEquipData.supports
      } else {
        for (final support in equipData.supports) {
          delete support.equippedPosition
        }
      }
      item.equippedPosition = index
      return true
    }
    // 护甲、轻功等
    kEquipTypeProtect, kEquipTypeManeuver -> {
      equipData.supports = []
      // 如果有空位就装备在空位上
      if (!character.equipments[item.equipType]) {
        character.equipments[item.equipType] = equipData
        item.equippedPosition = 1
        return true
      }
      // 否则替换掉
      final oldEquipData = character.equipments[item.equipType]
      final oldItem = getEquippedItem(equipData, character)
      delete oldItem.equippedPosition
      character.equipments[item.equipType] = equipData
      if (equipData.category == oldItem.category && equipData.kind == oldItem.kind) {
        equipData.supports = oldEquipData.supports
      }
      item.equippedPosition = 1
      return true
    }
  }
}

fun characterUnequip(item, character) {
  assert(item.equippedPosition != null)
  when (item.equipType) {
    // 斗技、武器、法宝等
    kEquipTypeOffense -> {
      delete character.equipments[kEquipTypeOffense][item.equippedPosition]
    }
    // 剑法、心诀等支持型技能
    kEquipTypeSupport -> {
      character.equipments[kEquipTypeOffense][item.equippedPosition]
        .supports.removeWhere((equipData) => equipData.id == item.id)
    }
    kEquipTypeArcane -> {
      delete character.equipments[kEquipTypeArcane][item.equippedPosition]
    }
    // 护甲、轻功等
    kEquipTypeProtect, kEquipTypeManeuver -> {
      delete character.equipments[item.equipType]
    }
  }
}
