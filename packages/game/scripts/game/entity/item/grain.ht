import '../../name/name.ht'
import '../common.ht'
import 'common.ht'
import '../effect.ht'
import 'name/material_name.ht'

struct Grain {
  construct ({
    name,
    rarity = kCommon,
    value = 1,
    icon,
    description = '',
    stackSize = 1,
    effectValue = 10,
    effects,
  }) {
    this.name = name
    this.rarity = rarity
    if (!name) {
      final r = generateMaterialName(category: kEntityConsumableKindMedicine, rarity: this.rarity)
      this.name = r.name
      this.rarity ??= r.rarity
    }

    this.rarity = rarity
    this.entityType = kEntityTypeItem // 人物、地点、物品、技能等等
    this.category = kEntityCategoryMaterial // 武器、防护、斗技、玄功等等
    this.kind = kEntityResourceKindFoodIngrident // 枪、剑、斧等等
    this.name = getLocaleString(name)
    this.value = value

    this.description = description
    this.stackSize = stackSize
    this.color = kRarity[this.rarity].color
    this.id = 'resource_${this.name}'
    this.icon = 'icon/item/consumable/${name}.png'

    this.isConsumable = true
    this.effects = {}
    if (effects is {}) {
      this.effects.assign(effects)
    } else {
      this.effects[kEffectRestoreStamina] = Effect(
        id: kEffectRestoreStamina,
        description: kEffectRestoreStamina,
        category: kEffectCategoryConsume,
        values: [
          EffectValue(
            value: effectValue,
          ),
        ],
      )
    }
  }

  construct meat : this.foodIngrident(
    name: 'meat',
    value: 4,
    effectValue: 10,
  ) {}

  construct riverFish : this.foodIngrident(
    name: 'riverFish',
    value: 7,
    effectValue: 20,
  ) {}

  construct seaFish : this.foodIngrident(
    name: 'seaFish',
    value: 14,
    effectValue: 35,
  ) {}

  construct crab : this.foodIngrident(
    name: 'crab',
    value: 12,
    effectValue: 25,
  ) {}

  construct shrimp : this.foodIngrident(
    name: 'crab',
    value: 12,
    effectValue: 25,
  ) {}
}
