import '../../../name/name.ht' as nameGenerator
import '../../common.ht'
import '../common.ht'
import '../../../util.ht'
import '../../../game.ht'
import '../../effect.ht'

const kShieldKind = 'shield'

const _kShieldDefendProbability = 0.6
const _kShieldDefendPercentage = 0.8

struct Shield {
  construct ({
    name,
    rarity,
    value,
    icon,
    creatorId,
    createdTime,
    description,
    inscription,
    kind,
    attributes,
  }) {
    this.name = name
    this.entityType = kEntityTypeItem // 人物、地点、物品、技能等等
    this.category = kEntityCategoryProtect // 武器、防护、斗技、玄功等等
    this.kind = kShieldKind
    this.isEquippable = true
    this.equipType = kEquipTypeDefense // 装备类型：如果没有就是不可装备
    this.rarity = rarity ?? kCommon
    this.value = value ?? 25
    this.stackSize = 1
    this.creatorId = creatorId
    this.createdTime = createdTime ?? game.timestamp
    this.description = description ?? ''
    this.inscription = inscription ?? ''
    if (!this.name) {
      final r = nameGenerator.getTalisman(1, category: this.kind, rarity: this.rarity).first
      this.name = r.name
    }
    this.color = kRarity[this.rarity].color
    this.id = this.rarity != kCommon ? 'shield_${Hash.uid4(2)}_${this.name}' : 'shield_${this.name}'
    
    this.icon = 'icon/item/shield.png'
    this.attributes = {
      life: 150,
    }

    if (attributes) {
      this.attributes.assign(attributes)
    }

    this.effects = [
      {
        name: kEffectDefend,
        description: kEffectDefend,
        values: [
          {
            value: _kShieldDefendProbability,
            type: kEffectValueTypePercentage,
          },
          {
            value: _kShieldDefendPercentage,
            type: kEffectValueTypePercentage,
          },
        ],
      }
    ]

    calculateItemStats(this)
  }
}
