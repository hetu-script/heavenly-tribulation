import '../../../name/name.ht'
import '../../common.ht'
import '../common.ht'
import '../../../util.ht'
import '../../../game.ht'
import '../../../l10n.ht'

final kBeast = 'beast'
final kBeastWeaponKindClaw = 'claw'
final kBeastWeaponKindFang = 'fang'

final kBeastWeaponKinds = {
  'claw': {
    icon: 'icon/item/claw.png',
    damageType: kDamageTypeSlash,
    attributes: {
      speed: 7,
      life: 200,
      damage: 18,
      criticalDamageHits: 4,
      criticalDamageMultiply: 2,
    },
  },
  'fang': {
    icon: 'icon/item/fang.png',
    damageType: kDamageTypePierce,
    attributes: {
      speed: 10,
      life: 200,
      damage: 25,
      criticalDamageHits: 4,
      criticalDamageMultiply: 3,
    },
  },
}

// 野兽身上的身体部件，在原本的野兽身上时，作为一种无法去掉的装备存在
// 在击杀野兽之后，以物品形式存在，此时可以重新装备和取下
struct BeastWeapon {
  construct ({
    beastName,
    kind,
    rarity,
    value,
    icon,
    description,
    attributes,
  }) {
    assert(beastName != null)
    assert(kind != null)
    this.entityType = kEntityTypeItem
    this.category = kEntityCategoryWeapon
    this.beastName = beastName
    this.kind = kind
    this.isEquippable = true
    this.equipType = kEquipTypeOffense // 装备类型：进攻、如果没有就是不可装备
    this.rarity = rarity ?? kCommon
    if (this.rarity == kCommon) {
      this.name = getLocaleString(kBeast) + getLocaleString(kind)
    } else {
      this.name = beastName + getLocaleString(kind)
    }
    this.color = kRarity[this.rarity].color
    this.id = 'beast_bodypart_${Hash.uid4(2)}_${this.name}'
    this.isBodyPart = true
    this.value = value ?? 30
    this.stackSize = 1
    this.description = description ?? ''

    this.icon = kBeastWeaponKinds[this.kind].icon
    this.attributes = {
      ...kBeastWeaponKinds[this.kind].attributes,
    }
    this.damageType = kBeastWeaponKinds[this.kind].damageType
    this.effects = {}

    if (attributes) {
      this.attributes.assign(attributes)
    }

    calculateItemStats(this)
  }
}

// struct BeastArmor {
//   construct ({

//   }) {

//   }
// }