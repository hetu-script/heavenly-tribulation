import '../../effect.ht'
import '../../../random.ht'
import '../../common.ht'
import '../../../name/material.ht'

const _kMedicineIngridentIconCount = 3

final _kMaterialKinds = [
  'grain',
  'fruit',
  'fish',
  'vegetable',
  'herb',
  'wood',
  'ore',
  // 'water',
  // 'energy',
  // 'spirit',
]

// 可食用的材料：谷物、蔬菜、水果、药材、溶液、鱼
// 不可食用的材料：木料、矿石、能量、灵体
struct Material {
  construct ({
    kind,
    name,
    rarity,
    value = 1,
    icon,
    description = '',
    stackSize = 1,
    isConsumable,
    effects,
  }) {
    this.kind = kind ?? random.nextIterable(_kMaterialKinds)

    this.name = name
    this.rarity = rarity
    if (!name) {
      final randomName = generateMaterialName(category: this.kind, rarity: this.rarity)
      this.name = randomName.name
      this.rarity ??= randomName.rarity
    }

    this.entityType = kEntityTypeItem // 人物、地点、物品、技能等等
    this.category = kEntityCategoryMaterial // 武器、防护、斗技、玄功等等
    this.value = value

    this.description = description
    this.stackSize = stackSize
    this.color = kRarity[this.rarity].color
    this.id = this.rarity != kCommon ? 'consumable_${Hash.uid4(2)}_${this.name}' : 'consumable_${this.name}'
    this.icon = icon ?? 'icon/item/material/${kind}.png'

    this.isConsumable = isConsumable
    this.effects = {}
    if (effects is {}) {
      this.effects.assign(effects)
    } else {
      final predefinedEffects = kEffects[this.kind]
      if (predefinedEffects is List) {
        final effect = random.nextIterable(predefinedEffects)
        if (effect) {
          this.effects[effect.id] = effect
        }
      }
    }
  }

  construct grain ({
    rarity,
    value = 2,
    icon,
    description = '',
    stackSize = 1,
    effects,
  }) : this(
    kind: kEntityMaterialKindGrain,
    rarity: rarity,
    value: value,
    icon: icon,
    description: description,
    stackSize: stackSize,
    effects: effects,
  ) {}

  construct fruit ({
    rarity,
    value = 5,
    icon,
    description = '',
    stackSize = 1,
    effects,
  }) : this(
    kind: kEntityMaterialKindFruit,
    rarity: rarity,
    value: value,
    icon: icon,
    description: description,
    stackSize: stackSize,
    effects: effects,
  ) {}

  construct fish ({
    rarity,
    value = 12,
    icon,
    description = '',
    stackSize = 1,
    effects,
  }) : this(
    kind: kEntityMaterialKindFish,
    rarity: rarity,
    value: value,
    icon: icon,
    description: description,
    stackSize: stackSize,
    effects: effects,
  ) {}

  construct vegetable ({
    rarity,
    value = 4,
    icon,
    description = '',
    stackSize = 1,
    effects,
  }) : this(
    kind: kEntityMaterialKindVegetable,
    rarity: rarity,
    value: value,
    icon: icon,
    description: description,
    stackSize: stackSize,
    effects: effects,
  ) {}

  construct herb ({
    rarity,
    value = 15,
    icon,
    description = '',
    stackSize = 1,
    effects,
  }) : this(
    kind: kEntityMaterialKindHerb,
    rarity: rarity,
    value: value,
    icon: icon,
    description: description,
    stackSize: stackSize,
    effects: effects,
  ) {}

  construct wood ({
    rarity,
    value = 4,
    icon,
    description = '',
    stackSize = 1,
    effects,
  }) : this(
    kind: kEntityMaterialKindWood,
    rarity: rarity,
    value: value,
    icon: icon,
    description: description,
    stackSize: stackSize,
    effects: effects,
  ) {}

  construct ore ({
    rarity,
    value = 7,
    icon,
    description = '',
    stackSize = 1,
    effects,
  }) : this(
    kind: kEntityMaterialKindOre,
    rarity: rarity,
    value: value,
    icon: icon,
    description: description,
    stackSize: stackSize,
    effects: effects,
  ) {}
}

  