import '../../effect.ht'
import '../../../random.ht'
import '../../common.ht'
import 'material_name.ht'

const _kMedicineIngridentIconCount = 3

// 药材
struct Material {
  construct ({
    kind,
    name,
    rarity = kCommon,
    value = 1,
    icon,
    description = '',
    stackSize = 1,
    isConsumable,
    effects,
  }) {
    assert(kind != null)
    this.name = name
    this.rarity = rarity
    if (!name) {
      final r = generateMaterialName(category: kind, rarity: this.rarity)
      this.name = r.name
      this.rarity ??= r.rarity
    }

    this.entityType = kEntityTypeItem // 人物、地点、物品、技能等等
    this.category = kEntityCategoryMaterial // 武器、防护、斗技、玄功等等
    this.kind = kind // 枪、剑、斧等等
    this.value = 5

    this.description = description
    this.stackSize = stackSize
    this.color = kRarity[this.rarity].color
    this.id = 'material_${this.name}'
    this.icon = icon ?? 'icon/item/material/${kind}.png'

    this.isConsumable = isConsumable
    this.effects = {}
    if (effects is {}) {
      this.effects.assign(effects)
    } else {
      final effect ??= random.nextIterable(kEffects[kind])
    }
  }

  construct grain ({
    rarity = kCommon,
    value = 1,
    icon,
    description = '',
    stackSize = 1,
    effects,
  }) : this(
    kind: kEntityMaterialKindGrain,
    rarity: rarity,
    value: value,
    icon: icon,
    description: description,
    stackSize: stackSize,
    effects: effects,
  ) {}

  construct herb ({
    rarity = kCommon,
    value = 1,
    icon,
    description = '',
    stackSize = 1,
    effects,
  }) : this(
    kind: kEntityMaterialKindHerb,
    rarity: rarity,
    value: value,
    icon: icon,
    description: description,
    stackSize: stackSize,
    effects: effects,
  ) {}
}
