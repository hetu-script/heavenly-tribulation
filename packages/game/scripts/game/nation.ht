import 'game.ht'
import 'generator/random_names/random_names.ht' as randomNames

const _kNation = '国'

struct Nation {
  // 本国统治的区块
  final territoryIndexes = Set()
  // 国界线相邻的外国区块
  final borderIndexes = Set()
  // 本国统治的据点
  final locationIds = Set()
  // 本国的门派
  final organizationIds = Set()
  
  construct ({
    name,
    capitalId,
  }) {
    this.index = game.nations.length
    if (name) {
      this.name = name + _kNation
    } else {
      final names = randomNames.getNation(1)
      this.name = names.first.name
    }
    this.id = 'nation_${this.index}_${this.name}'
    this.color = Math.randomBrightColorHex()
    
    this.capitalId = capitalId

    game.nations[this.id] = this
  }
}

fun getNations(id: str) {
  return game.nations
}

fun getNationById(id: str) {
  return game.nations[id]
}

fun removeTerrainFromNation(terrain) {
  if (!terrain.locationId) return

  final nation = game.nations[terrain.nationId]
  nation.territoryIndexes.remove(terrain.index)
  nation.borderIndexes.add(terrain.index)
  final location = game.locations[terrain.locationId]
  location.nationId = null
  nation.locationIds.remove(location.id)
}

fun addTerrain2Nation(nationId, terrain) {
  assert(game.nations.owns(nationId))
  if (terrain.nationId != null) {
    assert(terrain.nationId != nationId)
    removeTerrainFromNation(terrain)
  }
  final nation = game.nations[nationId]
  assert(nation.territoryIndexes.isEmpty || !nation.territoryIndexes.contains(terrain.index))
  nation.territoryIndexes.add(terrain.index)
  assert(nation.borderIndexes.isEmpty || nation.borderIndexes.contains(terrain.index))
  // print('nation: ${nation.id} expanded to ${terrain.left},${terrain.top}')
  nation.borderIndexes.remove(terrain.index)
  terrain.nationId = nation.id
  if (terrain.locationId) {
    final location = game.locations[terrain.locationId]
    if (location.nationId) {
      final oldNation = game.nations[location.nationId]
      oldNation.locationIds.remove(location.id)
    }
    location.nationId = nation.id
    assert(!nation.locationIds.contains(location.id))
    nation.locationIds.add(location.id)
  }
  final neighbors = getMapTileNeighbors(terrain.left, terrain.top)
  for (final neighbor in neighbors) {
    if (neighbor.nationId != nation.id) {
      nation.borderIndexes.add(neighbor.index)
    }
  }
}
