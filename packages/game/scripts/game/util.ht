fun getChance2Hit(accuracy, evasion) {
  final uncapped = accuracy * 1.15 / (accuracy + Math.pow(evasion * 0.2, 0.9))
  return Math.min(Math.max(uncapped, 0.05), 1)
}

/// 双曲线渐近线随机数
/// 取值离normal越远，随机出的可能性越低
/// 公式: y=\frac{6x-6}{5x-6}
fun hyperbola([normal = 1.0]) {
  final x = Math.random()
  return ((x * 6 - 6) / (5 * x - 6)) * normal
}

final kRarity = {
  common: {
    // common 灰
    color: '#222A35',
    probability: 1.0,
    text: '凡品',
  },
  uncommon:{
    // uncommon 白
    color: '#CCCCCC',
    probability: 0.35,
    text: '良品',
  },
  rare:{
    // rare 蓝
    color: '#00A6A9',
    probability: 0.15,
    text: '上品',
  },
  epic: {
    // epic 紫
    color: '#804DC8',
    probability: 0.075,
    text: '极品',
  },
  legendary: {
    // legendary 橙
    color: '#C5C660',
    probability: 0.012,
    text: '秘宝',
  },
  mythic: {
    // mythic 金
    color: '#F28234',
    probability: 0.03, 
    text: '灵宝',
  },
  exotic: {
    // exotic 虹
    color: '#C65043',
    probability: 0.005, 
    text: '古宝',
  },
}

fun getRarity([max = 1.0]) {
  assert(0 < max && max <= 1.0)
  var rarity
  final value = Math.random() * max
  if (value < kRarity.exotic.probability) {
    rarity = 'exotic'
  } else if (value < kRarity.mythic.probability) {
    rarity = 'mythic'
  } else if (value < kRarity.legendary.probability) {
    rarity = 'legendary'
  } else if (value < kRarity.epic.probability) {
    rarity = 'epic'
  } else if (value < kRarity.rare.probability) {
    rarity = 'rare'
  } else if (value < kRarity.uncommon.probability) {
    rarity = 'uncommon'
  } else {
    rarity = 'common'
  }
  return { rarity, value }
}

fun getRarityValue(valueMap) {
  final r = getRarity()
  final v = valueMap[r.rarity]
  return (v is Iterable) ? v.random : v
}
