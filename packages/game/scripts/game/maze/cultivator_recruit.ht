import '../tile/tilemap.ht'
import '../tile/hexagonal_tile.ht'
import '../tile/orthogonal_tile.ht' as orthogonalTile
import '../tile/zone.ht'
import '../tile/common.ht'
import '../game.ht'
import '../tile/object.ht'
import '../entity/character/npc/elder_cultivator.ht'
import '../entity/character/creature/beast.ht'
import '../entity/common.ht'
import '../entity/character/npc/peddler.ht'
import '../l10n.ht'
import 'common.ht'
import '../binding/maze.ht'
import 'generation_algorithm.ht'

final _kLandSprites = [
  kSpriteLand,
  kSpriteGrassLand,
  kRockyTrail,
]

const _kPavedProbability = 0.35

const _kBlockWidth = 4
const _kBlockSize = 4
const _kElderCultivatorProbability = 0.2

/// 生成Roguelike副本的算法
/// 一个Maze包含多个地图，每个地图是一个单独的tilemap
/// 地图之间通过出入口或者传送点互相连接
struct CultivationRecruitMaze {
  construct ({
    name = 'cultivation_recruit_maze',
    tileset = 'cliff',
    organizationName,
  }) {
    this.name = name
    this.id = 'maze.${Hash.uid4(4)}.${name}'
    engine.info('开始生成副本: [${this.id}]')

    this.category = kMazeCategoryCultivatorRecruit
    this.levels = [] // 每一层是一个单独的 tilemap
    this.currentLevel = 0
    this.entities = {} // 包含所有显示在地图上的可互动对象，包括NPC、敌人、宝箱、陷阱、机关等等。
    this.history = [] // 本次副本中发生的事件记录，这些事件不会计入世界历史
    // 本次副本中的一些事件存档，用于脚本的一些逻辑判断，例如是否已经有过某种遭遇之类。
    this.flags = {
      organizationName,
    }

    // 创建副本过程中也会触发事件，因此这里要提前给localHistory赋值
    final savedLocalHistory = currentMazeHistory
    currentMazeHistory = this.history

    final [ width, height ] = [ _kBlockWidth * _kBlockSize, _kBlockWidth * _kBlockSize ]
    this.width = width
    this.height = height
    this.currentLevelIndex = 0

    final currentLevel = TileMap(
      id: '${this.id}',
      name: getLocaleString('mazeLevel', interpolations: [1]),
      width: width,
      height: height,
    )

    // 已经被分配了的地块
    final occupied = Set()

    fun randomPosition(xScope, yScope, [offsetX = 0, offsetY = 0]) {
      assert(xScope >= 2)
      assert(yScope >= 2)
      var left
      var top
      var index
      do {
        left = random.nextInt(xScope) + 1 + offsetX
        top = random.nextInt(yScope) + 1 + offsetY
        index = tilePos2Index(left, top, width)
      } while (occupied.contains(index))
      occupied.add(index)
      return Tile(left, top, index: index, mapWidth: width)
    }

    // engine.info('生成迷宫地块')
    final landZone = Zone(index: currentLevel.zones.length, category: kZoneLand)
    currentLevel.zones.add(landZone)
    for (var j in range(height)) {
      for (var i in range(width)) {
        // final isVoid = (i == 0) || (i == width - 1) || (j == 0) || (j == height - 1)
        final terrain = {
          ...Tile(i + 1, j + 1, mapWidth: width),
          isVisible: false,
          isSelectable: true,
        }
        currentLevel.terrains.add(terrain)
        addTerrainToZone(terrain, landZone.index, currentLevel)
      }
    }
    
    // engine.info('计算随机遭遇的位置')
    final blockSize = (width * height) ~/ 9
    var isOnCorner = false
    // 迷宫中的主要roguelike元素的可能位置锚点，分布在横四竖四的9个区块中
    // 4*4 的区块地图中，每个锚点所连接的路径
    // 链接所有九个锚点的路径一共有 12 个：
    //
    //     1------2------3------4
    //     |      |      |      |
    //     |      |      |      |
    //     5------6------7------8
    //     |      |      |      |
    //     |      |      |      |
    //     9-----10-----11-----12
    //     |      |      |      |
    //     |      |      |      |
    //     13----14-----15-----16
    // 
    final anchors = {}
    final randomScope = _kBlockWidth ~/ 2
    anchors[1] = randomPosition(randomScope, randomScope, 0, 0)
    anchors[2] = randomPosition(randomScope, randomScope, _kBlockWidth + randomScope ~/ 2, 0)
    anchors[3] = randomPosition(randomScope, randomScope, _kBlockWidth * 2 + randomScope ~/ 2, 0)
    anchors[4] = randomPosition(randomScope, randomScope, _kBlockWidth * 4 - randomScope, 0)
    anchors[5] = randomPosition(randomScope, randomScope, 0, _kBlockWidth + randomScope ~/ 2)
    anchors[6] = randomPosition(randomScope, randomScope, _kBlockWidth + randomScope ~/ 2, _kBlockWidth + randomScope ~/ 2)
    anchors[7] = randomPosition(randomScope, randomScope, _kBlockWidth * 2 + randomScope ~/ 2, _kBlockWidth + randomScope ~/ 2)
    anchors[8] = randomPosition(randomScope, randomScope, _kBlockWidth * 4 - randomScope, _kBlockWidth + randomScope ~/ 2)
    anchors[9] = randomPosition(randomScope, randomScope, 0, _kBlockWidth * 2 + randomScope ~/ 2)
    anchors[10] = randomPosition(randomScope, randomScope, _kBlockWidth + randomScope ~/ 2, _kBlockWidth * 2 + randomScope ~/ 2)
    anchors[11] = randomPosition(randomScope, randomScope, _kBlockWidth * 2 + randomScope ~/ 2, _kBlockWidth * 2 + randomScope ~/ 2)
    anchors[12] = randomPosition(randomScope, randomScope, _kBlockWidth * 4 - randomScope, _kBlockWidth * 2 + randomScope ~/ 2)
    anchors[13] = randomPosition(randomScope, randomScope, 0, _kBlockWidth * 4 - randomScope)
    anchors[14] = randomPosition(randomScope, randomScope, _kBlockWidth + randomScope ~/ 2, _kBlockWidth * 4 - randomScope)
    anchors[15] = randomPosition(randomScope, randomScope, _kBlockWidth * 2 + randomScope ~/ 2, _kBlockWidth * 4 - randomScope)
    anchors[16] = randomPosition(randomScope, randomScope, _kBlockWidth * 4 - randomScope, _kBlockWidth * 4 - randomScope)

    // engine.info('计算出入口')
    final entry
    final exit
    if (random.nextBool()) {
      entry = Tile(1, height, mapWidth: width)
      entry.nearestAnchor = anchors[13].index
      exit = Tile(width, 1, mapWidth: width)
      exit.nearestAnchor = anchors[4].index
    } else {
      entry = Tile(width, height, mapWidth: width)
      entry.nearestAnchor = anchors[16].index
      exit = Tile(1, 1, mapWidth: width)
      exit.nearestAnchor = anchors[1].index
    }

    occupied.add(entry.index)
    currentLevel.entryX = entry.left
    currentLevel.entryY = entry.top
    final entryEntity = {
      id: 'levelEntry',
      encounterType: 'levelEntry',
    }
    this.entities[entryEntity.id] = entryEntity
    currentLevel.terrains[entry.index].entityId = entryEntity.id
    final entryObject = TileMapObject(
      id: entryEntity.id,
      left: entry.left,
      top: entry.top,
      spriteSrc: 'maze/roadsign01.png',
      srcWidth: 32.0,
      srcHeight: 32.0,
    )
    currentLevel.objects.add(entryObject)

    occupied.add(exit.index)
    currentLevel.exitX = exit.left
    currentLevel.exitX = exit.top
    final exitEntity = {
      id: 'levelExit',
      encounterType: 'levelExit',
    }
    this.entities[exitEntity.id] = exitEntity
    currentLevel.terrains[exit.index].entityId = exitEntity.id
    final exitObject = TileMapObject(
      id: exitEntity.id,
      left: exit.left,
      top: exit.top,
      spriteSrc: 'maze/roadsign01.png',
      srcWidth: 32.0,
      srcHeight: 32.0,
    )
    currentLevel.objects.add(exitObject)

    final routes = [
      '1-2',
      '2-3',
      '3-4',
      '5-6',
      '6-7',
      '7-8',
      '9-10',
      '10-11',
      '11-12',
      '13-14',
      '14-15',
      '15-16',
      '1-5',
      '2-6',
      '3-7',
      '4-8',
      '5-9',
      '6-10',
      '7-11',
      '8-12',
      '9-13',
      '10-14',
      '11-15',
      '12-16',
    ]
    
    for (final anchor of anchors) {
      if (anchor.index == entry.index) continue
      if (anchor.index == exit.index) continue
      if (random.nextDouble() > _kElderCultivatorProbability) continue
      final senior = ElderCultivator()
      senior.encounterType = 'senior'
      this.entities[senior.id] = senior
      currentLevel.terrains[anchor.index].entityId = senior.id
      final object = TileMapObject(
        id: senior.id,
        left: anchor.left,
        top: anchor.top,
        spriteSrc: 'maze/elder_cultivator.png',
        srcWidth: 32.0,
        srcHeight: 48.0,
      )
      currentLevel.objects.add(object)
    }

    // engine.info('在锚点放置遭遇')
    
    for (final name in routes) {
      if (random.nextDouble() < _kPavedProbability) {
        generateRouteByAnchor(name, anchors, currentLevel, flag: 'isPaved')
      } else {
        generateRouteByAnchor(name, anchors, currentLevel)
      }
    }

    // 最后再联通到入口和出口上
    generateRouteByIndex(entry.index, entry.nearestAnchor, currentLevel)
    generateRouteByIndex(exit.index, exit.nearestAnchor, currentLevel)

    final blockZone = Zone(index: currentLevel.zones.length, category: 'block')
    currentLevel.zones.add(blockZone)
    for (final tile in currentLevel.terrains) {
      if (tile.flags.isRoute) {
        tile.isSelectable = true
        if (tile.flags.isPaved) {
          tile.spriteIndex = kPavedRockTile
        } else {
          tile.spriteIndex = random.nextIterable(_kLandSprites)
        }
      } else {
        tile.isVoid = true
        tile.isSelectable = false
        addTerrainToZone(tile, blockZone.index, currentLevel)
      }
    }
    
    this.levels.add(currentLevel)

    // 重置临时历史，需要在手动调用enterMaze时再赋值
    currentMazeHistory = savedLocalHistory
  }
}

// 返回布尔值，如果为真，则玩家控制角色会返回上一格，否则停在这一格
fun onHeroMovedOnCultivationRecruitMaze({tile, maze, currentLevelIndex}) -> bool {
  final entity = tile.entityId != null ? maze.entities[tile.entityId] : null

  // 战斗，异步函数，如果获胜则返回 true
  fun battle -> Future {
    return heroBattle(
      entity,
      resolveResult: true,
      loot: false,
      takeAll: false,
      isMazeIncident: true,
      char1Resurrect: true,
      char2Resurrect: true,
      onWon: () {
        tile.entityId = null
        setMazeObject(tile.left, tile.top, null)
        delete game.npcs[entity.id]
      },
      onLost: () {
        // TODO: 闯关失败的对话
        leaveMaze(maze)
      },
    )
  }

  if (entity != null) {
    engine.info('玩家在副本地图 ${maze.id} 第 ${currentLevelIndex + 1} 层 ${tile.left}, ${tile.top} 碰到了 ${entity.id}')
    
    when (entity.encounterType) {
      'senior' -> {
        showDialogByLocaleKeys(
          ['elderCultivatorGuard'],
          character: entity,
          interpolations: [maze.flags.organizationName]
        ).then((_) {
          showSelectionByLocaleKeys([
            'fight',
            'leave',
          ]).then((key) {
            when (key) {
              'fight' -> battle()
            }
          })
        })
        return true
      }
    }
    
    return false
  }
  else if (tile.spriteIndex == kPavedRockTile) {
    if (!maze.flags.hintedSpirit) {
      maze.flags.hintedSpirit = true

      showDialogByLocaleKeys(['cultivatorRecruitMaze.spiritHint'])
      return true
    } else if (!tile.flags.isGlowing) {
      tile.flags.isGlowing = true

      setMazeOverlaySprite(tile.left, tile.top, {
        spriteIndex: kPavedRockTileGlowing
      })
      // 扣除精神数值
      entitySpiritChange(hero, -18)
    }

  } else if (tile.spriteIndex == kRockyTrail) {
    if (!maze.flags.hintedStamina) {
      maze.flags.hintedStamina = true

      showDialogByLocaleKeys(['cultivatorRecruitMaze.staminaHint'])
      return true
    } else {
      
      // 扣除体力数值
      entityStaminaChange(hero, -18)
    }
  }

  return null
}
