import '../binding/maze.ht'
import '../game.ht'
import '../entity/character/battle_entity.ht'
import '../tile/hexagonal_tile.ht'
import 'mountain.ht'
import 'cultivation_recruit.ht'

const kEncounterProbability = 0.5
const kLevelUniqueEncounterProbability = 0.15
const kMazeUniqueEncounterProbability = 0.075

const kMazeCategoryMountain = 'mountain'
const kMazeCategoryCultivationRecruit = 'cultivationRecruit'

fun enterMaze(maze) {
  currentMaze = maze
  currentMazeHistory = maze.history
}

fun leaveMaze(maze) {
  currentMaze = null
  currentMazeHistory = null
  // 移除所有临时npc
  for (final entity of maze.entities) {
    if (!entity.isPermanent) {
      delete game.npcs[entity.id]
    }
  }
  disposeMaze()
}

fun setMazeLevelIndex(maze, levelIndex) {
  maze.currentLevelIndex = levelIndex
}

fun mazeGameOver(maze) {
  showMazeGameOver().then((_) {
    leaveMaze(maze)
  })
}

// 返回布尔值，如果为真，则玩家控制角色会返回上一格，false 则停在这一格，null 则不影响
fun onHeroMovedOnMazeMap({left, top, maze, currentLevelIndex}) {
  engine.info('玩家在副本地图 ${maze.id} 第 ${currentLevelIndex + 1} 层移动到了: ${left}, ${top}')
  
  final index = tilePos2Index(left, top, maze.width)
  final tile = maze.levels[currentLevelIndex].terrains[index]

  when (maze.category) {
    'mountain' -> {
      if (tile.entityId) {
        final entity = maze.entities[tile.entityId]
        assert(entity != null)
        engine.info('玩家在副本地图 ${maze.id} 第 ${currentLevelIndex + 1} 层 ${left}, ${top} 碰到了 ${entity.id}')
        return handleMountainInteraction(
          entity: entity,
          tile: tile,
          maze: maze,
          currentLevelIndex: currentLevelIndex,
        )
      }
    }
    'cultivationRecruit' -> {
      if (tile.entityId) {
        final entity = maze.entities[tile.entityId]
        assert(entity != null)
        engine.info('玩家在副本地图 ${maze.id} 第 ${currentLevelIndex + 1} 层 ${left}, ${top} 碰到了 ${entity.id}')
        return handleCultivationRecruitInteraction(
          entity: entity,
          tile: tile,
          maze: maze,
          currentLevelIndex: currentLevelIndex,
        )
      }
    }
  }

  return null
}
