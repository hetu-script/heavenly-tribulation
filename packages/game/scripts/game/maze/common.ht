import '../binding/maze.ht'
import '../game.ht'
import '../entity/character/battle_entity.ht'
import '../tile/hexagonal_tile.ht'
import 'mountain.ht'
import 'cultivation_recruit.ht'

const kEncounterProbability = 0.5
const kLevelUniqueEncounterProbability = 0.15
const kMazeUniqueEncounterProbability = 0.075

const kMazeCategoryMountain = 'mountain'
const kMazeCategoryCultivationRecruit = 'cultivationRecruit'

fun enterMaze(maze) {
  currentMaze = maze
  currentMazeHistory = maze.history
}

fun leaveMaze(maze) {
  currentMaze = null
  currentMazeHistory = null
  // 移除所有临时npc
  for (final entity of maze.entities) {
    if (!entity.isPermanent) {
      delete game.npcs[entity.id]
    }
  }
  disposeMaze()
}

fun setMazeLevelIndex(maze, levelIndex) {
  maze.currentLevelIndex = levelIndex
}

fun mazeGameOver(maze) {
  showMazeGameOver().then((_) {
    leaveMaze(maze)
  })
}

// 返回布尔值，如果为真，则玩家控制角色会返回上一格，否则停在这一格
fun handleMazeEntityInteraction({entityId, left, top, maze, currentLevelIndex}) -> bool {
  return when (maze.category) {
    'mountain' -> handleMountainInteraction(
      entityId: entityId,
      left: left,
      top: top,
      maze: maze,
      currentLevelIndex: currentLevelIndex,
    )
    'cultivationRecruit' -> handleCultivationRecruitInteraction(
      entityId: entityId,
      left: left,
      top: top,
      maze: maze,
      currentLevelIndex: currentLevelIndex,
    )
  }
}
