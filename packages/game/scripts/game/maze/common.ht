import '../binding/maze.ht'
import '../game.ht'

const kEncounterProbability = 0.5
const kLevelUniqueEncounterProbability = 0.15
const kMazeUniqueEncounterProbability = 0.075

fun enterMaze(maze) {
  currentMaze = maze
  localHistory = maze.history
}

fun leaveMaze(maze) {
  currentMaze = null
  localHistory = null
  // 移除所有临时npc
  for (final entity of maze.entities) {
    if (!entity.isPermanent) {
      delete game.npcs[entity.id]
    }
  }
  disposeMaze()
}

fun setMazeLevelIndex(maze, levelIndex) {
  maze.currentLevelIndex = levelIndex
}

fun mazeGameOver(maze) {
  showGameOver().then((value) {
    leaveMaze(maze)
  })
}

// 返回布尔值，如果为真，则玩家控制角色会返回上一格，否则停在这一格
fun handleMazeEntityInteraction({entityId, left, top, maze, currentLevelIndex}) -> bool {
  final index = tilePos2Index(left, top, maze.width)
  final tile = maze.levels[currentLevelIndex].terrains[index]
  final hero = getHero()
  final entity = maze.entities[entityId]
  assert(entity != null)
  engine.info('副本地图对象互动事件：[${entity.encounterType}: ${entity.id}](${left}, ${top})')

  // 战斗，异步函数，如果获胜则返回 true
  fun battle -> Future {
    return showDuel(hero, entity).then((result) {
      if (result?.result) {
        resolveDuelResult(hero, entity, result)
        characterLoot(hero, entity, takeAll: true)
        final incidentContent = getLocaleString('duelVistory', [ hero.name, entity.name ] )
        Incident(
          content: incidentContent,
          subjectIds: [hero.id],
          isPrivate: true,
          isLocal: true,
        )
        tile.objectId = null
        setMazeObject(left, top, null)
        delete game.npcs[entity.id]
        return true
      } else {
        mazeGameOver(maze)
      }
    })
  }

  // 盗贼，如果成功击败则返回true，否则返回false
  async banditEncounter {
    maze.flags.haveMetBandit = true
    final messages = getLocaleString('mazeBandit01').split('/n')
    return showDialogByStrings(messages, character: entity).then((value) {
      final selections = [
        'handOver',
        'plead',
        'escape',
        'fight',
      ]
      return showSelectionByLocaleKeys(selections).then((key) {
        when (key) {
          // 现实主义
          'handOver' -> {
            characterLoot(entity, hero, takeAll: true)
            return false
          }
          // 向盗贼求情，是否成功依赖于
          // 圆滑
          'plead' -> {
            if (hero.stats.charisma > kCharismaCheckThreshold) {
              showDialogByStrings([getLocaleString('pleadSuccess')], character: entity)
                .then((value) {
                  characterLoot(entity, hero, takeAll: false)
                })
              return false
            } else {
              showDialogByStrings([getLocaleString('pleadFailed')], character: entity)
              .then( (value) => battle() )
            }
          }
          // 懦弱
          'escape' -> {
            if (hero.stats.dexterity > entity.stats.dexterity || hero.stats.strength > entity.stats.strength) {
              final incidentContent = getLocaleString('incidentEscapeSuccess', [ entity.name ] )
              Incident(
                content: incidentContent,
                subjectIds: [hero.id],
                isPrivate: true,
                isLocal: true,
              )
              return false
            } else {
              return showDialogByStrings([getLocaleString('escapeFailed')], character: entity)
              .then( (value) => battle() )
            }
          }
          // 自信
          'fight' -> {
            return showDialogByStrings([getLocaleString('startFightBandit')], character: hero)
            .then( (value) => battle() )
          }
        }
      })
    })
  }

  when (entity.encounterType) {
    'banditMuscle' -> {
      if (!maze.flags.haveMetBandit) {
        banditEncounter().then((result) {
          if (result) {
            tile.objectId = levelExit0
            setMazeObject(left, top, 'levelExit0')
          }
        })
      }
      // 如果已经遇到过盗贼，不再对话，直接开始战斗
      else {
        battle().then((result) {
          if (result) {
            tile.objectId = levelExit0
            setMazeObject(left, top, 'levelExit0')
          }
        })
      }
      return true
    }
    'banditKiller' -> {
      if (!maze.flags.haveMetBandit) {
        banditEncounter().then((result) {
          if (result) {
            tile.objectId = levelExit0
            setMazeObject(left, top, 'levelExit0')
          }
        })
      }
      // 如果已经遇到过盗贼，不再对话，直接开始战斗
      else {
        battle().then((result) {
          if (result) {
            tile.objectId = levelExit0
            setMazeObject(left, top, 'levelExit0')
          }
        })
      }
      return true
    }
    'banditBoss' -> {
      if (!maze.flags.haveMetBandit) {
        banditEncounter().then((result) {
          if (result) {
            tile.objectId = levelExit0
            setMazeObject(left, top, 'levelExit0')
          }
        })
      }
      // 如果已经遇到过盗贼，不再对话，直接开始战斗
      else {
        battle().then((result) {
          if (result) {
            tile.objectId = levelExit0
            setMazeObject(left, top, 'levelExit0')
          }
        })
      }
      return true
    }
    'levelEntry' -> {
      var selections
      if (currentLevelIndex == 0) {
        selections = [
          'leaveMaze',
          'cancel',
        ]
      } else {
        selections = [
          'backToPreviousLevel',
          'cancel',
        ]
      }
      showSelectionByLocaleKeys(selections).then((key) =>
        when (key) {
          'leaveMaze' -> leaveMaze(maze)
          'backToPreviousLevel' -> {
            backToPreviousLevel()
            --maze.currentLevelIndex
          }
        }
      )
    }
    'levelExit' -> {
      var selections
      if (currentLevelIndex == maze.levels.length - 1) {
        selections = [
          'leaveMaze',
          'cancel',
        ]
      } else {
        selections = [
          'proceedToNextLevel',
          'cancel',
        ]
      }
      showSelectionByLocaleKeys(selections).then((key) =>
        when (key) {
          'proceedToNextLevel' -> {
            proceedToNextLevel()
            ++maze.currentLevelIndex
          }
          'leaveMaze' -> leaveMaze(maze)
        }
      )
    }
    'banditMinion' -> {
      if (!maze.flags.haveMetBandit) {
        banditEncounter()
      }
      // 如果已经遇到过盗贼喽啰，不再对话，直接开始战斗
      else {
        battle()
      }
    }
    'beast' -> {
      battle()
    }
    'peddler' -> {
      final messages = getLocaleString('peddlerDialogIntro').split('/n')
      showDialogByStrings(messages, character: entity)
      .then((value) {
        final selections = [
          'askForDirections',
          'trade',
          'steal',
          'rob',
          'attack',
          'sneakAttack',
          'cancel',
        ]
        showSelectionByLocaleKeys(selections)
        .then((key) {
          when (key) {
            'trade' -> {
              showMerchant(entity)
            }
            'attack' -> {

            }
          }
        })
      })
    }
  }
  
  return false
}
