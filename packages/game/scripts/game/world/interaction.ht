import '../game.ht'
import '../l10n.ht'
import '../tile/hexagonal_tile.ht'
import '../tile/tilemap.ht'
import '../logic.ht'
import '../datetime.ht'
import '../entity/item/consumable/consumable.ht'
import '../entity/item/material/material.ht'
import '../entity/item/material/jade.ht'
import '../entity/character/battle_entity.ht'
import '../binding/worldmap.ht'
import '../tile/common.ht'
import '../entity/character/enemy/bandit.ht'
import '../entity/character/creature/beast.ht'
import '../reward.ht'
import '../binding/worldmap.ht'

const kSearchSuccessProbability = 0.25

// 打猎会增加遇到野兽的概率200%
// 这个概率将会和地点本身的野兽概率相乘
const kHuntBeastProbability = 2.0

// 山峰上可能遇到强盗和野兽，但产出也较高
const kMountainBeastProbability = 0.15
const kMountainFruitProbability = 0.4
const kMountainWoodProbability = 0.3
const kMountainOreProbability = 0.15
const kMountainJadeProbability = 0.07
const kMountainHerbProbability = 0.2

// 森林中可能遇到强盗和野兽，但产出也较高
const kForestBeastProbability = 0.07
const kForestFruitProbability = 0.8
const kForestWoodProbability = 0.6
const kForestOreProbability = 0.04
const kForestJadeProbability = 0.02
const kForestHerbProbability = 0.4

// 平原上几乎不会遇到强盗和野兽，但产出也较低
const kPlainBeastProbability = 0.02
const kPlainFruitProbability = 0.3
const kPlainWoodProbability = 0.1
const kPlainOreProbability = 0.01
const kPlainJadeProbability = 0.001
const kPlainHerbProbability = 0.1

// 湖泊上没有风暴，但产出也较低
const kLakeFishProbability = 0.25

// 海洋上可能会遇到暴风雨，但产出也较高
const kSeaStormProbability = 0.3
const kSeaFishProbability = 0.45

// 在某个地形块上进行互动操作
// 山峰或树林产出物品更多，平原产出数量较少
// 但前者会有几率碰到野兽或者强盗
fun handleWorldTerrainInteraction(left, top) {
  
  // var isInjured = false
  // for (final status of hero.statusEffects) {
  //   if (status.category == kStatusCategoryInjury)
  //   isInjured = true
  // }
  // if (isInjured) {
  //   showDialogByLocaleKeys(['cannotInteractWhenInjured'], character: hero)
  //   return
  // }

  // 本月剩余的天数
  final currentDayOfMonth = getCurrentDay()
  if (currentDayOfMonth > 29) {
    showDialogByLocaleKeys(['cannotInteractAtEndOfMonth'], character: hero)
    return
  }
  final restDaysOfMonth = kDaysPerMonth - currentDayOfMonth

  // 英雄剩余的体力
  // 采集消耗体力为每天4点（每个tick 1点）。
  final staminaAvailableDays = hero.stats.stamina ~/ kTicksPerDay
  if (staminaAvailableDays < 1) {
    showDialogByLocaleKeys(['notEnoughStamina'], character: hero)
    return
  }

  // 可用的探索天数
  final availableDays = Math.min(restDaysOfMonth, staminaAvailableDays)

  final terrainIndex = tilePos2Index(left, top, game.world.width)
  final terrain = game.world.terrains[terrainIndex]

  final selections = [
    'search',
  ]

  when (terrain.kind) {
    kTerrainKindMountain, kTerrainKindForest, kTerrainKindPlain -> {
      selections.add('gather')
      selections.add('woodcut')
      selections.add('mine')
      selections.add('hunt')
    }
    kTerrainKindLake, kTerrainKindSea -> {
      selections.add('fish')
    }
  }

  selections.add('cancel')
  
  showSelectionByLocaleKeys(selections).then((key) {
    when (key) {
      'search' -> {
        final entityId = terrain.entityId
        final locationId = terrain.locationId
        final undiscoveredLocation
        if (locationId) {
          final location = game.locations[locationId]
          if (!location.isDiscovered) {
            undiscoveredLocation = location
          }
        }
        if (terrain.hasSearched) {
          if (entityId) {
            handleWorldMapEntityInteraction(entityId)
          } else {
            showDialogByLocaleKeys([alreadyExplored], character: hero)
          }
        } else {
          if (entityId) {
            showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
              var i = 0
              var found = false
              showProgress(getLocaleString('search'), checkProgress: () {
                ++i
                updateGame(ticks: kTicksPerDay)
                characterCostStamina(hero, kTicksPerDay)
                // TODO: 角色感知可以提高成功率
                if (random.nextDouble() < kSearchSuccessProbability) {
                  found = true
                  return false
                }
                if (i >= days) return false
                return true
              }).then((_) {
                final incidentContent = getLocaleString('characterExplore', [
                  hero.name,
                  '${terrain.left}, ${terrain.top}',
                  i,
                ])
                Incident(
                  subjectIds: [hero.id],
                  content: incidentContent,
                  isPrivate: true,
                )
                if (found) {
                  terrain.hasSearched = true
                  handleWorldMapEntityInteraction(entityId)
                } else {
                  showDialogByLocaleKeys(['sensedUndiscovered'], character: hero)
                }
              })
            })
          } else if (undiscoveredLocation) {
            showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
              var i = 0
              var found = false
              showProgress(getLocaleString('search'), checkProgress: () {
                ++i
                updateGame(ticks: kTicksPerDay)
                characterCostStamina(hero, kTicksPerDay)
                // TODO: 角色感知可以提高成功率
                if (random.nextDouble() < kSearchSuccessProbability) {
                  found = true
                  return false
                }
                if (i >= days) return false
                return true
              }).then((_) {
                final incidentContent = getLocaleString('characterExplore', [
                  hero.name,
                  '${terrain.left}, ${terrain.top}',
                  i,
                ])
                Incident(
                  subjectIds: [hero.id],
                  content: incidentContent,
                  isPrivate: true,
                )
                if (found) {
                  terrain.hasSearched = true
                  discoverLocation(undiscoveredLocation)
                  // TODO: 第一次发现据点事件
                  final message = getLocaleString('firstVisitCity', [undiscoveredLocation.name])
                  showDialogByStrings([message]).then((_) {
                    enterLocation(undiscoveredLocation.id)
                  })
                } else {
                  showDialogByLocaleKeys(['sensedUndiscovered'], character: hero)
                }
              })
            })
          } else {
            terrain.hasSearched = true
            showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
              showProgress(getLocaleString('search'), checkProgress: () {
                updateGame(ticks: kTicksPerDay)
                characterCostStamina(hero, kTicksPerDay)
                return false
              }).then((_) {
                final incidentContent = getLocaleString('characterExplore', [
                  hero.name,
                  '${terrain.left}, ${terrain.top}',
                  1,
                ])
                Incident(
                  subjectIds: [hero.id],
                  content: incidentContent,
                  isPrivate: true,
                )
                showDialogByLocaleKeys(['exploredEmtpy'], character: hero)
              })
            })
          }
        }
      }
      // 采集，可能会获得：药材（材料）、水果（材料）
      'gather' -> {
        showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
          final lootbox = Reward()
          var metBeast = false
          var i = 0
          showProgress(getLocaleString('gather'), () {
            ++i
            updateGame(ticks: kTicksPerDay)
            characterCostStamina(hero, kTicksPerDay)
            when (terrain.kind) {
              kTerrainKindMountain -> {
                if (random.nextDouble() < kMountainBeastProbability) {
                  metBeast = true
                  return false
                }
                if (random.nextDouble() < kMountainHerbProbability) {
                  entityAcquireItem(lootbox, Material.herb(), incidentOccured: false)
                }
                if (random.nextDouble() < kMountainFruitProbability) {
                  entityAcquireItem(lootbox, Material.fruit(), incidentOccured: false)
                }
              }
              kTerrainKindForest -> {
                if (random.nextDouble() < kForestBeastProbability) {
                  metBeast = true
                  return false
                }
                if (random.nextDouble() < kForestHerbProbability) {
                  entityAcquireItem(lootbox, Material.herb(), incidentOccured: false)
                }
                if (random.nextDouble() < kForestFruitProbability) {
                  entityAcquireItem(lootbox, Material.fruit(), incidentOccured: false)
                }
              }
              kTerrainKindPlain -> {
                if (random.nextDouble() < kPlainHerbProbability) {
                  entityAcquireItem(lootbox, Material.herb(), incidentOccured: false)
                }
                if (random.nextDouble() < kPlainFruitProbability) {
                  entityAcquireItem(lootbox, Material.fruit(), incidentOccured: false)
                }
              }
            }
            if (i >= days) return false
            return true
          }).then((_) {
            final incidentContent = getLocaleString('characterExplore', [
              hero.name,
              '${terrain.left}, ${terrain.top}',
              i,
            ])
            Incident(
              subjectIds: [hero.id],
              content: incidentContent,
              isPrivate: true,
            )
            () async {
              if (lootbox.inventory.isEmpty) {
                return showDialogByLocaleKeys(['interactionGotNothing'], character: hero)
              } else {
                characterLootBox(hero, lootbox)
              }
            } ().then((_) {
              if (metBeast) {
                final beast = Beast()
                final message = getLocaleString('metBeast', [beast.name])
                showDialogByStrings([message]).then((_) {
                  heroBattle(beast)
                })
              }
            })
          })
        })
      }
      // 伐木，可能会获得：木料
      'woodcut' -> {
        showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
          final lootbox = Reward()
          var metBeast = false
          var i = 0
          showProgress(getLocaleString('woodcut'), () {
            ++i
            updateGame(ticks: kTicksPerDay)
            characterCostStamina(hero, kTicksPerDay)
            when (terrain.kind) {
              kTerrainKindMountain -> {
                if (random.nextDouble() < kMountainBeastProbability) {
                  metBeast = true
                  return false
                }
                if (random.nextDouble() < kMountainWoodProbability) {
                  entityAcquireItem(lootbox, Material.wood(), incidentOccured: false)
                }
              }
              kTerrainKindForest -> {
                if (random.nextDouble() < kForestBeastProbability) {
                  metBeast = true
                  return false
                }
                if (random.nextDouble() < kForestWoodProbability) {
                  entityAcquireItem(lootbox, Material.wood(), incidentOccured: false)
                }
              }
              kTerrainKindPlain -> {
                if (random.nextDouble() < kPlainWoodProbability) {
                  entityAcquireItem(lootbox, Material.wood(), incidentOccured: false)
                }
              }
            }
            if (i >= days) return false
            return true
          }).then((_) {
            final incidentContent = getLocaleString('characterWoodcutted', [
              hero.name,
              '${terrain.left}, ${terrain.top}',
              i,
            ])
            Incident(
              subjectIds: [hero.id],
              content: incidentContent,
              isPrivate: true,
            )
            () async {
              if (lootbox.inventory.isEmpty) {
                return showDialogByLocaleKeys(['interactionGotNothing'], character: hero)
              } else {
                characterLootBox(hero, lootbox)
              }
            } ().then((_) {
              if (metBeast) {
                final beast = Beast()
                final message = getLocaleString('metBeast', [beast.name])
                showDialogByStrings([message]).then((_) {
                  heroBattle(beast)
                })
              }
            })
          })
        })
      }
      // 挖矿，可能会获得：矿石、灵石
      'mine' -> {
        showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
          final lootbox = Reward()
          var metBeast = false
          var i = 0
          showProgress(getLocaleString('mine'), () {
            ++i
            updateGame(ticks: kTicksPerDay)
            characterCostStamina(hero, kTicksPerDay)
            when (terrain.kind) {
              kTerrainKindMountain -> {
                if (random.nextDouble() < kMountainBeastProbability) {
                  metBeast = true
                  return false
                }
                if (random.nextDouble() < kMountainOreProbability) {
                  entityAcquireItem(lootbox, Material.ore(), incidentOccured: false)
                }
                if (random.nextDouble() < kMountainJadeProbability) {
                  entityAcquireItem(lootbox, Jade(), incidentOccured: false)
                }
              }
              kTerrainKindForest -> {
                if (random.nextDouble() < kForestBeastProbability) {
                  metBeast = true
                  return false
                }
                if (random.nextDouble() < kForestOreProbability) {
                  entityAcquireItem(lootbox, Material.ore(), incidentOccured: false)
                }
                if (random.nextDouble() < kForestJadeProbability) {
                  entityAcquireItem(lootbox, Jade(), incidentOccured: false)
                }
              }
              kTerrainKindPlain -> {
                if (random.nextDouble() < kPlainOreProbability) {
                  entityAcquireItem(lootbox, Material.ore(), incidentOccured: false)
                }
                if (random.nextDouble() < kPlainJadeProbability) {
                  entityAcquireItem(lootbox, Jade(), incidentOccured: false)
                }
              }
            }
            if (i >= days) return false
            return true
          }).then((_) {
            final incidentContent = getLocaleString('characterMined', [
              hero.name,
              '${terrain.left}, ${terrain.top}',
              i,
            ])
            Incident(
              subjectIds: [hero.id],
              content: incidentContent,
              isPrivate: true,
            )
            () async {
              if (lootbox.inventory.isEmpty) {
                return showDialogByLocaleKeys(['interactionGotNothing'], character: hero)
              } else {
                characterLootBox(hero, lootbox)
              }
            } ().then((_) {
              if (metBeast) {
                final beast = Beast()
                final message = getLocaleString('metBeast', [beast.name])
                showDialogByStrings([message]).then((_) {
                  heroBattle(beast)
                })
              }
            })
          })
        })
      }
      // 捕猎，增加遇到野兽的概率200%
      'hunt' -> {
        showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
          var metBeast = false
          var i = 0
          showProgress(getLocaleString('hunt'), () {
            ++i
            updateGame(ticks: kTicksPerDay)
            characterCostStamina(hero, kTicksPerDay)
            when (terrain.kind) {
              kTerrainKindMountain -> {
                if (random.nextDouble() < (kMountainBeastProbability * kHuntBeastProbability)) {
                  metBeast = true
                  return false
                }
              }
              kTerrainKindForest -> {
                if (random.nextDouble() < (kForestBeastProbability * kHuntBeastProbability)) {
                  metBeast = true
                  return false
                }
              }
              kTerrainKindPlain -> {
                if (random.nextDouble() < (kPlainBeastProbability * kHuntBeastProbability)) {
                  metBeast = true
                  return false
                }
              }
            }
            if (i >= days) return false
            return true
          }).then((_) {
            final incidentContent = getLocaleString('characterHunted', [
              hero.name,
              '${terrain.left}, ${terrain.top}',
              i,
            ])
            Incident(
              subjectIds: [hero.id],
              content: incidentContent,
              isPrivate: true,
            )
            if (metBeast) {
              final beast = Beast()
              final message = getLocaleString('foundBeast', [beast.name])
              showDialogByStrings([message]).then((_) {
                heroBattle(beast)
              })
            } else {
              return showDialogByLocaleKeys(['interactionGotNothing'], character: hero)
            }
          })
        })
      }
      // 捕鱼，可能会获得：河鱼、海鱼、虾、蟹
      'fish' -> {
        // if (game.playerCharacterMonthly.fished.contains(terrainIndex)) {
        //   showDialogByLocaleKeys(['terrainAlreadyFished'], character: hero)
        //   return
        // }
        // game.playerCharacterMonthly.fished.add(terrainIndex)
        
        showIntInput(getLocaleString('timeDays'), availableDays).then((days) {
          final lootbox = Reward()
          var metStorm = false
          var i = 0
          showProgress(getLocaleString('fish'), () {
            ++i
            updateGame(ticks: kTicksPerDay)
            characterCostStamina(hero, kTicksPerDay)
            when (terrain.kind) {
              kTerrainKindLake -> {
                if (random.nextDouble() < kLakeFishProbability) {
                  entityAcquireItem(lootbox, Material.fish(), incidentOccured: false)
                }
              }
              kTerrainKindSea -> {
                if (random.nextDouble() < kSeaStormProbability) {
                  metStorm = true
                  return false
                }
                if (random.nextDouble() < kSeaFishProbability) {
                  entityAcquireItem(lootbox, Material.fish(), incidentOccured: false)
                }
              }
            }
            if (i >= days) return false
            return true
          }).then((_) {
            final incidentContent = getLocaleString('characterFished', [
              hero.name,
              '${terrain.left}, ${terrain.top}',
              i,
            ])
            Incident(
              subjectIds: [hero.id],
              content: incidentContent,
              isPrivate: true,
            )
            () async {
              if (metStorm) {
                return showDialogByLocaleKeys(['metStorm'], character: hero)
              }
            } ().then((_) {
              if (lootbox.inventory.isEmpty) {
                return showDialogByLocaleKeys(['interactionGotNothing'], character: hero)
              } else {
                characterLootBox(hero, lootbox)
              }
            })
          })
        })
      }
    }
  })
}

// 返回布尔值，如果为真，则玩家控制角色会停止移动
fun handleWorldMapEntityInteraction(entityId) -> bool {
  final entity = game.world.entities[entityId]
  assert(entity != null)

  when (entity.encounterType) {
    // 隐藏的盗贼营地副本
    'banditCamp' -> {
      showDialogByLocaleKeys(['worldMapEncounterBanditCamp'], character: hero).then((_) {
        showSelectionByLocaleKeys(['exploreMaze', 'cancel']).then((key) {
          when (key) {
            'exploreMaze' -> {
              final maze = game.mazes[entity.id]
              assert(maze != null)
              enterMaze(maze)
              showMaze(maze)
            }
          }
        })
      })
    }
    // 隐藏的洞天福地
    'location' -> {

    }
  }

  return false
}
